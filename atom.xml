<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Atlantis</title>
  <icon>https://www.gravatar.com/avatar/ff895804a610e822e7b30940b8873206</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.limuyang.cc/"/>
  <updated>2019-08-16T09:03:51.843Z</updated>
  <id>https://www.limuyang.cc/</id>
  
  <author>
    <name>李牧羊</name>
    <email>lin794653318@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阅读分析React-Redux源码</title>
    <link href="https://www.limuyang.cc/2019/06/19/%E9%98%85%E8%AF%BB%E5%88%86%E6%9E%90React-Redux%E6%BA%90%E7%A0%81/"/>
    <id>https://www.limuyang.cc/2019/06/19/阅读分析React-Redux源码/</id>
    <published>2019-06-19T16:57:44.000Z</published>
    <updated>2019-08-16T09:03:51.843Z</updated>
    
    <content type="html"><![CDATA[<p>redux作为大型应用的状态管理工具，如果想配合react使用，需要借助react-redux。 redux主要完成两件事情：</p><ul><li>通过<code>context</code>从<code>root</code>向下传入<code>store</code>，保证数据的单项流动的同时也方便了子组件从<code>store</code>上获取数据</li><li>当应用状态发生变化，触发<code>subscribe</code>方法进行监听，实现相关逻辑</li></ul><blockquote><p>在<code>React 16.4.0</code>之前，<code>React</code>官方是不推荐使用<code>context</code>的，原因在于，当<code>context</code>中的值刷新的时候，是从上到下刷新的，如果中间有组件的<code>shouldComponentUpdate</code>返回了<code>false</code>，这个组件下面的组件就收不到更新后的值；而<code>React-Redux</code>实现了订阅发布的模式，保证使用了<code>store</code>的组件在数据更新的时候可以得到通知。<br>在<code>React 16.4.0</code>之后官方将<code>createContext</code>暴露出来了，以上的问题不会出现，但是是不是意味着，可以用<code>context</code>来替代<code>redux</code>呢？理论上是可以的，但是并不推荐这样做，因为在<code>redux</code>的发展中，其生态系统是非常繁荣的，用<code>Redux</code>能避免重复造轮子的窘境。<br>引自：<a href="http://cuteshilina.com/2019/01/19/HowReactReduxWorks/#我们为什么需要react-redux" target="_blank" rel="noopener">http://cuteshilina.com/2019/01/19/HowReactReduxWorks/#我们为什么需要react-redux</a><br><a id="more"></a><br>看一眼React-Redux的目录结构：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├── components</span><br><span class="line">│   ├── Context.js</span><br><span class="line">│   ├── Provider.js</span><br><span class="line">│   └── connectAdvanced.js</span><br><span class="line">├── connect</span><br><span class="line">│   ├── connect.js</span><br><span class="line">│   ├── mapDispatchToProps.js</span><br><span class="line">│   ├── mapStateToProps.js</span><br><span class="line">│   ├── mergeProps.js</span><br><span class="line">│   ├── selectorFactory.js</span><br><span class="line">│   ├── verifySubselectors.js</span><br><span class="line">│   └── wrapMapToProps.js</span><br><span class="line">├── index.js</span><br><span class="line">└── utils</span><br><span class="line">    ├── isPlainObject.js</span><br><span class="line">    ├── shallowEqual.js</span><br><span class="line">    ├── verifyPlainObject.js</span><br></pre></td></tr></table></figure><p>入口在<code>index.js</code>：</p><h4 id="Index"><a href="#Index" class="headerlink" title="Index"></a>Index</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Provider <span class="keyword">from</span> <span class="string">'./components/Provider'</span></span><br><span class="line"><span class="keyword">import</span> connectAdvanced <span class="keyword">from</span> <span class="string">'./components/connectAdvanced'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ReactReduxContext &#125; <span class="keyword">from</span> <span class="string">'./components/Context'</span></span><br><span class="line"><span class="keyword">import</span> connect <span class="keyword">from</span> <span class="string">'./connect/connect'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; Provider, connectAdvanced, ReactReduxContext, connect &#125;</span><br></pre></td></tr></table></figure><p>可以看到入口只是对外输出了<code>Provider</code>、<code>connenct</code>、<code>connectedAdvanced</code>三个方法，我们常用的是前面两种方法。</p><p>先看Provider。</p><h4 id="Provider"><a href="#Provider" class="headerlink" title="Provider"></a>Provider</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ReactReduxContext &#125; <span class="keyword">from</span> <span class="string">'./Context'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Provider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props)</span><br><span class="line">    <span class="comment">// 获取store</span></span><br><span class="line">    <span class="keyword">const</span> &#123; store &#125; = props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      storeState: store.getState(),</span><br><span class="line">      store</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="comment">// 判断是否挂载的flag</span></span><br><span class="line">    <span class="keyword">this</span>._isMounted = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">this</span>.subscribe()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.unsubscribe) <span class="keyword">this</span>.unsubscribe()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._isMounted = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidUpdate(prevProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.props.store !== prevProps.store) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.unsubscribe) <span class="keyword">this</span>.unsubscribe()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.subscribe()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  subscribe() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; store &#125; = <span class="keyword">this</span>.props</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取最新的state</span></span><br><span class="line">      <span class="keyword">const</span> newStoreState = store.getState()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!<span class="keyword">this</span>._isMounted) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 更新storeState</span></span><br><span class="line">      <span class="keyword">this</span>.setState(<span class="function"><span class="params">providerState</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// If the value is the same, skip the unnecessary state update.</span></span><br><span class="line">        <span class="keyword">if</span> (providerState.storeState === newStoreState) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">storeState</span>: newStoreState &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Actions might have been dispatched between render and mount - handle those</span></span><br><span class="line">    <span class="keyword">const</span> postMountStoreState = store.getState()</span><br><span class="line">    <span class="keyword">if</span> (postMountStoreState !== <span class="keyword">this</span>.state.storeState) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">storeState</span>: postMountStoreState &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> Context = <span class="keyword">this</span>.props.context || ReactReduxContext</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Context.Provider value=&#123;<span class="keyword">this</span>.state&#125;&gt;</span><br><span class="line">        &#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">      &lt;<span class="regexp">/Context.Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Provider.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  store: PropTypes.shape(&#123;</span></span><br><span class="line"><span class="regexp">    subscribe: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">    dispatch: PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">    getState: PropTypes.func.isRequired</span></span><br><span class="line"><span class="regexp">  &#125;),</span></span><br><span class="line"><span class="regexp">  context: PropTypes.object,</span></span><br><span class="line"><span class="regexp">  children: PropTypes.any</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Provider</span></span><br></pre></td></tr></table></figure><p>我们在使用Provider的时候只需要把<code>Store</code>传入，通过<code>Context</code>这个<code>API</code>来实现全局注入Store，除了使用默认的<code>Context</code>之外我们也可以使用自定义的<code>Context</code>，看一下默认的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ReactReduxContext = React.createContext(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ReactReduxContext</span><br></pre></td></tr></table></figure></p><p>回到<code>Provider.js</code>，在初始化阶段利用<code>state</code>去存储<code>store</code>及其对应的<code>state</code>信息，在<code>componentDidMount</code>周期调用<code>subscribe</code>方法添加订阅以便于在每次<code>dispatch action</code>的时候可以更新当前<code>state</code>里面的<code>storeState</code>，同时这个方法会返回一个用于取消当前订阅的函数，在<code>componentWillUnmount</code>时候执行。<br>可以看到<code>Provider</code>做的工作其实比较简单，事实上也是如此，主要的工作在<code>connect.js</code>。</p><h4 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> connectAdvanced <span class="keyword">from</span> <span class="string">'../components/connectAdvanced'</span></span><br><span class="line"><span class="keyword">import</span> shallowEqual <span class="keyword">from</span> <span class="string">'../utils/shallowEqual'</span></span><br><span class="line"><span class="keyword">import</span> defaultMapDispatchToPropsFactories <span class="keyword">from</span> <span class="string">'./mapDispatchToProps'</span></span><br><span class="line"><span class="keyword">import</span> defaultMapStateToPropsFactories <span class="keyword">from</span> <span class="string">'./mapStateToProps'</span></span><br><span class="line"><span class="keyword">import</span> defaultMergePropsFactories <span class="keyword">from</span> <span class="string">'./mergeProps'</span></span><br><span class="line"><span class="keyword">import</span> defaultSelectorFactory <span class="keyword">from</span> <span class="string">'./selectorFactory'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  connect is a facade over connectAdvanced. It turns its args into a compatible</span></span><br><span class="line"><span class="comment">  selectorFactory, which has the signature:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    (dispatch, options) =&gt; (nextState, nextOwnProps) =&gt; nextFinalProps</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  connect passes its args to connectAdvanced as options, which will in turn pass them to</span></span><br><span class="line"><span class="comment">  selectorFactory each time a Connect component instance is instantiated or hot reloaded.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  selectorFactory returns a final props selector from its mapStateToProps,</span></span><br><span class="line"><span class="comment">  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,</span></span><br><span class="line"><span class="comment">  mergePropsFactories, and pure args.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  The resulting final props selector is called by the Connect component instance whenever</span></span><br><span class="line"><span class="comment">  it receives new props or store state.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params">arg, factories, name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = factories.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = factories[i](arg)</span><br><span class="line">    <span class="keyword">if</span> (result) <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, options</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">`Invalid value of type <span class="subst">$&#123;<span class="keyword">typeof</span> arg&#125;</span> for <span class="subst">$&#123;name&#125;</span> argument when connecting component <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">        options.wrappedComponentName</span></span></span><br><span class="line"><span class="string"><span class="subst">      &#125;</span>.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strictEqual</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a === b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// createConnect with default args builds the 'official' connect behavior. Calling it with</span></span><br><span class="line"><span class="comment">// different options opens up some testing and extensibility scenarios</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createConnect</span>(<span class="params">&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">  connectHOC = connectAdvanced,</span></span></span><br><span class="line"><span class="function"><span class="params">  mapStateToPropsFactories = defaultMapStateToPropsFactories, <span class="regexp">//</span> 根据传入的mapStateToProp参数类型来决定调用什么方法</span></span></span><br><span class="line"><span class="function"><span class="params">  mapDispatchToPropsFactories = defaultMapDispatchToPropsFactories, <span class="regexp">//</span> 根据传入的mapDispatchToProps参数类型来决定调用什么方法</span></span></span><br><span class="line"><span class="function"><span class="params">  mergePropsFactories = defaultMergePropsFactories, <span class="regexp">//</span> 如果不传调用默认的mergeProps方法，否则使用自定义的mergeProps方法</span></span></span><br><span class="line"><span class="function"><span class="params">  selectorFactory = defaultSelectorFactory <span class="regexp">//</span> 计算mapStateToProps，mapDispatchToProps, ownProps的结果</span></span></span><br><span class="line"><span class="function"><span class="params">&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    mapStateToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    mapDispatchToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    mergeProps,</span></span></span><br><span class="line"><span class="function"><span class="params">    &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      pure = true, <span class="regexp">//</span> 设为true表示我们假设这个组件的状态除了从props传入之外不依赖于外界输入以及自身的state，此时connect只会对相关的state<span class="regexp">/props进行浅比较以避免重新渲染</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      areStatesEqual = strictEqual,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      areOwnPropsEqual = shallowEqual,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      areStatePropsEqual = shallowEqual,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      areMergedPropsEqual = shallowEqual,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      ...extraOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    &#125; = &#123;&#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  ) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ 根据传入的参数的类型不同Object/</span>Function调用对应的factory方法来返回对应的函数</span></span></span><br><span class="line"><span class="function"><span class="params">    const initMapStateToProps = match(</span></span></span><br><span class="line"><span class="function"><span class="params">      mapStateToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">      mapStateToPropsFactories,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="string">'mapStateToProps'</span></span></span></span><br><span class="line"><span class="function"><span class="params">    </span>)</span></span><br><span class="line"><span class="function">    <span class="title">const</span> <span class="title">initMapDispatchToProps</span> = <span class="title">match</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      mapDispatchToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">      mapDispatchToPropsFactories,</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="string">'mapDispatchToProps'</span></span></span></span><br><span class="line"><span class="function"><span class="params">    </span>)</span></span><br><span class="line"><span class="function">    <span class="title">const</span> <span class="title">initMergeProps</span> = <span class="title">match</span>(<span class="params">mergeProps, mergePropsFactories, <span class="string">'mergeProps'</span></span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">connectHOC</span>(<span class="params">selectorFactory, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="regexp">//</span> used in error messages</span></span></span><br><span class="line"><span class="function"><span class="params">      methodName: <span class="string">'connect'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="regexp">//</span> used to compute Connect<span class="string">'s displayName from the wrapped component'</span>s displayName.</span></span></span><br><span class="line"><span class="function"><span class="params">      getDisplayName: name =&gt; <span class="string">`Connect(<span class="subst">$&#123;name&#125;</span>)`</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      <span class="regexp">//</span> if mapStateToProps is falsy, the Connect component doesn<span class="string">'t subscribe to store state changes</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      // 如果没有传mapStateToProps将不会监听state的变化</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      shouldHandleStateChanges: Boolean(mapStateToProps),</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      // passed through to selectorFactory</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      // 传递给selectFactory的参数</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      initMapStateToProps,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      initMapDispatchToProps,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      initMergeProps,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      pure,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      areStatesEqual,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      areOwnPropsEqual,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      areStatePropsEqual,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      areMergedPropsEqual,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      // any extra options args can override defaults of connect or connectAdvanced</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      ...extraOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">export default createConnect()</span></span></span></span><br></pre></td></tr></table></figure><p>要看懂<code>connect.js</code>需要结合<code>connectAdvanced.js</code>一起，因为后者是前者的基础，这个函数会将<code>React</code>组件和<code>Redux Store</code>链接在一起，但是这个方法不会去处理如何将<code>state</code>、<code>ownProps</code>等组合到<code>props</code>里面，决定其行为的还是<code>connect.js</code>。</p><p>通过<code>export default createConnect()</code>可以知道<code>connect.js</code>对外输出的是我们平常使用的<code>connect</code>方法，这个方法接受<code>mapStateToProps</code>、<code>mapDispatchToProps</code>、<code>mergeProps</code>等主要参数以及一些可选参数。</p><p>紧接着，通过<code>match</code>方法，根据我们传入的参数类型不同，调用不同的<code>xxfactory</code>方法，以<code>mapStateToProps</code>为例，我们可以选择传入一个函数或者不传，会得到不同的调用结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; wrapMapToPropsConstant, wrapMapToPropsFunc &#125; <span class="keyword">from</span> <span class="string">'./wrapMapToProps'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">whenMapStateToPropsIsFunction</span>(<span class="params">mapStateToProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> mapStateToProps === <span class="string">'function'</span></span><br><span class="line">    ? wrapMapToPropsFunc(mapStateToProps, <span class="string">'mapStateToProps'</span>)</span><br><span class="line">    : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">whenMapStateToPropsIsMissing</span>(<span class="params">mapStateToProps</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> !mapStateToProps ? wrapMapToPropsConstant(<span class="function"><span class="params">()</span> =&gt;</span> (&#123;&#125;)) : <span class="literal">undefined</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]</span><br></pre></td></tr></table></figure><p>如果不传<code>mapStateToProps</code>会调用<code>wrapMapToPropsConstant</code>方法，该方法以一个返回空对象的函数作为参数，最后其实还是返回一个空对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapMapToPropsConstant</span>(<span class="params">getConstant</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">initConstantSelector</span>(<span class="params">dispatch, options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> constant = getConstant(dispatch, options)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">constantSelector</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> constant</span><br><span class="line">    &#125;</span><br><span class="line">    constantSelector.dependsOnOwnProps = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">return</span> constantSelector</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>否则的话就调用<code>wrapMapToPropsFunc</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapMapToPropsFunc</span>(<span class="params">mapToProps, methodName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">initProxySelector</span>(<span class="params">dispatch, &#123; displayName &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="function"><span class="keyword">function</span> <span class="title">mapToPropsProxy</span>(<span class="params">stateOrDispatch, ownProps</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> proxy.dependsOnOwnProps</span><br><span class="line">        ? proxy.mapToProps(stateOrDispatch, ownProps)</span><br><span class="line">        : proxy.mapToProps(stateOrDispatch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allow detectFactoryAndVerify to get ownProps</span></span><br><span class="line">    proxy.dependsOnOwnProps = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    proxy.mapToProps = <span class="function"><span class="keyword">function</span> <span class="title">detectFactoryAndVerify</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      stateOrDispatch,</span></span></span><br><span class="line"><span class="function"><span class="params">      ownProps</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">      proxy.mapToProps = mapToProps</span><br><span class="line">      <span class="comment">// 检查是否订阅了ownProps</span></span><br><span class="line">      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps)</span><br><span class="line">      <span class="keyword">let</span> props = proxy(stateOrDispatch, ownProps)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> props === <span class="string">'function'</span>) &#123;</span><br><span class="line">        proxy.mapToProps = props</span><br><span class="line">        proxy.dependsOnOwnProps = getDependsOnOwnProps(props)</span><br><span class="line">        props = proxy(stateOrDispatch, ownProps)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>)</span><br><span class="line">        verifyPlainObject(props, displayName, methodName)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> props</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里会返回一个名为<code>initProxySelector</code>的接受<code>dispatch</code>作为参数的函数，关于这个函数细节待会回来看，先回到<code>connect.js</code>，接着往下看。</p><p>在做完上述工作后，直接将所有参数传入<code>connectHOC</code>，所以我们要看一下<code>connectHOC</code>做了什么：</p><h4 id="connectAdvanced"><a href="#connectAdvanced" class="headerlink" title="connectAdvanced"></a>connectAdvanced</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hoistStatics <span class="keyword">from</span> <span class="string">'hoist-non-react-statics'</span></span><br><span class="line"><span class="keyword">import</span> invariant <span class="keyword">from</span> <span class="string">'invariant'</span></span><br><span class="line"><span class="keyword">import</span> React, &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; isValidElementType, isContextConsumer &#125; <span class="keyword">from</span> <span class="string">'react-is'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ReactReduxContext &#125; <span class="keyword">from</span> <span class="string">'./Context'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stringifyComponent = <span class="function"><span class="params">Comp</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">JSON</span>.stringify(Comp)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(Comp)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">connectAdvanced</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  <span class="regexp">/*</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    selectorFactory is a func that is responsible for returning the selector function used to</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    compute new props from state, props, and dispatch. For example:</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      export default connectAdvanced((dispatch, options) =&gt; (state, props) =&gt; (&#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        thing: state.things[props.thingId],</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">        saveThing: fields =&gt; dispatch(actionCreators.saveThing(props.thingId, fields)),</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">      &#125;))(YourComponent)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    Access to dispatch is provided to the factory so selectorFactories can bind actionCreators</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    outside of their selector as an optimization. Options passed to connectAdvanced are passed to</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    the selectorFactory, along with displayName and WrappedComponent, as the second argument.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    Note that selectorFactory is responsible for all caching/m</span>emoization of inbound and outbound</span></span></span><br><span class="line"><span class="function"><span class="params">    props. Do not use connectAdvanced directly without memoizing results between calls to your</span></span></span><br><span class="line"><span class="function"><span class="params">    selector, otherwise the Connect component will re-render on every state or props change.</span></span></span><br><span class="line"><span class="function"><span class="params">  *<span class="regexp">/</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  selectorFactory,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  /</span><span class="regexp">/ options object:</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">  &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ the func used to compute this HOC's displayName from the wrapped component's displayName.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ probably overridden by wrapper functions such as connect()</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    getDisplayName = name =&gt; `ConnectAdvanced($&#123;name&#125;)`,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ shown in error messages</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ probably overridden by wrapper functions such as connect()</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    methodName = 'connectAdvanced',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ REMOVED: if defined, the name of the property passed to the wrapped element indicating the number of</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ calls to render. useful for watching in react devtools for unnecessary re-renders.</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    renderCountProp = undefined,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ determines whether this HOC subscribes to store changes</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    shouldHandleStateChanges = true,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="regexp">    /</span><span class="regexp">/ REMOVED: the key of props/</span>context to get the store</span></span></span><br><span class="line"><span class="function"><span class="params">    storeKey = <span class="string">'store'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">//</span> REMOVED: expose the wrapped component via refs</span></span></span><br><span class="line"><span class="function"><span class="params">    withRef = false,</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="regexp">//</span> use React<span class="string">'s forwardRef to expose a ref of the wrapped component</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    forwardRef = false,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    // the context consumer to use</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    context = ReactReduxContext,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    // additional options are passed through to the selectorFactory</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    ...connectOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  &#125; = &#123;&#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  invariant(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    renderCountProp === undefined,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    `renderCountProp is removed. render counting is built into the latest React dev tools profiling extension`</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  invariant(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    !withRef,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    '</span>withRef is removed. To access the wrapped instance, use a ref on the connected component<span class="string">'</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  const customStoreWarningMessage =</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    '</span>To use a custom Redux store for specific components,  create a custom React context with <span class="string">' +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    "React.createContext(), and pass the context object to React Redux'</span>s Provider and specific components<span class="string">" +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    ' like:  &lt;Provider context=&#123;MyContext&#125;&gt;&lt;ConnectedComponent context=&#123;MyContext&#125; /&gt;&lt;/Provider&gt;. ' +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    'You may also pass a &#123;context : MyContext&#125; option to connect'</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  invariant(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    storeKey === 'store',</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    'storeKey has been removed and does not do anything. ' +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      customStoreWarningMessage</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  // 存储context</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  const Context = context</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  return function wrapWithConnect(WrappedComponent) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    if (process.env.NODE_ENV !== 'production') &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      invariant(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        isValidElementType(WrappedComponent),</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        `You must pass a component to the function returned by ` +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          `$&#123;methodName&#125;. Instead received $&#123;stringifyComponent(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            WrappedComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          )&#125;`</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    const wrappedComponentName =</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      WrappedComponent.displayName || WrappedComponent.name || 'Component'</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    const displayName = getDisplayName(wrappedComponentName)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    const selectorFactoryOptions = &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      ...connectOptions,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      getDisplayName,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      methodName,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      renderCountProp,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      shouldHandleStateChanges,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      storeKey,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      displayName,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      wrappedComponentName,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      WrappedComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    const &#123; pure &#125; = connectOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    // pure参数决定是继承Component还是PureComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    let OuterBaseComponent = Component</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    if (pure) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      OuterBaseComponent = PureComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    function makeDerivedPropsSelector() &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      let lastProps</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      let lastState</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      let lastDerivedProps</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      let lastStore</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      let lastSelectorFactoryOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      let sourceSelector</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      return function selectDerivedProps(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        state,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        props,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        store,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        selectorFactoryOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      ) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        if (pure &amp;&amp; lastProps === props &amp;&amp; lastState === state) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          // 直接返回上一次生成的props，避免不必要的渲染工作</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          return lastDerivedProps</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        if (</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          store !== lastStore ||</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          lastSelectorFactoryOptions !== selectorFactoryOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        ) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          // 更新数据</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          lastStore = store</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          lastSelectorFactoryOptions = selectorFactoryOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          sourceSelector = selectorFactory(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            store.dispatch,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            selectorFactoryOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        lastProps = props</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        lastState = state</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        // 生成新的需要注入的props，这里传入的props是ownProps</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        const nextProps = sourceSelector(state, props)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        lastDerivedProps = nextProps</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        return lastDerivedProps</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    function makeChildElementSelector() &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      let lastChildProps, lastForwardRef, lastChildElement, lastComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      return function selectChildElement(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        WrappedComponent,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        childProps,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        forwardRef</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      ) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        if (</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          childProps !== lastChildProps ||</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          forwardRef !== lastForwardRef ||</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          lastComponent !== WrappedComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        ) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          lastChildProps = childProps</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          lastForwardRef = forwardRef</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          lastComponent = WrappedComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          lastChildElement = (</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            &lt;WrappedComponent &#123;...childProps&#125; ref=&#123;forwardRef&#125; /&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        return lastChildElement</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    class Connect extends OuterBaseComponent &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      constructor(props) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        super(props)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        invariant(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          forwardRef ? !props.wrapperProps[storeKey] : !props[storeKey],</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          'Passing redux store in props has been removed and does not do anything. ' +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            customStoreWarningMessage</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        this.selectDerivedProps = makeDerivedPropsSelector()</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        this.selectChildElement = makeChildElementSelector()</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        this.indirectRenderWrappedComponent = this.indirectRenderWrappedComponent.bind(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          this</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      indirectRenderWrappedComponent(value) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        // calling renderWrappedComponent on prototype from indirectRenderWrappedComponent bound to `this`</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        return this.renderWrappedComponent(value)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      renderWrappedComponent(value) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        // 这里的value就是最开始在Provider里面定义的state</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        invariant(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          value,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          `Could not find "</span>store<span class="string">" in the context of ` +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            `"</span>$&#123;displayName&#125;<span class="string">". Either wrap the root component in a &lt;Provider&gt;, ` +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            `or pass a custom React context provider to &lt;Provider&gt; and the corresponding ` +</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            `React context consumer to $&#123;displayName&#125; in connect options.`</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        const &#123; storeState, store &#125; = value</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        let wrapperProps = this.props</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        let forwardedRef</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        if (forwardRef) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          wrapperProps = this.props.wrapperProps</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          forwardedRef = this.props.forwardedRef</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        // 生成要将store中哪些数据注入props的方法</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        let derivedProps = this.selectDerivedProps(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          storeState,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          wrapperProps,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          store,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          selectorFactoryOptions</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        // 拼装最后需要返回给connectAdvanced的组件</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        return this.selectChildElement(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          WrappedComponent,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          derivedProps,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          forwardedRef</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      render() &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        // 获取context以便使用context.consumer获取store的变更</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        const ContextToUse =</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          this.props.context &amp;&amp;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          this.props.context.Consumer &amp;&amp;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          isContextConsumer(&lt;this.props.context.Consumer /&gt;)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            ? this.props.context</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            : Context</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        return (</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          &lt;ContextToUse.Consumer&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">            &#123;this.indirectRenderWrappedComponent&#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">          &lt;/ContextToUse.Consumer&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        )</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    Connect.WrappedComponent = WrappedComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    Connect.displayName = displayName</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    if (forwardRef) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      // 将ref转发给子组件</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      const forwarded = React.forwardRef(function forwardConnectRef(</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        props,</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        ref</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      ) &#123;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">        return &lt;Connect wrapperProps=&#123;props&#125; forwardedRef=&#123;ref&#125; /&gt;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      &#125;)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      forwarded.displayName = displayName</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      forwarded.WrappedComponent = WrappedComponent</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      // hoistStatics用于copy静态方法，避免在使用HOC的时候类的静态方法丢失</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">      return hoistStatics(forwarded, WrappedComponent)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"></span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">    return hoistStatics(Connect, WrappedComponent)</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">  &#125;</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">&#125;</span></span></span></span><br></pre></td></tr></table></figure><p>略过前面的一堆警告判断不看，直接看返回，<code>connectAdvanced</code>会返回一个叫<code>wrapWithConnect</code>的方法，这个方法以一个<code>React Component</code>作为参数，回想我们平常调用<code>connect</code>的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect(mapStateToProps,mapDispatchToProps,mergeProps,options)(App);</span><br></pre></td></tr></table></figure><p>就是在这里，这个函数会先获取到<code>wrappedComponentName</code>，然后将除了<code>connect</code>方法前三个参数之外的其他参数都包裹到了<code>selectorFactoryOptions</code>里面，<code>wrapWithConnect</code>这个<code>HOC</code>会返回一个新的组件给我们，至于新组件是继承<code>Component</code>还是<code>PureComponent</code>取决于我们配置的<code>pure</code>参数，这里跳过接下来的两个方法直接看<code>return</code>，因为用到了<code>HOC</code>这里有两个需要注意的问题，一个是<code>ref</code>转发，这里代码里面有相关体现，另一个就是在使用<code>HOC</code>的时候会造成<code>static</code>丢失的问题，这里通过<code>hoist-non-react-statics</code>进行了处理，具体的描述可以看<a href="https://reactjs.org/docs/higher-order-components.html#static-methods-must-be-copied-over" target="_blank" rel="noopener">react doc</a>。</p><p><code>render</code>的时候会调用<code>this.indirectRenderWrappedComponent</code>方法，这个方法接收当前的<code>context</code>值，也就是<code>Provider</code>里面提供的<code>state</code>，看一眼这个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">renderWrappedComponent(value) &#123;</span><br><span class="line">        <span class="comment">// 这里的value就是最开始在Provider里面定义的state</span></span><br><span class="line">        invariant(</span><br><span class="line">          value,</span><br><span class="line">          <span class="string">`Could not find "store" in the context of `</span> +</span><br><span class="line">            <span class="string">`"<span class="subst">$&#123;displayName&#125;</span>". Either wrap the root component in a &lt;Provider&gt;, `</span> +</span><br><span class="line">            <span class="string">`or pass a custom React context provider to &lt;Provider&gt; and the corresponding `</span> +</span><br><span class="line">            <span class="string">`React context consumer to <span class="subst">$&#123;displayName&#125;</span> in connect options.`</span></span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">const</span> &#123; storeState, store &#125; = value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> wrapperProps = <span class="keyword">this</span>.props</span><br><span class="line">        <span class="keyword">let</span> forwardedRef</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (forwardRef) &#123;</span><br><span class="line">          wrapperProps = <span class="keyword">this</span>.props.wrapperProps</span><br><span class="line">          forwardedRef = <span class="keyword">this</span>.props.forwardedRef</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成要将store中哪些数据注入props的方法</span></span><br><span class="line">        <span class="keyword">let</span> derivedProps = <span class="keyword">this</span>.selectDerivedProps(</span><br><span class="line">          storeState,</span><br><span class="line">          wrapperProps,</span><br><span class="line">          store,</span><br><span class="line">          selectorFactoryOptions</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">// 拼装最后需要返回给connectAdvanced的组件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.selectChildElement(</span><br><span class="line">          WrappedComponent,</span><br><span class="line">          derivedProps,</span><br><span class="line">          forwardedRef</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>前面的不看，直接看<code>selectDerivedProps</code>，其实是调用了<code>makeDerivedPropsSelector</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeDerivedPropsSelector</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> lastProps</span><br><span class="line">      <span class="keyword">let</span> lastState</span><br><span class="line">      <span class="keyword">let</span> lastDerivedProps</span><br><span class="line">      <span class="keyword">let</span> lastStore</span><br><span class="line">      <span class="keyword">let</span> lastSelectorFactoryOptions</span><br><span class="line">      <span class="keyword">let</span> sourceSelector</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">selectDerivedProps</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        state,</span></span></span><br><span class="line"><span class="function"><span class="params">        props,</span></span></span><br><span class="line"><span class="function"><span class="params">        store,</span></span></span><br><span class="line"><span class="function"><span class="params">        selectorFactoryOptions</span></span></span><br><span class="line"><span class="function"><span class="params">      </span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pure &amp;&amp; lastProps === props &amp;&amp; lastState === state) &#123;</span><br><span class="line">          <span class="comment">// 直接返回上一次生成的props，避免不必要的渲染工作</span></span><br><span class="line">          <span class="keyword">return</span> lastDerivedProps</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">          store !== lastStore ||</span><br><span class="line">          lastSelectorFactoryOptions !== selectorFactoryOptions</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="comment">// 更新数据</span></span><br><span class="line">          lastStore = store</span><br><span class="line">          lastSelectorFactoryOptions = selectorFactoryOptions</span><br><span class="line">          sourceSelector = selectorFactory(</span><br><span class="line">            store.dispatch,</span><br><span class="line">            selectorFactoryOptions</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        lastProps = props</span><br><span class="line">        lastState = state</span><br><span class="line">        <span class="comment">// 生成新的需要注入的props，这里传入的props是ownProps</span></span><br><span class="line">        <span class="keyword">const</span> nextProps = sourceSelector(state, props)</span><br><span class="line"></span><br><span class="line">        lastDerivedProps = nextProps</span><br><span class="line">        <span class="keyword">return</span> lastDerivedProps</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>首先会对<code>state</code>和<code>props</code>做一次浅比较，如果没有变化直接返回上一次计算得到的结果，否则将<code>dispatch</code>和<code>selectorFactoryOptions</code>传入<code>selectorFactory</code>得到<code>sourceSelector</code>，<code>sourceSelector</code>由<code>connect</code>传入，这个方法用于计算<code>mapStateToProps</code>、<code>mapDispatchToProps</code>、 <code>ownProps</code>的结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">finalPropsSelectorFactory</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  dispatch,</span></span></span><br><span class="line"><span class="function"><span class="params">  &#123; initMapStateToProps, initMapDispatchToProps, initMergeProps, ...options &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> mapStateToProps = initMapStateToProps(dispatch, options)</span><br><span class="line">  <span class="keyword">const</span> mapDispatchToProps = initMapDispatchToProps(dispatch, options)</span><br><span class="line">  <span class="keyword">const</span> mergeProps = initMergeProps(dispatch, options)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    verifySubselectors(</span><br><span class="line">      mapStateToProps,</span><br><span class="line">      mapDispatchToProps,</span><br><span class="line">      mergeProps,</span><br><span class="line">      options.displayName</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> selectorFactory = options.pure</span><br><span class="line">    ? pureFinalPropsSelectorFactory</span><br><span class="line">    : impureFinalPropsSelectorFactory</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> selectorFactory(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">    mergeProps,</span><br><span class="line">    dispatch,</span><br><span class="line">    options</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>initMapStateToProps</code>之流就是我们之前<code>wrapMapToPropsFunc</code>函数返回的结果，我把代码贴下面方便对照：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">wrapMapToPropsFunc</span>(<span class="params">mapToProps, methodName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">initProxySelector</span>(<span class="params">dispatch, &#123; displayName &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> proxy = <span class="function"><span class="keyword">function</span> <span class="title">mapToPropsProxy</span>(<span class="params">stateOrDispatch, ownProps</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> proxy.dependsOnOwnProps</span><br><span class="line">        ? proxy.mapToProps(stateOrDispatch, ownProps)</span><br><span class="line">        : proxy.mapToProps(stateOrDispatch)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allow detectFactoryAndVerify to get ownProps</span></span><br><span class="line">    proxy.dependsOnOwnProps = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    proxy.mapToProps = <span class="function"><span class="keyword">function</span> <span class="title">detectFactoryAndVerify</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">      stateOrDispatch,</span></span></span><br><span class="line"><span class="function"><span class="params">      ownProps</span></span></span><br><span class="line"><span class="function"><span class="params">    </span>) </span>&#123;</span><br><span class="line">      proxy.mapToProps = mapToProps</span><br><span class="line">      <span class="comment">// 检查是否订阅了ownProps</span></span><br><span class="line">      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps)</span><br><span class="line">      <span class="keyword">let</span> props = proxy(stateOrDispatch, ownProps)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> props === <span class="string">'function'</span>) &#123;</span><br><span class="line">        proxy.mapToProps = props</span><br><span class="line">        proxy.dependsOnOwnProps = getDependsOnOwnProps(props)</span><br><span class="line">        props = proxy(stateOrDispatch, ownProps)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>)</span><br><span class="line">        verifyPlainObject(props, displayName, methodName)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> props</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> proxy</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是用<code>mapStateToProps</code>为例，先看<code>finalPropsSelectorFactory</code>，如果我们在参数里面设置了<code>pure</code>，就会调用<code>pureFinalPropsSelectorFactory</code>去构造最后的<code>selectorFactory</code>函数，这个函数定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">pureFinalPropsSelectorFactory</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  mapStateToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  mapDispatchToProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  mergeProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  dispatch,</span></span></span><br><span class="line"><span class="function"><span class="params">  &#123; areStatesEqual, areOwnPropsEqual, areStatePropsEqual &#125;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hasRunAtLeastOnce = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">let</span> state</span><br><span class="line">  <span class="keyword">let</span> ownProps</span><br><span class="line">  <span class="keyword">let</span> stateProps</span><br><span class="line">  <span class="keyword">let</span> dispatchProps</span><br><span class="line">  <span class="keyword">let</span> mergedProps</span><br><span class="line">  <span class="comment">// 如果是第一次运行执行该方法</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleFirstCall</span>(<span class="params">firstState, firstOwnProps</span>) </span>&#123;</span><br><span class="line">    state = firstState</span><br><span class="line">    ownProps = firstOwnProps</span><br><span class="line">    stateProps = mapStateToProps(state, ownProps)</span><br><span class="line">    dispatchProps = mapDispatchToProps(dispatch, ownProps)</span><br><span class="line">    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)</span><br><span class="line">    hasRunAtLeastOnce = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleNewPropsAndNewState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    stateProps = mapStateToProps(state, ownProps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapDispatchToProps.dependsOnOwnProps)</span><br><span class="line">      dispatchProps = mapDispatchToProps(dispatch, ownProps)</span><br><span class="line"></span><br><span class="line">    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)</span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleNewProps</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mapStateToProps.dependsOnOwnProps)</span><br><span class="line">      stateProps = mapStateToProps(state, ownProps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mapDispatchToProps.dependsOnOwnProps)</span><br><span class="line">      dispatchProps = mapDispatchToProps(dispatch, ownProps)</span><br><span class="line"></span><br><span class="line">    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)</span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleNewState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> nextStateProps = mapStateToProps(state, ownProps)</span><br><span class="line">    <span class="keyword">const</span> statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps)</span><br><span class="line">    stateProps = nextStateProps</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (statePropsChanged)</span><br><span class="line">      mergedProps = mergeProps(stateProps, dispatchProps, ownProps)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理后续调用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handleSubsequentCalls</span>(<span class="params">nextState, nextOwnProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps)</span><br><span class="line">    <span class="keyword">const</span> stateChanged = !areStatesEqual(nextState, state)</span><br><span class="line">    state = nextState</span><br><span class="line">    ownProps = nextOwnProps</span><br><span class="line">    <span class="comment">// 根据props和state的变动情况执行不同的方法，本质上最后都是调用mergedProps合并props</span></span><br><span class="line">    <span class="keyword">if</span> (propsChanged &amp;&amp; stateChanged) <span class="keyword">return</span> handleNewPropsAndNewState()</span><br><span class="line">    <span class="keyword">if</span> (propsChanged) <span class="keyword">return</span> handleNewProps()</span><br><span class="line">    <span class="keyword">if</span> (stateChanged) <span class="keyword">return</span> handleNewState()</span><br><span class="line">    <span class="keyword">return</span> mergedProps</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">pureFinalPropsSelector</span>(<span class="params">nextState, nextOwnProps</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> hasRunAtLeastOnce</span><br><span class="line">      ? handleSubsequentCalls(nextState, nextOwnProps)</span><br><span class="line">      : handleFirstCall(nextState, nextOwnProps)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整体流程比较简单，如果是第一次运行，调用<code>handleFirstCall</code>方法，它会根据传入的<code>state</code>和<code>ownProps</code>来返回<code>merge</code>后的<code>props</code>，这个方法里面调用了<code>mapStateToProps(state, ownProps)</code>，等同于调用了<code>mapToPropsProxy(state, ownProps)</code>，然后在判断是<code>mapStateToProps</code>还是<code>mapDispatchToProps</code>来返回处理后的<code>props</code>，后续运行也是一样的，大致的流程都没有什么大的区别，最后可以看一下默认的<code>mergeProps</code>是怎么处理的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">defaultMergeProps</span>(<span class="params">stateProps, dispatchProps, ownProps</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 简单的使用展开运算符合并对象</span></span><br><span class="line">  <span class="keyword">return</span> &#123; ...ownProps, ...stateProps, ...dispatchProps &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到就是直接展开，简明易懂。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redux作为大型应用的状态管理工具，如果想配合react使用，需要借助react-redux。 redux主要完成两件事情：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;context&lt;/code&gt;从&lt;code&gt;root&lt;/code&gt;向下传入&lt;code&gt;store&lt;/code&gt;，保证数据的单项流动的同时也方便了子组件从&lt;code&gt;store&lt;/code&gt;上获取数据&lt;/li&gt;
&lt;li&gt;当应用状态发生变化，触发&lt;code&gt;subscribe&lt;/code&gt;方法进行监听，实现相关逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在&lt;code&gt;React 16.4.0&lt;/code&gt;之前，&lt;code&gt;React&lt;/code&gt;官方是不推荐使用&lt;code&gt;context&lt;/code&gt;的，原因在于，当&lt;code&gt;context&lt;/code&gt;中的值刷新的时候，是从上到下刷新的，如果中间有组件的&lt;code&gt;shouldComponentUpdate&lt;/code&gt;返回了&lt;code&gt;false&lt;/code&gt;，这个组件下面的组件就收不到更新后的值；而&lt;code&gt;React-Redux&lt;/code&gt;实现了订阅发布的模式，保证使用了&lt;code&gt;store&lt;/code&gt;的组件在数据更新的时候可以得到通知。&lt;br&gt;在&lt;code&gt;React 16.4.0&lt;/code&gt;之后官方将&lt;code&gt;createContext&lt;/code&gt;暴露出来了，以上的问题不会出现，但是是不是意味着，可以用&lt;code&gt;context&lt;/code&gt;来替代&lt;code&gt;redux&lt;/code&gt;呢？理论上是可以的，但是并不推荐这样做，因为在&lt;code&gt;redux&lt;/code&gt;的发展中，其生态系统是非常繁荣的，用&lt;code&gt;Redux&lt;/code&gt;能避免重复造轮子的窘境。&lt;br&gt;引自：&lt;a href=&quot;http://cuteshilina.com/2019/01/19/HowReactReduxWorks/#我们为什么需要react-redux&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://cuteshilina.com/2019/01/19/HowReactReduxWorks/#我们为什么需要react-redux&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://www.limuyang.cc/tags/javascript/"/>
    
      <category term="源码阅读" scheme="https://www.limuyang.cc/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="react-redux" scheme="https://www.limuyang.cc/tags/react-redux/"/>
    
  </entry>
  
  <entry>
    <title>阅读分析Vue-Router源码</title>
    <link href="https://www.limuyang.cc/2019/05/09/%E9%98%85%E8%AF%BB%E5%88%86%E6%9E%90Vue-Router%E6%BA%90%E7%A0%81/"/>
    <id>https://www.limuyang.cc/2019/05/09/阅读分析Vue-Router源码/</id>
    <published>2019-05-09T17:05:05.000Z</published>
    <updated>2019-08-16T09:03:51.843Z</updated>
    
    <content type="html"><![CDATA[<h4 id="路由的概念"><a href="#路由的概念" class="headerlink" title="路由的概念"></a>路由的概念</h4><p>路由这个概念最开始是在后端出现的，以前使用模板引擎开发页面的时候经常会看到这样的路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://hometown.xxx.edu.cn/bbs/forum.php</span><br></pre></td></tr></table></figure></p><p>有时还会有带.asp或.html的路径，这就是所谓的SSR(Server Side Render)，通过服务端渲染，直接返回页面。<br><a id="more"></a><br>其响应过程是这样的</p><p>1.浏览器发出请求</p><p>2.服务器监听到80端口（或443）有请求过来，并解析url路径</p><p>3.根据服务器的路由配置，返回相应信息（可以是 html 字串，也可以是 json 数据，图片等）</p><p>4.浏览器根据数据包的Content-Type来决定如何解析数据</p><p>简单来说路由就是用来跟后端服务器进行交互的一种方式，通过不同的路径，来请求不同的资源，请求不同的页面是路由的其中一种功能。就像路由器在网络层中扮演的角色一样，肩负着将数据包正确导向目的地址的重任，只不过在这里变成了客户端浏览器的指路人，所谓的前端路由，指的是一种能力，即：</p><blockquote><p>不依赖于服务器，根据不同的URL渲染不同的页面</p></blockquote><h4 id="前端路由与后端路由"><a href="#前端路由与后端路由" class="headerlink" title="前端路由与后端路由"></a>前端路由与后端路由</h4><p>在<code>Ajax</code>还没有诞生的时候，路由的工作是交给后端来完成的，当进行页面切换的时候，浏览器会发送不同的<code>URL</code>请求，服务器接收到浏览器的请求时，通过解析不同的<code>URL</code>去拼接需要的<code>Html</code>或模板，然后将结果返回到浏览器端进行渲染。</p><p>服务器端路由同样是有利亦有弊。它的好处是安全性更高，更严格得控制页面的展现。这在某些场景中是很有用的，譬如下单支付流程，每一步只有在上一步成功执行之后才能抵达。这在服务器端可以为每一步流程添加验证机制，只有验证通过才返回正确的页面。那么前端路由不能实现每一步的验证？自然不是，姑且相信你的代码可以写的很严谨，保证正常情况下流程不会错，但是另一个不得不面对的事实是：前端是毫无安全性可言的。用户可以肆意修改代码来进入不同的流程，你可能会为此添加不少的处理逻辑。相较之下，当然是后端控制页面的进入权限更为安全和简便。</p><p>另一方面，后端路由无疑增加了服务器端的负荷，并且需要reload页面，用户体验其实不佳。</p><h4 id="前端路由的出现"><a href="#前端路由的出现" class="headerlink" title="前端路由的出现"></a>前端路由的出现</h4><p>在 90s 年代初，大多数的网页都是通过直接返回<code>HTML</code>的，用户的每次更新操作都需要重新刷新页面。及其影响交互体验，随着网络的发展，迫切需要一种方案来改善这种情况。</p><p>1996，微软首先提出 iframe 标签，<code>iframe</code>带来了异步加载和请求元素的概念，随后在 1998 年，微软的 Outloook Web App 团队提出<code>Ajax</code>的基本概念（XMLHttpRequest的前身），并在<code>IE5</code>通过<code>ActiveX</code>来实现了这项技术。在微软实现这个概念后，其他浏览器比如<code>Mozilia</code>，<code>Safari</code>，<code>Opera</code>相继以 <code>XMLHttpRequest</code>来实现<code>Ajax</code>。（😭 兼容问题从此出现，话说微软命名真喜欢用X，MFC源码一大堆。。）不过在 IE7 发布时，微软选择了妥协，兼容了<code>XMLHttpRequest</code>的实现。</p><p>有了<code>Ajax</code>后，用户交互就不用每次都刷新页面，体验带来了极大的提升。</p><p>但真正让这项技术发扬光大的，(｡･∀･)ﾉﾞ还是后来的 Google Map，它的出现向人们展现了<code>Ajax</code>的真正魅力，释放了众多开发人员的想象力，让其不仅仅局限于简单的数据和页面交互，为后来异步交互体验方式的繁荣发展带来了根基。</p><p>而异步交互体验的更高级版本就是我们熟知的<code>SPA</code>，<code>SPA</code>不单单在页面交互上做到了不刷新，而且在页面之间跳转也做到了不刷新，为了做到这一点，就促使了前端路由的诞生。</p><h4 id="前端路由的实现方式"><a href="#前端路由的实现方式" class="headerlink" title="前端路由的实现方式"></a>前端路由的实现方式</h4><p>前端路由其实只要解决两个问题：</p><ul><li>在页面不刷新的前提下实现url变化</li><li>捕捉到url的变化，以便执行页面替换逻辑<br>在 2014 年之前，大家是通过 hash 来实现路由，url hash 就是类似于：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.xxx.com/#/login</span><br></pre></td></tr></table></figure></li></ul><p>这种 #。后面<code>hash</code>值的变化，并不会导致浏览器向服务器发出请求，浏览器不发出请求，也就不会刷新页面。另外每次<code>hash</code>值的变化，还会触发<code>hashchange</code>这个事件，通过这个事件我们就可以知道<code>hash</code>值发生了哪些变化。然后我们便可以监听<code>hashchange</code>来实现更新页面部分内容的操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchAndUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// todo 匹配 hash 做 dom 更新操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'hashchange'</span>, matchAndUpdate)</span><br></pre></td></tr></table></figure><p>后来，因为<code>HTML5</code>标准发布。多了两个 API，<code>pushState</code>和<code>replaceState</code>，通过这两个<code>API</code>可以改变 <code>url</code>地址且不会发送请求。同时还有<code>popstate</code>事件。通过这些就能用另一种方式来实现前端路由了，但原理都是跟<code>hash</code>实现相同的。用了<code>HTML5</code>的实现，单页路由的<code>url</code>就不会多出一个#，变得更加美观。但因为没有 # 号，所以当用户刷新页面之类的操作时，浏览器还是会给服务器发送请求。为了避免出现这种情况，所以这个实现需要服务器的支持，需要把所有路由都重定向到根页面：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchAndUpdate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="comment">// todo 匹配路径 做 dom 更新操作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, matchAndUpdate)</span><br></pre></td></tr></table></figure><h4 id="Vue-Router的实现方式"><a href="#Vue-Router的实现方式" class="headerlink" title="Vue-Router的实现方式"></a>Vue-Router的实现方式</h4><p><code>Vue-Router</code>跟<code>Vuex</code>一样都是通过<code>Vue.use</code>这个全局<code>API</code>来注册的，这个方法定义在<code>vue/src/core/global-api/use.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; toArray &#125; <span class="keyword">from</span> <span class="string">'../util/index'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initUse</span> (<span class="params">Vue: GlobalAPI</span>) </span>&#123;</span><br><span class="line">  Vue.use = <span class="function"><span class="keyword">function</span> (<span class="params">plugin: Function | Object</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> installedPlugins = (<span class="keyword">this</span>._installedPlugins || (<span class="keyword">this</span>._installedPlugins = []))</span><br><span class="line">    <span class="keyword">if</span> (installedPlugins.indexOf(plugin) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// additional parameters</span></span><br><span class="line">    <span class="keyword">const</span> args = toArray(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">    args.unshift(<span class="keyword">this</span>)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin.install === <span class="string">'function'</span>) &#123;</span><br><span class="line">      plugin.install.apply(plugin, args)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> plugin === <span class="string">'function'</span>) &#123;</span><br><span class="line">      plugin.apply(<span class="literal">null</span>, args)</span><br><span class="line">    &#125;</span><br><span class="line">    installedPlugins.push(plugin)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Vue.use</code>接受一个<code>plugin</code>参数，并且维护了一个<code>_installedPlugins</code>数组，它存储所有注册过的<code>plugin</code>；如果<code>plugin</code>是一个对象，会判断<code>plugin</code>有没有定义<code>install</code>方法，如果有的话则调用该方法，并且该方法执行的第一个参数是<code>Vue</code>；如果<code>plugin</code>是一个函数，它会被作为<code>install</code>方法，最后把<code>plugin</code>存储到<code>installedPlugins</code>数组里面，<code>Vue</code>的这种插件注册的机制有一个好处就是我们不需要额外的去<code>import Vue</code>了。</p><h5 id="路由的注册"><a href="#路由的注册" class="headerlink" title="路由的注册"></a>路由的注册</h5><p><code>Vue-Router</code>的入口在<code>src/index.js</code>，其中<code>install</code>方法定义在<code>src/install.js</code>，可以看一下<code>src</code>下面的目录结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">├── components</span><br><span class="line">│   ├── link.js</span><br><span class="line">│   └── view.js</span><br><span class="line">├── create-matcher.js</span><br><span class="line">├── create-route-map.js</span><br><span class="line">├── history</span><br><span class="line">│   ├── abstract.js</span><br><span class="line">│   ├── base.js</span><br><span class="line">│   ├── hash.js</span><br><span class="line">│   └── html5.js</span><br><span class="line">├── index.js</span><br><span class="line">├── install.js</span><br><span class="line">└── util</span><br><span class="line">    ├── async.js</span><br><span class="line">    ├── dom.js</span><br><span class="line">    ├── location.js</span><br><span class="line">    ├── misc.js</span><br><span class="line">    ├── params.js</span><br><span class="line">    ├── path.js</span><br><span class="line">    ├── push-state.js</span><br><span class="line">    ├── query.js</span><br><span class="line">    ├── resolve-components.js</span><br><span class="line">    ├── route.js</span><br><span class="line">    ├── scroll.js</span><br><span class="line">    └── warn.js</span><br></pre></td></tr></table></figure><p>简单看下<code>install</code>的流程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> View <span class="keyword">from</span> <span class="string">'./components/view'</span></span><br><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'./components/link'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> _Vue</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 确保Vue-Router只被install一次</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed &amp;&amp; _Vue === Vue) <span class="keyword">return</span></span><br><span class="line">  install.installed = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  _Vue = Vue</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> isDef = <span class="function"><span class="params">v</span> =&gt;</span> v !== <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> registerInstance = <span class="function">(<span class="params">vm, callVal</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> i = vm.$options._parentVnode</span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.data) &amp;&amp; isDef(i = i.registerRouteInstance)) &#123;</span><br><span class="line">      i(vm, callVal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    <span class="comment">// 在beforeCreate钩子里面初始化路由</span></span><br><span class="line">    beforeCreate () &#123;</span><br><span class="line">      <span class="comment">// 根组件的$options上才有router对象</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line">        <span class="comment">// 设置根路由</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">        <span class="comment">// 获取到根组件上的router实例</span></span><br><span class="line">        <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line">        <span class="comment">// 路由初始化</span></span><br><span class="line">        <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line">        <span class="comment">// 为_route属性实现双向绑定</span></span><br><span class="line">        Vue.util.defineReactive(<span class="keyword">this</span>, <span class="string">'_route'</span>, <span class="keyword">this</span>._router.history.current)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 获取父组件的_routerRoot</span></span><br><span class="line">        <span class="keyword">this</span>._routerRoot = (<span class="keyword">this</span>.$parent &amp;&amp; <span class="keyword">this</span>.$parent._routerRoot) || <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 注册&lt;router-view&gt;&lt;/router-view&gt;实例的钩子</span></span><br><span class="line">      registerInstance(<span class="keyword">this</span>, <span class="keyword">this</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed () &#123;</span><br><span class="line">      registerInstance(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 方便全局通过this.$router获取路由实例</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$router'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._router &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 方便全局通过this.$route获取路由对象</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(Vue.prototype, <span class="string">'$route'</span>, &#123;</span><br><span class="line">    <span class="keyword">get</span> () &#123; <span class="keyword">return</span> <span class="keyword">this</span>._routerRoot._route &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 注册全局组件&lt;router-view/&gt;和&lt;router-link/&gt;</span></span><br><span class="line">  Vue.component(<span class="string">'RouterView'</span>, View)</span><br><span class="line">  Vue.component(<span class="string">'RouterLink'</span>, Link)</span><br><span class="line">  <span class="comment">// 使用和created相同的合并策略</span></span><br><span class="line">  <span class="keyword">const</span> strats = Vue.config.optionMergeStrategies</span><br><span class="line">  <span class="comment">// use the same hook merging strategy for route hooks</span></span><br><span class="line">  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先通过设立一个<code>installed</code>标志位来确保<code>Vue-Router</code>只被安装一次，然后通过变量<code>_Vue</code>承载传入的<code>Vue</code>实例，然后利用<code>Vue.mixin</code>向每一个<code>Vue</code>实例注册<code>beforeCreate</code>和<code>destroyed</code>钩子函数。</p><p>在<code>beforeCreate</code>函数里面，如果是根组件，将根组件赋值给<code>this._routerRoot</code>，获取根组件的路由实例之后执行<code>init</code>初始化函数，然后调用<code>Vue</code>的<code>defineReactive</code>将<code>_route</code>变为响应式对象，如果不是根组件则获取父组件的<code>_routerRoot</code>属性。</p><p>在<code>beforeCreate</code>函数的最后部分和<code>destroyed</code>函数里面都执行了<code>registerInstance</code>函数，这个函数是注册<code>&lt;router-view&gt;</code>实例的钩子函数，根据传入参数的个数来决定是注册还是取消注册，函数的定义在<code>src/components/view.js</code>里面:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// attach instance registration hook</span></span><br><span class="line"> <span class="comment">// this will be called in the instance's injected lifecycle hooks</span></span><br><span class="line"> data.registerRouteInstance = <span class="function">(<span class="params">vm, val</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// val could be undefined for unregistration</span></span><br><span class="line">   <span class="keyword">const</span> current = matched.instances[name]</span><br><span class="line">   <span class="keyword">if</span> (</span><br><span class="line">     (val &amp;&amp; current !== vm) ||</span><br><span class="line">     (!val &amp;&amp; current === vm)</span><br><span class="line">   ) &#123;</span><br><span class="line">     matched.instances[name] = val</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>回到<code>install.js</code>，紧接着，为了让我们能够全局的使用<code>this.$router</code>和<code>this.$route</code>在<code>Vue</code>原型上定义了对应的<code>get</code>方法，然后通过<code>Vue.component</code>注册了全局组件<code>注册全局组件&lt;router-view/&gt;</code>和<code>和&lt;router-link/&gt;</code>，最后定义了一些钩子函数的使用策略，这就是整个<code>Vue-Router</code>的安装过程。</p><h5 id="路由的实例化"><a href="#路由的实例化" class="headerlink" title="路由的实例化"></a>路由的实例化</h5><p>先看一下<code>Vue-Router</code>的构造函数，当我们<code>new</code>一个<code>Vue-Router</code>的时候都干了些什么：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; install &#125; <span class="keyword">from</span> <span class="string">'./install'</span></span><br><span class="line"><span class="keyword">import</span> &#123; START &#125; <span class="keyword">from</span> <span class="string">'./util/route'</span></span><br><span class="line"><span class="keyword">import</span> &#123; assert &#125; <span class="keyword">from</span> <span class="string">'./util/warn'</span></span><br><span class="line"><span class="keyword">import</span> &#123; inBrowser &#125; <span class="keyword">from</span> <span class="string">'./util/dom'</span></span><br><span class="line"><span class="keyword">import</span> &#123; cleanPath &#125; <span class="keyword">from</span> <span class="string">'./util/path'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createMatcher &#125; <span class="keyword">from</span> <span class="string">'./create-matcher'</span></span><br><span class="line"><span class="keyword">import</span> &#123; normalizeLocation &#125; <span class="keyword">from</span> <span class="string">'./util/location'</span></span><br><span class="line"><span class="keyword">import</span> &#123; supportsPushState &#125; <span class="keyword">from</span> <span class="string">'./util/push-state'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; HashHistory &#125; <span class="keyword">from</span> <span class="string">'./history/hash'</span></span><br><span class="line"><span class="keyword">import</span> &#123; HTML5History &#125; <span class="keyword">from</span> <span class="string">'./history/html5'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AbstractHistory &#125; <span class="keyword">from</span> <span class="string">'./history/abstract'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> type &#123; Matcher &#125; <span class="keyword">from</span> <span class="string">'./create-matcher'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> install: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">  <span class="keyword">static</span> version: string;</span><br><span class="line">  app: any;</span><br><span class="line">  apps: <span class="built_in">Array</span>&lt;any&gt;;</span><br><span class="line">  ready: boolean;</span><br><span class="line">  readyCbs: <span class="built_in">Array</span>&lt;<span class="built_in">Function</span>&gt;;</span><br><span class="line">  options: RouterOptions;</span><br><span class="line">  mode: string;</span><br><span class="line">  history: HashHistory | HTML5History | AbstractHistory;</span><br><span class="line">  matcher: Matcher;</span><br><span class="line">  fallback: boolean;</span><br><span class="line">  beforeHooks: <span class="built_in">Array</span>&lt;?NavigationGuard&gt;;</span><br><span class="line">  resolveHooks: <span class="built_in">Array</span>&lt;?NavigationGuard&gt;;</span><br><span class="line">  afterHooks: <span class="built_in">Array</span>&lt;?AfterNavigationHook&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span> (options: RouterOptions = &#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// 根Vue实例</span></span><br><span class="line">    <span class="keyword">this</span>.app = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// 存储含有this.$options.router属性的Vue实例</span></span><br><span class="line">    <span class="keyword">this</span>.apps = []</span><br><span class="line">    <span class="comment">// 传入路由的配置</span></span><br><span class="line">    <span class="keyword">this</span>.options = options</span><br><span class="line">    <span class="keyword">this</span>.beforeHooks = []</span><br><span class="line">    <span class="keyword">this</span>.resolveHooks = []</span><br><span class="line">    <span class="keyword">this</span>.afterHooks = []</span><br><span class="line">    <span class="comment">// 创建路由匹配对象</span></span><br><span class="line">    <span class="keyword">this</span>.matcher = createMatcher(options.routes || [], <span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// 默认为hash模式</span></span><br><span class="line">    <span class="keyword">let</span> mode = options.mode || <span class="string">'hash'</span></span><br><span class="line">    <span class="comment">// 当浏览器不支持 history.pushState 控制路由是否应该回退到 hash 模式。默认值为 true</span></span><br><span class="line">    <span class="keyword">this</span>.fallback = mode === <span class="string">'history'</span> &amp;&amp; !supportsPushState &amp;&amp; options.fallback !== <span class="literal">false</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.fallback) &#123;</span><br><span class="line">      mode = <span class="string">'hash'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式</span></span><br><span class="line">    <span class="keyword">if</span> (!inBrowser) &#123;</span><br><span class="line">      mode = <span class="string">'abstract'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.mode = mode</span><br><span class="line">    <span class="comment">// 根据mode采用不同的路由方式</span></span><br><span class="line">    <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">'history'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> HTML5History(<span class="keyword">this</span>, options.base)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'hash'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> HashHistory(<span class="keyword">this</span>, options.base, <span class="keyword">this</span>.fallback)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">'abstract'</span>:</span><br><span class="line">        <span class="keyword">this</span>.history = <span class="keyword">new</span> AbstractHistory(<span class="keyword">this</span>, options.base)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          assert(<span class="literal">false</span>, <span class="string">`invalid mode: <span class="subst">$&#123;mode&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  match (</span><br><span class="line">    raw: RawLocation,</span><br><span class="line">    current?: Route,</span><br><span class="line">    redirectedFrom?: Location</span><br><span class="line">  ): Route &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.matcher.match(raw, current, redirectedFrom)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> currentRoute (): ?Route &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.history &amp;&amp; <span class="keyword">this</span>.history.current</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init (app: any <span class="comment">/* Vue component instance */</span>) &#123;</span><br><span class="line">    <span class="comment">// 在初始化Vue-Router之前必须先通过Vue.use(VueRouter)注册</span></span><br><span class="line">    process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; assert(</span><br><span class="line">      install.installed,</span><br><span class="line">      <span class="string">`not installed. Make sure to call \`Vue.use(VueRouter)\` `</span> +</span><br><span class="line">      <span class="string">`before creating root instance.`</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.apps.push(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set up app destroyed handler</span></span><br><span class="line">    <span class="comment">// https://github.com/vuejs/vue-router/issues/2639</span></span><br><span class="line">    app.$once(<span class="string">'hook:destroyed'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="comment">// clean out app from this.apps array once destroyed</span></span><br><span class="line">      <span class="keyword">const</span> index = <span class="keyword">this</span>.apps.indexOf(app)</span><br><span class="line">      <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) <span class="keyword">this</span>.apps.splice(index, <span class="number">1</span>)</span><br><span class="line">      <span class="comment">// ensure we still have a main app or null if no apps</span></span><br><span class="line">      <span class="comment">// we do not release the router so it can be reused</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.app === app) <span class="keyword">this</span>.app = <span class="keyword">this</span>.apps[<span class="number">0</span>] || <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// main app previously initialized</span></span><br><span class="line">    <span class="comment">// return as we don't need to set up new history listener</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.app = app</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> history = <span class="keyword">this</span>.history</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HTML5History) &#123;</span><br><span class="line">      history.transitionTo(history.getCurrentLocation())</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HashHistory) &#123;</span><br><span class="line">      <span class="keyword">const</span> setupHashListener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        history.setupListeners()</span><br><span class="line">      &#125;</span><br><span class="line">      history.transitionTo(</span><br><span class="line">        history.getCurrentLocation(),</span><br><span class="line">        setupHashListener,</span><br><span class="line">        setupHashListener</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    history.listen(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.apps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">        app._route = route</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  beforeEach (fn: <span class="built_in">Function</span>): <span class="built_in">Function</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> registerHook(<span class="keyword">this</span>.beforeHooks, fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  beforeResolve (fn: <span class="built_in">Function</span>): <span class="built_in">Function</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> registerHook(<span class="keyword">this</span>.resolveHooks, fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  afterEach (fn: <span class="built_in">Function</span>): <span class="built_in">Function</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> registerHook(<span class="keyword">this</span>.afterHooks, fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onReady (cb: <span class="built_in">Function</span>, errorCb?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.onReady(cb, errorCb)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onError (errorCb: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.onError(errorCb)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.push(location, onComplete, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  replace (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.replace(location, onComplete, onAbort)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  go (n: number) &#123;</span><br><span class="line">    <span class="keyword">this</span>.history.go(n)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  back () &#123;</span><br><span class="line">    <span class="keyword">this</span>.go(<span class="number">-1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  forward () &#123;</span><br><span class="line">    <span class="keyword">this</span>.go(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getMatchedComponents (to?: RawLocation | Route): <span class="built_in">Array</span>&lt;any&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> route: any = to</span><br><span class="line">      ? to.matched</span><br><span class="line">        ? to</span><br><span class="line">        : <span class="keyword">this</span>.resolve(to).route</span><br><span class="line">      : <span class="keyword">this</span>.currentRoute</span><br><span class="line">    <span class="keyword">if</span> (!route) &#123;</span><br><span class="line">      <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [].concat.apply([], route.matched.map(<span class="function"><span class="params">m</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Object</span>.keys(m.components).map(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m.components[key]</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  resolve (</span><br><span class="line">    to: RawLocation,</span><br><span class="line">    current?: Route,</span><br><span class="line">    append?: boolean</span><br><span class="line">  ): &#123;</span><br><span class="line">    location: Location,</span><br><span class="line">    route: Route,</span><br><span class="line">    href: string,</span><br><span class="line">    <span class="comment">// for backwards compat</span></span><br><span class="line">    normalizedTo: Location,</span><br><span class="line">    resolved: Route</span><br><span class="line">  &#125; &#123;</span><br><span class="line">    current = current || <span class="keyword">this</span>.history.current</span><br><span class="line">    <span class="keyword">const</span> location = normalizeLocation(</span><br><span class="line">      to,</span><br><span class="line">      current,</span><br><span class="line">      append,</span><br><span class="line">      <span class="keyword">this</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">const</span> route = <span class="keyword">this</span>.match(location, current)</span><br><span class="line">    <span class="keyword">const</span> fullPath = route.redirectedFrom || route.fullPath</span><br><span class="line">    <span class="keyword">const</span> base = <span class="keyword">this</span>.history.base</span><br><span class="line">    <span class="keyword">const</span> href = createHref(base, fullPath, <span class="keyword">this</span>.mode)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      location,</span><br><span class="line">      route,</span><br><span class="line">      href,</span><br><span class="line">      <span class="comment">// for backwards compat</span></span><br><span class="line">      normalizedTo: location,</span><br><span class="line">      resolved: route</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addRoutes (routes: <span class="built_in">Array</span>&lt;RouteConfig&gt;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.matcher.addRoutes(routes)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.history.current !== START) &#123;</span><br><span class="line">      <span class="keyword">this</span>.history.transitionTo(<span class="keyword">this</span>.history.getCurrentLocation())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">registerHook</span> (<span class="params">list: Array&lt;any&gt;, fn: Function</span>): <span class="title">Function</span> </span>&#123;</span><br><span class="line">  list.push(fn)</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> i = list.indexOf(fn)</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">-1</span>) list.splice(i, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createHref</span> (<span class="params">base: string, fullPath: string, mode</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> path = mode === <span class="string">'hash'</span> ? <span class="string">'#'</span> + fullPath : fullPath</span><br><span class="line">  <span class="keyword">return</span> base ? cleanPath(base + <span class="string">'/'</span> + path) : path</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">VueRouter.install = install</span><br><span class="line">VueRouter.version = <span class="string">'__VERSION__'</span></span><br><span class="line"><span class="comment">// 通过link标签引用js的实行自动注册</span></span><br><span class="line"><span class="keyword">if</span> (inBrowser &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  <span class="built_in">window</span>.Vue.use(VueRouter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数里面定义了一些属性，其中<code>this.app</code>表示根<code>Vue</code>的实例，<code>this.apps</code>存储含有<code>this.$options.router</code>属性的Vue实例，初始化<code>Vue-Router</code>后传入的配置都会存储在<code>this.options</code>，<code>this.beforeHooks</code>、<code>this.resolveHooks</code>、<code>this.afterHooks</code>用来存储钩子函数，<code>this.matcher</code>是路由匹配后返回的对象，<code>this.fallback</code>会根据配置的<code>mode</code>参数以及浏览器支持度来决定给是否回退到<code>hash</code>模式，<code>this.mode</code>就是路由创建的模式，这里提供<code>hash</code>、<code>history</code>、<code>abstract</code>三种模式，<code>this.history</code>表示根据不同的路由模式来创建的路由<code>history</code>的具体实现方式。</p><p>实例化<code>Vue-Router</code>之后会返回它的实例<code>router</code>，我们在使用<code>Vue-Router</code>的时候需要在初始化<code>Vue</code>的时候传入这个<code>router</code>属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这个时候会把<code>router</code>属性配置到<code>this.$options</code>，回想到<code>install.js</code>里面在<code>beforeCreate</code>钩子函数里面执行的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">beforeCreate () &#123;</span><br><span class="line">  <span class="comment">// 根组件的$options上才有router对象</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(<span class="keyword">this</span>.$options.router)) &#123;</span><br><span class="line">    <span class="comment">// 设置根路由</span></span><br><span class="line">    <span class="keyword">this</span>._routerRoot = <span class="keyword">this</span></span><br><span class="line">    <span class="comment">// 获取到根组件上的router实例</span></span><br><span class="line">    <span class="keyword">this</span>._router = <span class="keyword">this</span>.$options.router</span><br><span class="line">    <span class="comment">// 路由初始化</span></span><br><span class="line">    <span class="keyword">this</span>._router.init(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>所以这个时候会执行<code>init</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">init (app: any <span class="comment">/* Vue component instance */</span>) &#123;</span><br><span class="line">  <span class="comment">// 在初始化Vue-Router之前必须先通过Vue.use(VueRouter)注册</span></span><br><span class="line">  process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; assert(</span><br><span class="line">    install.installed,</span><br><span class="line">    <span class="string">`not installed. Make sure to call \`Vue.use(VueRouter)\` `</span> +</span><br><span class="line">    <span class="string">`before creating root instance.`</span></span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 存储app实例</span></span><br><span class="line">  <span class="keyword">this</span>.apps.push(app)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set up app destroyed handler</span></span><br><span class="line">  <span class="comment">// https://github.com/vuejs/vue-router/issues/2639</span></span><br><span class="line">  app.$once(<span class="string">'hook:destroyed'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// clean out app from this.apps array once destroyed</span></span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.apps.indexOf(app)</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) <span class="keyword">this</span>.apps.splice(index, <span class="number">1</span>)</span><br><span class="line">    <span class="comment">// ensure we still have a main app or null if no apps</span></span><br><span class="line">    <span class="comment">// we do not release the router so it can be reused</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.app === app) <span class="keyword">this</span>.app = <span class="keyword">this</span>.apps[<span class="number">0</span>] || <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// main app previously initialized</span></span><br><span class="line">  <span class="comment">// return as we don't need to set up new history listener</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.app) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.app = app</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> history = <span class="keyword">this</span>.history</span><br><span class="line">  <span class="comment">// 根据history实现的方式不同执行不同的逻辑</span></span><br><span class="line">  <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HTML5History) &#123;</span><br><span class="line">    history.transitionTo(history.getCurrentLocation())</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (history <span class="keyword">instanceof</span> HashHistory) &#123;</span><br><span class="line">    <span class="keyword">const</span> setupHashListener = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      history.setupListeners()</span><br><span class="line">    &#125;</span><br><span class="line">    history.transitionTo(</span><br><span class="line">      history.getCurrentLocation(),</span><br><span class="line">      setupHashListener,</span><br><span class="line">      setupHashListener</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 更新根组件的路由对象</span></span><br><span class="line">  history.listen(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.apps.forEach(<span class="function">(<span class="params">app</span>) =&gt;</span> &#123;</span><br><span class="line">      app._route = route</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>init</code>其实没干很多事情，首先把传入的<code>Vue</code>实例存储到<code>apps</code>数组中，然后把<code>this.history</code>赋值给一个本地变量，根据<code>this.history</code>实现方式的不同执行不同的逻辑，最后通过<code>history</code>的回调更新路由对象也就是<code>this.$route</code>。</p><p>无论<code>this.history</code>是基于<code>history</code>还是<code>hash</code>实现的，最后都会调用<code>transitionTo</code>方法，这个方法定义在<code>src/history/base.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">transitionTo (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> route = <span class="keyword">this</span>.router.match(location, <span class="keyword">this</span>.current)</span><br><span class="line">    <span class="keyword">this</span>.confirmTransition(route, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>实际上就是调用<code>match</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">match (</span><br><span class="line">  raw: RawLocation,</span><br><span class="line">  current?: Route,</span><br><span class="line">  redirectedFrom?: Location</span><br><span class="line">): Route &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.matcher.match(raw, current, redirectedFrom)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那我们可以先把上面的逻辑放一边，先了解一下<code>matchers</code>的构建，相关的源码在<code>src/create-matcher.js</code>:</p><h5 id="match的实现"><a href="#match的实现" class="headerlink" title="match的实现"></a>match的实现</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> type VueRouter <span class="keyword">from</span> <span class="string">'./index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; resolvePath &#125; <span class="keyword">from</span> <span class="string">'./util/path'</span></span><br><span class="line"><span class="keyword">import</span> &#123; assert, warn &#125; <span class="keyword">from</span> <span class="string">'./util/warn'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRoute &#125; <span class="keyword">from</span> <span class="string">'./util/route'</span></span><br><span class="line"><span class="keyword">import</span> &#123; fillParams &#125; <span class="keyword">from</span> <span class="string">'./util/params'</span></span><br><span class="line"><span class="keyword">import</span> &#123; createRouteMap &#125; <span class="keyword">from</span> <span class="string">'./create-route-map'</span></span><br><span class="line"><span class="keyword">import</span> &#123; normalizeLocation &#125; <span class="keyword">from</span> <span class="string">'./util/location'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> type Matcher = &#123;</span><br><span class="line">  match: <span class="function">(<span class="params">raw: RawLocation, current?: Route, redirectedFrom?: Location</span>) =&gt;</span> Route;</span><br><span class="line">  addRoutes: <span class="function">(<span class="params">routes: <span class="built_in">Array</span>&lt;RouteConfig&gt;</span>) =&gt;</span> <span class="keyword">void</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createMatcher</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  routes: Array&lt;RouteConfig&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  router: VueRouter</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Matcher</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; pathList, pathMap, nameMap &#125; = createRouteMap(routes)</span><br><span class="line">  <span class="comment">// 添加路由路径关系映射</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addRoutes</span> (<span class="params">routes</span>) </span>&#123;</span><br><span class="line">    createRouteMap(routes, pathList, pathMap, nameMap)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">match</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    raw: RawLocation,</span></span></span><br><span class="line"><span class="function"><span class="params">    currentRoute?: Route,</span></span></span><br><span class="line"><span class="function"><span class="params">    redirectedFrom?: Location</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据raw和currentRoute计算出新的location</span></span><br><span class="line">    <span class="keyword">const</span> location = normalizeLocation(raw, currentRoute, <span class="literal">false</span>, router)</span><br><span class="line">    <span class="keyword">const</span> &#123; name &#125; = location</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">      <span class="comment">// 如果是命名路由，取出对应的路由record</span></span><br><span class="line">      <span class="keyword">const</span> record = nameMap[name]</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        warn(record, <span class="string">`Route with name '<span class="subst">$&#123;name&#125;</span>' does not exist`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 生成一条新记录</span></span><br><span class="line">      <span class="keyword">if</span> (!record) <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">      <span class="keyword">const</span> paramNames = record.regex.keys</span><br><span class="line">        .filter(<span class="function"><span class="params">key</span> =&gt;</span> !key.optional)</span><br><span class="line">        .map(<span class="function"><span class="params">key</span> =&gt;</span> key.name)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> location.params !== <span class="string">'object'</span>) &#123;</span><br><span class="line">        location.params = &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 赋值params</span></span><br><span class="line">      <span class="keyword">if</span> (currentRoute &amp;&amp; <span class="keyword">typeof</span> currentRoute.params === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> currentRoute.params) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!(key <span class="keyword">in</span> location.params) &amp;&amp; paramNames.indexOf(key) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            location.params[key] = currentRoute.params[key]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (record) &#123;</span><br><span class="line">        location.path = fillParams(record.path, location.params, <span class="string">`named route "<span class="subst">$&#123;name&#125;</span>"`</span>)</span><br><span class="line">        <span class="keyword">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (location.path) &#123;</span><br><span class="line">      location.params = &#123;&#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pathList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> path = pathList[i]</span><br><span class="line">        <span class="keyword">const</span> record = pathMap[path]</span><br><span class="line">        <span class="keyword">if</span> (matchRoute(record.regex, location.path, location.params)) &#123;</span><br><span class="line">          <span class="keyword">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// no match</span></span><br><span class="line">    <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">redirect</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    record: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">    location: Location</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> originalRedirect = record.redirect</span><br><span class="line">    <span class="keyword">let</span> redirect = <span class="keyword">typeof</span> originalRedirect === <span class="string">'function'</span></span><br><span class="line">      ? originalRedirect(createRoute(record, location, <span class="literal">null</span>, router))</span><br><span class="line">      : originalRedirect</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> redirect === <span class="string">'string'</span>) &#123;</span><br><span class="line">      redirect = &#123; <span class="attr">path</span>: redirect &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!redirect || <span class="keyword">typeof</span> redirect !== <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="literal">false</span>, <span class="string">`invalid redirect option: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(redirect)&#125;</span>`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> re: <span class="built_in">Object</span> = redirect</span><br><span class="line">    <span class="keyword">const</span> &#123; name, path &#125; = re</span><br><span class="line">    <span class="keyword">let</span> &#123; query, hash, params &#125; = location</span><br><span class="line">    query = re.hasOwnProperty(<span class="string">'query'</span>) ? re.query : query</span><br><span class="line">    hash = re.hasOwnProperty(<span class="string">'hash'</span>) ? re.hash : hash</span><br><span class="line">    params = re.hasOwnProperty(<span class="string">'params'</span>) ? re.params : params</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">      <span class="comment">// resolved named direct</span></span><br><span class="line">      <span class="keyword">const</span> targetRecord = nameMap[name]</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        assert(targetRecord, <span class="string">`redirect failed: named route "<span class="subst">$&#123;name&#125;</span>" not found.`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> match(&#123;</span><br><span class="line">        _normalized: <span class="literal">true</span>,</span><br><span class="line">        name,</span><br><span class="line">        query,</span><br><span class="line">        hash,</span><br><span class="line">        params</span><br><span class="line">      &#125;, <span class="literal">undefined</span>, location)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (path) &#123;</span><br><span class="line">      <span class="comment">// 1. resolve relative redirect</span></span><br><span class="line">      <span class="keyword">const</span> rawPath = resolveRecordPath(path, record)</span><br><span class="line">      <span class="comment">// 2. resolve params</span></span><br><span class="line">      <span class="keyword">const</span> resolvedPath = fillParams(rawPath, params, <span class="string">`redirect route with path "<span class="subst">$&#123;rawPath&#125;</span>"`</span>)</span><br><span class="line">      <span class="comment">// 3. rematch with existing query and hash</span></span><br><span class="line">      <span class="keyword">return</span> match(&#123;</span><br><span class="line">        _normalized: <span class="literal">true</span>,</span><br><span class="line">        path: resolvedPath,</span><br><span class="line">        query,</span><br><span class="line">        hash</span><br><span class="line">      &#125;, <span class="literal">undefined</span>, location)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        warn(<span class="literal">false</span>, <span class="string">`invalid redirect option: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(redirect)&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">alias</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    record: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">    location: Location,</span></span></span><br><span class="line"><span class="function"><span class="params">    matchAs: string</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> aliasedPath = fillParams(matchAs, location.params, <span class="string">`aliased route with path "<span class="subst">$&#123;matchAs&#125;</span>"`</span>)</span><br><span class="line">    <span class="keyword">const</span> aliasedMatch = match(&#123;</span><br><span class="line">      _normalized: <span class="literal">true</span>,</span><br><span class="line">      path: aliasedPath</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (aliasedMatch) &#123;</span><br><span class="line">      <span class="keyword">const</span> matched = aliasedMatch.matched</span><br><span class="line">      <span class="keyword">const</span> aliasedRecord = matched[matched.length - <span class="number">1</span>]</span><br><span class="line">      location.params = aliasedMatch.params</span><br><span class="line">      <span class="keyword">return</span> _createRoute(aliasedRecord, location)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_createRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    record: ?RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">    location: Location,</span></span></span><br><span class="line"><span class="function"><span class="params">    redirectedFrom?: Location</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (record &amp;&amp; record.redirect) &#123;</span><br><span class="line">      <span class="keyword">return</span> redirect(record, redirectedFrom || location)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (record &amp;&amp; record.matchAs) &#123;</span><br><span class="line">      <span class="keyword">return</span> alias(record, location, record.matchAs)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> createRoute(record, location, redirectedFrom, router)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    match,</span><br><span class="line">    addRoutes</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  regex: RouteRegExp,</span></span></span><br><span class="line"><span class="function"><span class="params">  path: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  params: Object</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> m = path.match(regex)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!m) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, len = m.length; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = regex.keys[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> val = <span class="keyword">typeof</span> m[i] === <span class="string">'string'</span> ? <span class="built_in">decodeURIComponent</span>(m[i]) : m[i]</span><br><span class="line">    <span class="keyword">if</span> (key) &#123;</span><br><span class="line">      <span class="comment">// Fix #1994: using * with props: true generates a param named 0</span></span><br><span class="line">      params[key.name || <span class="string">'pathMatch'</span>] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveRecordPath</span> (<span class="params">path: string, record: RouteRecord</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> resolvePath(path, record.parent ? record.parent.path : <span class="string">'/'</span>, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createMatcher</code>接受两个参数，第一个是初始化路由的配置对象<code>routes</code>，第二个是我们的路由实例<code>router</code>，首先会跑一个<code>createRouteMap</code>的逻辑，这个方法的作用是创建一个路由映射，这个方法定义在<code>src/create-route-map.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Regexp <span class="keyword">from</span> <span class="string">'path-to-regexp'</span></span><br><span class="line"><span class="keyword">import</span> &#123; cleanPath &#125; <span class="keyword">from</span> <span class="string">'./util/path'</span></span><br><span class="line"><span class="keyword">import</span> &#123; assert, warn &#125; <span class="keyword">from</span> <span class="string">'./util/warn'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRouteMap</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  routes: Array&lt;RouteConfig&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldPathList?: Array&lt;string&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldPathMap?: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldNameMap?: Dictionary&lt;RouteRecord&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  pathList: <span class="built_in">Array</span>&lt;string&gt;;</span><br><span class="line">  pathMap: Dictionary&lt;RouteRecord&gt;;</span><br><span class="line">  nameMap: Dictionary&lt;RouteRecord&gt;;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="comment">// the path list is used to control path matching priority</span></span><br><span class="line">  <span class="keyword">const</span> pathList: <span class="built_in">Array</span>&lt;string&gt; = oldPathList || []</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> pathMap: Dictionary&lt;RouteRecord&gt; = oldPathMap || <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">  <span class="comment">// $flow-disable-line</span></span><br><span class="line">  <span class="keyword">const</span> nameMap: Dictionary&lt;RouteRecord&gt; = oldNameMap || <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  routes.forEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    addRouteRecord(pathList, pathMap, nameMap, route)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 确保通配符的路径在最后才被匹配</span></span><br><span class="line">  <span class="comment">// ensure wildcard routes are always at the end</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = pathList.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathList[i] === <span class="string">'*'</span>) &#123;</span><br><span class="line">      pathList.push(pathList.splice(i, <span class="number">1</span>)[<span class="number">0</span>])</span><br><span class="line">      l--</span><br><span class="line">      i--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    pathList,</span><br><span class="line">    pathMap,</span><br><span class="line">    nameMap</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRouteRecord</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  pathList: Array&lt;string&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  pathMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  nameMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  route: RouteConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">  parent?: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  matchAs?: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; path, name &#125; = route</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="comment">// path不能为空并且component的值必须用一个组件名而不是一个string字符串</span></span><br><span class="line">    assert(path != <span class="literal">null</span>, <span class="string">`"path" is required in a route configuration.`</span>)</span><br><span class="line">    assert(</span><br><span class="line">      <span class="keyword">typeof</span> route.component !== <span class="string">'string'</span>,</span><br><span class="line">      <span class="string">`route config "component" for path: <span class="subst">$&#123;<span class="built_in">String</span>(path || name)&#125;</span> cannot be a `</span> +</span><br><span class="line">      <span class="string">`string id. Use an actual component instead.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// pathToRegexpOptions是编译正则的选项</span></span><br><span class="line">  <span class="keyword">const</span> pathToRegexpOptions: PathToRegexpOptions = route.pathToRegexpOptions || &#123;&#125;</span><br><span class="line">  <span class="comment">// normalize path</span></span><br><span class="line">  <span class="keyword">const</span> normalizedPath = normalizePath(</span><br><span class="line">    path,</span><br><span class="line">    parent,</span><br><span class="line">    pathToRegexpOptions.strict</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// caseSensitive匹配规则是否大小写敏感？(默认值：false)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> route.caseSensitive === <span class="string">'boolean'</span>) &#123;</span><br><span class="line">    pathToRegexpOptions.sensitive = route.caseSensitive</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> record: RouteRecord = &#123;</span><br><span class="line">    path: normalizedPath,</span><br><span class="line">    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),</span><br><span class="line">    components: route.components || &#123; <span class="attr">default</span>: route.component &#125;,</span><br><span class="line">    instances: &#123;&#125;,</span><br><span class="line">    name,</span><br><span class="line">    parent,</span><br><span class="line">    matchAs,</span><br><span class="line">    redirect: route.redirect,</span><br><span class="line">    beforeEnter: route.beforeEnter,</span><br><span class="line">    meta: route.meta || &#123;&#125;,</span><br><span class="line">    props: route.props == <span class="literal">null</span></span><br><span class="line">      ? &#123;&#125;</span><br><span class="line">      : route.components</span><br><span class="line">        ? route.props</span><br><span class="line">        : &#123; <span class="attr">default</span>: route.props &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果有子路由</span></span><br><span class="line">  <span class="keyword">if</span> (route.children) &#123;</span><br><span class="line">    <span class="comment">// Warn if route is named, does not redirect and has a default child route.</span></span><br><span class="line">    <span class="comment">// If users navigate to this route by name, the default child will</span></span><br><span class="line">    <span class="comment">// not be rendered (GH Issue #629)</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (route.name &amp;&amp; !route.redirect &amp;&amp; route.children.some(<span class="function"><span class="params">child</span> =&gt;</span> <span class="regexp">/^\/?$/</span>.test(child.path))) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="string">`Named Route '<span class="subst">$&#123;route.name&#125;</span>' has a default child route. `</span> +</span><br><span class="line">          <span class="string">`When navigating to this named route (:to="&#123;name: '<span class="subst">$&#123;route.name&#125;</span>'"), `</span> +</span><br><span class="line">          <span class="string">`the default child route will not be rendered. Remove the name from `</span> +</span><br><span class="line">          <span class="string">`this route and use the name of the default child route for named `</span> +</span><br><span class="line">          <span class="string">`links instead.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环添加子路由路径</span></span><br><span class="line">    route.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> childMatchAs = matchAs</span><br><span class="line">        ? cleanPath(<span class="string">`<span class="subst">$&#123;matchAs&#125;</span>/<span class="subst">$&#123;child.path&#125;</span>`</span>)</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置了路由别名</span></span><br><span class="line">  <span class="keyword">if</span> (route.alias !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 统一转换为数组</span></span><br><span class="line">    <span class="keyword">const</span> aliases = <span class="built_in">Array</span>.isArray(route.alias)</span><br><span class="line">      ? route.alias</span><br><span class="line">      : [route.alias]</span><br><span class="line"></span><br><span class="line">    aliases.forEach(<span class="function"><span class="params">alias</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> aliasRoute = &#123;</span><br><span class="line">        path: alias,</span><br><span class="line">        children: route.children</span><br><span class="line">      &#125;</span><br><span class="line">      addRouteRecord(</span><br><span class="line">        pathList,</span><br><span class="line">        pathMap,</span><br><span class="line">        nameMap,</span><br><span class="line">        aliasRoute,</span><br><span class="line">        parent,</span><br><span class="line">        record.path || <span class="string">'/'</span> <span class="comment">// matchAs</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加path记录以及建立path和记录的对应关系</span></span><br><span class="line">  <span class="keyword">if</span> (!pathMap[record.path]) &#123;</span><br><span class="line">    pathList.push(record.path)</span><br><span class="line">    pathMap[record.path] = record</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果配置了命名路由，给name和record建立映射关系</span></span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nameMap[name]) &#123;</span><br><span class="line">      nameMap[name] = record</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !matchAs) &#123;</span><br><span class="line">      <span class="comment">// 已经有这个命名的路由存在并且没有给这个路由设置重定向，说明给了重复命名</span></span><br><span class="line">      warn(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">`Duplicate named routes definition: `</span> +</span><br><span class="line">        <span class="string">`&#123; name: "<span class="subst">$&#123;name&#125;</span>", path: "<span class="subst">$&#123;record.path&#125;</span>" &#125;`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compileRouteRegex</span> (<span class="params">path: string, pathToRegexpOptions: PathToRegexpOptions</span>): <span class="title">RouteRegExp</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> regex = Regexp(path, [], pathToRegexpOptions)</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> keys: any = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    regex.keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 有重复的动态路径参数</span></span><br><span class="line">      warn(!keys[key.name], <span class="string">`Duplicate param keys in route with path: "<span class="subst">$&#123;path&#125;</span>"`</span>)</span><br><span class="line">      keys[key.name] = <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> regex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizePath</span> (<span class="params">path: string, parent?: RouteRecord, strict?: boolean</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 替换根路由路径</span></span><br><span class="line">  <span class="keyword">if</span> (!strict) path = path.replace(<span class="regexp">/\/$/</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">if</span> (path[<span class="number">0</span>] === <span class="string">'/'</span>) <span class="keyword">return</span> path</span><br><span class="line">  <span class="keyword">if</span> (parent == <span class="literal">null</span>) <span class="keyword">return</span> path</span><br><span class="line">  <span class="comment">// 将//的路径替换成/</span></span><br><span class="line">  <span class="keyword">return</span> cleanPath(<span class="string">`<span class="subst">$&#123;parent.path&#125;</span>/<span class="subst">$&#123;path&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法的作用是将路由配置转换成一组组映射关系表，返回一个对象:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  pathList,</span><br><span class="line">  pathMap,</span><br><span class="line">  nameMap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中<code>pathList</code>存储了所有的<code>path</code>，<code>pathMap</code>表示了<code>path</code>到<code>RouteRecord</code>对象的一一映射关系，<code>nameMap</code>则表示了<code>name</code>到<code>RouteRecord</code>对象的映射关系，<code>RouteRecord</code>对象是对路由配置参数<code>routes</code>每一项进行遍历后调用<code>addRouteRecord</code>方法生成的一条记录，方法定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addRouteRecord</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  pathList: Array&lt;string&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  pathMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  nameMap: Dictionary&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  route: RouteConfig,</span></span></span><br><span class="line"><span class="function"><span class="params">  parent?: RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  matchAs?: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; path, name &#125; = route</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    <span class="comment">// path不能为空并且component的值必须用一个组件名而不是一个string字符串</span></span><br><span class="line">    assert(path != <span class="literal">null</span>, <span class="string">`"path" is required in a route configuration.`</span>)</span><br><span class="line">    assert(</span><br><span class="line">      <span class="keyword">typeof</span> route.component !== <span class="string">'string'</span>,</span><br><span class="line">      <span class="string">`route config "component" for path: <span class="subst">$&#123;<span class="built_in">String</span>(path || name)&#125;</span> cannot be a `</span> +</span><br><span class="line">      <span class="string">`string id. Use an actual component instead.`</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// pathToRegexpOptions是编译正则的选项</span></span><br><span class="line">  <span class="keyword">const</span> pathToRegexpOptions: PathToRegexpOptions = route.pathToRegexpOptions || &#123;&#125;</span><br><span class="line">  <span class="comment">// normalize path</span></span><br><span class="line">  <span class="keyword">const</span> normalizedPath = normalizePath(</span><br><span class="line">    path,</span><br><span class="line">    parent,</span><br><span class="line">    pathToRegexpOptions.strict</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// caseSensitive匹配规则是否大小写敏感？(默认值：false)</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> route.caseSensitive === <span class="string">'boolean'</span>) &#123;</span><br><span class="line">    pathToRegexpOptions.sensitive = route.caseSensitive</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> record: RouteRecord = &#123;</span><br><span class="line">    path: normalizedPath,</span><br><span class="line">    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),</span><br><span class="line">    components: route.components || &#123; <span class="attr">default</span>: route.component &#125;,</span><br><span class="line">    instances: &#123;&#125;,</span><br><span class="line">    name,</span><br><span class="line">    parent,</span><br><span class="line">    matchAs,</span><br><span class="line">    redirect: route.redirect,</span><br><span class="line">    beforeEnter: route.beforeEnter,</span><br><span class="line">    meta: route.meta || &#123;&#125;,</span><br><span class="line">    props: route.props == <span class="literal">null</span></span><br><span class="line">      ? &#123;&#125;</span><br><span class="line">      : route.components</span><br><span class="line">        ? route.props</span><br><span class="line">        : &#123; <span class="attr">default</span>: route.props &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果有子路由</span></span><br><span class="line">  <span class="keyword">if</span> (route.children) &#123;</span><br><span class="line">    <span class="comment">// Warn if route is named, does not redirect and has a default child route.</span></span><br><span class="line">    <span class="comment">// If users navigate to this route by name, the default child will</span></span><br><span class="line">    <span class="comment">// not be rendered (GH Issue #629)</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (route.name &amp;&amp; !route.redirect &amp;&amp; route.children.some(<span class="function"><span class="params">child</span> =&gt;</span> <span class="regexp">/^\/?$/</span>.test(child.path))) &#123;</span><br><span class="line">        warn(</span><br><span class="line">          <span class="literal">false</span>,</span><br><span class="line">          <span class="string">`Named Route '<span class="subst">$&#123;route.name&#125;</span>' has a default child route. `</span> +</span><br><span class="line">          <span class="string">`When navigating to this named route (:to="&#123;name: '<span class="subst">$&#123;route.name&#125;</span>'"), `</span> +</span><br><span class="line">          <span class="string">`the default child route will not be rendered. Remove the name from `</span> +</span><br><span class="line">          <span class="string">`this route and use the name of the default child route for named `</span> +</span><br><span class="line">          <span class="string">`links instead.`</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环添加子路由路径</span></span><br><span class="line">    route.children.forEach(<span class="function"><span class="params">child</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> childMatchAs = matchAs</span><br><span class="line">        ? cleanPath(<span class="string">`<span class="subst">$&#123;matchAs&#125;</span>/<span class="subst">$&#123;child.path&#125;</span>`</span>)</span><br><span class="line">        : <span class="literal">undefined</span></span><br><span class="line">      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置了路由别名</span></span><br><span class="line">  <span class="keyword">if</span> (route.alias !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 统一转换为数组</span></span><br><span class="line">    <span class="keyword">const</span> aliases = <span class="built_in">Array</span>.isArray(route.alias)</span><br><span class="line">      ? route.alias</span><br><span class="line">      : [route.alias]</span><br><span class="line"></span><br><span class="line">    aliases.forEach(<span class="function"><span class="params">alias</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> aliasRoute = &#123;</span><br><span class="line">        path: alias,</span><br><span class="line">        children: route.children</span><br><span class="line">      &#125;</span><br><span class="line">      addRouteRecord(</span><br><span class="line">        pathList,</span><br><span class="line">        pathMap,</span><br><span class="line">        nameMap,</span><br><span class="line">        aliasRoute,</span><br><span class="line">        parent,</span><br><span class="line">        record.path || <span class="string">'/'</span> <span class="comment">// matchAs</span></span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 添加path记录以及建立path和记录的对应关系</span></span><br><span class="line">  <span class="keyword">if</span> (!pathMap[record.path]) &#123;</span><br><span class="line">    pathList.push(record.path)</span><br><span class="line">    pathMap[record.path] = record</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果配置了命名路由，给name和record建立映射关系</span></span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!nameMap[name]) &#123;</span><br><span class="line">      nameMap[name] = record</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !matchAs) &#123;</span><br><span class="line">      <span class="comment">// 已经有这个命名的路由存在并且没有给这个路由设置重定向，说明给了重复命名</span></span><br><span class="line">      warn(</span><br><span class="line">        <span class="literal">false</span>,</span><br><span class="line">        <span class="string">`Duplicate named routes definition: `</span> +</span><br><span class="line">        <span class="string">`&#123; name: "<span class="subst">$&#123;name&#125;</span>", path: "<span class="subst">$&#123;record.path&#125;</span>" &#125;`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法首先会对<code>path</code>使用<code>normalizePath</code>进行规范化处理，我们看一下这个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizePath</span> (<span class="params">path: string, parent?: RouteRecord, strict?: boolean</span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 替换根路由路径</span></span><br><span class="line">  <span class="keyword">if</span> (!strict) path = path.replace(<span class="regexp">/\/$/</span>, <span class="string">''</span>)</span><br><span class="line">  <span class="comment">// 说明是一级路径，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (path[<span class="number">0</span>] === <span class="string">'/'</span>) <span class="keyword">return</span> path</span><br><span class="line">  <span class="keyword">if</span> (parent == <span class="literal">null</span>) <span class="keyword">return</span> path</span><br><span class="line">  <span class="comment">//  将//的路径替换成/并且拼接父路由的路径</span></span><br><span class="line">  <span class="keyword">return</span> cleanPath(<span class="string">`<span class="subst">$&#123;parent.path&#125;</span>/<span class="subst">$&#123;path&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要作用就是生成多层路由的具体路径，然后根据已有参数构建<code>RouteRecord</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const record: RouteRecord = &#123;</span><br><span class="line">  path: normalizedPath,</span><br><span class="line">  regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),</span><br><span class="line">  components: route.components || &#123; default: route.component &#125;,</span><br><span class="line">  instances: &#123;&#125;,</span><br><span class="line">  name,</span><br><span class="line">  parent,</span><br><span class="line">  matchAs,</span><br><span class="line">  redirect: route.redirect,</span><br><span class="line">  beforeEnter: route.beforeEnter,</span><br><span class="line">  meta: route.meta || &#123;&#125;,</span><br><span class="line">  props: route.props == null</span><br><span class="line">    ? &#123;&#125;</span><br><span class="line">    : route.components</span><br><span class="line">      ? route.props</span><br><span class="line">      : &#123; default: route.props &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里解释下<code>regex</code>这个参数，用到了<code>path-to-regexp</code>这个库，这个库可以把路径转换为正则表达式，举个栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = []</span><br><span class="line"><span class="keyword">const</span> regexp = pathToRegexp(<span class="string">'/foo/:bar'</span>, keys)</span><br><span class="line"><span class="comment">// regexp = /^\/foo\/([^\/]+?)\/?$/i</span></span><br><span class="line"><span class="comment">// keys = [&#123; name: 'bar', prefix: '/', delimiter: '/', optional: false, repeat: false, pattern: '[^\\/]+?' &#125;]</span></span><br></pre></td></tr></table></figure><p>用这个库作为路径匹配引擎是为了实现可选的动态路径参数、匹配零个或多个、一个或多个，甚至是自定义正则匹配。<br>紧接着判断是否配置了子路由，然后循环调用<code>addRouteRecord</code>这个方法，并把当前的<code>record</code>作为<code>parent</code>，如果设置了路由别名，也会给别名添加一份<code>record</code>，最后就是更新映射表，返回一个<code>Array</code>对象以及两个<code>Dictionary</code>对象。</p><p>回到<code>create-matcher.js</code>，它对外暴露了两个方法：<code>addRoutes</code>和<code>match</code>，分别用于动态添加路由配置以及返回一个路由的路径，先看<code>addRoutes</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function addRoutes (routes) &#123;</span><br><span class="line">    createRouteMap(routes, pathList, pathMap, nameMap)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其实就是在现有的<code>pathList</code>、<code>pathMap</code>、<code>nameMap</code>上动态添加一条新纪录，这几个都是引用类型，执行<code>addRoutes</code>之后都会被修改。</p><p><code>match</code>函数相对复杂一点，接受三个参数，第一个参数可以为<code>string</code>也可以是一个<code>Location</code>对象，第二个参数表示当前的路由路径，第三个参数也是<code>Location</code>对象，跟重定向有关：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  raw: RawLocation,</span></span></span><br><span class="line"><span class="function"><span class="params">  currentRoute?: Route,</span></span></span><br><span class="line"><span class="function"><span class="params">  redirectedFrom?: Location</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 根据raw和currentRoute计算出新的location</span></span><br><span class="line">  <span class="keyword">const</span> location = normalizeLocation(raw, currentRoute, <span class="literal">false</span>, router)</span><br><span class="line">  <span class="keyword">const</span> &#123; name &#125; = location</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="comment">// 如果是命名路由，取出对应的路由record</span></span><br><span class="line">    <span class="keyword">const</span> record = nameMap[name]</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      warn(record, <span class="string">`Route with name '<span class="subst">$&#123;name&#125;</span>' does not exist`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成一条新记录</span></span><br><span class="line">    <span class="keyword">if</span> (!record) <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">    <span class="keyword">const</span> paramNames = record.regex.keys</span><br><span class="line">      .filter(<span class="function"><span class="params">key</span> =&gt;</span> !key.optional)</span><br><span class="line">      .map(<span class="function"><span class="params">key</span> =&gt;</span> key.name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> location.params !== <span class="string">'object'</span>) &#123;</span><br><span class="line">      location.params = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 赋值params</span></span><br><span class="line">    <span class="keyword">if</span> (currentRoute &amp;&amp; <span class="keyword">typeof</span> currentRoute.params === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> currentRoute.params) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(key <span class="keyword">in</span> location.params) &amp;&amp; paramNames.indexOf(key) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">          location.params[key] = currentRoute.params[key]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (record) &#123;</span><br><span class="line">      location.path = fillParams(record.path, location.params, <span class="string">`named route "<span class="subst">$&#123;name&#125;</span>"`</span>)</span><br><span class="line">      <span class="keyword">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (location.path) &#123;</span><br><span class="line">    location.params = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pathList.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> path = pathList[i]</span><br><span class="line">      <span class="keyword">const</span> record = pathMap[path]</span><br><span class="line">      <span class="keyword">if</span> (matchRoute(record.regex, location.path, location.params)) &#123;</span><br><span class="line">        <span class="keyword">return</span> _createRoute(record, location, redirectedFrom)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// no match</span></span><br><span class="line">  <span class="keyword">return</span> _createRoute(<span class="literal">null</span>, location)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始会执行<code>normalizeLocation</code>方法，返回一个新的<code>location</code>，看一眼<code>normalizeLocation</code>的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">normalizeLocation</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  raw: RawLocation,</span></span></span><br><span class="line"><span class="function"><span class="params">  current: ?Route,</span></span></span><br><span class="line"><span class="function"><span class="params">  append: ?boolean,</span></span></span><br><span class="line"><span class="function"><span class="params">  router: ?VueRouter</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Location</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> next: Location = <span class="keyword">typeof</span> raw === <span class="string">'string'</span> ? &#123; <span class="attr">path</span>: raw &#125; : raw</span><br><span class="line">  <span class="comment">// named target</span></span><br><span class="line">  <span class="keyword">if</span> (next._normalized) &#123;</span><br><span class="line">    <span class="comment">// 已经normalized的直接返回</span></span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (next.name) &#123;</span><br><span class="line">    <span class="comment">// 如果是命名路由，返回一份备份</span></span><br><span class="line">    <span class="keyword">return</span> extend(&#123;&#125;, raw)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// relative params</span></span><br><span class="line">  <span class="comment">// 没有path，但是有params和current</span></span><br><span class="line">  <span class="keyword">if</span> (!next.path &amp;&amp; next.params &amp;&amp; current) &#123;</span><br><span class="line">    next = extend(&#123;&#125;, next)</span><br><span class="line">    next._normalized = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 拿到params</span></span><br><span class="line">    <span class="keyword">const</span> params: any = extend(extend(&#123;&#125;, current.params), next.params)</span><br><span class="line">    <span class="keyword">if</span> (current.name) &#123;</span><br><span class="line">      next.name = current.name</span><br><span class="line">      next.params = params</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.matched.length) &#123;</span><br><span class="line">      <span class="keyword">const</span> rawPath = current.matched[current.matched.length - <span class="number">1</span>].path</span><br><span class="line">      <span class="comment">// 根据rawPath和params计算出当前path</span></span><br><span class="line">      next.path = fillParams(rawPath, params, <span class="string">`path <span class="subst">$&#123;current.path&#125;</span>`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      warn(<span class="literal">false</span>, <span class="string">`relative params navigation requires a current route.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> next</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 将path拆分成path、hash和query</span></span><br><span class="line">  <span class="keyword">const</span> parsedPath = parsePath(next.path || <span class="string">''</span>)</span><br><span class="line">  <span class="keyword">const</span> basePath = (current &amp;&amp; current.path) || <span class="string">'/'</span></span><br><span class="line">  <span class="comment">// 返回最后拼接完成好的路径，append用于判断是否在当前 (相对) 路径前添加基路径</span></span><br><span class="line">  <span class="keyword">const</span> path = parsedPath.path</span><br><span class="line">    ? resolvePath(parsedPath.path, basePath, append || next.append)</span><br><span class="line">    : basePath</span><br><span class="line">  <span class="comment">// 解析query parseQuery是提供自定义查询字符串的解析/反解析函数，用于覆盖默认行为</span></span><br><span class="line">  <span class="keyword">const</span> query = resolveQuery(</span><br><span class="line">    parsedPath.query,</span><br><span class="line">    next.query,</span><br><span class="line">    router &amp;&amp; router.options.parseQuery</span><br><span class="line">  )</span><br><span class="line">  <span class="comment">// 路由的hash值</span></span><br><span class="line">  <span class="keyword">let</span> hash = next.hash || parsedPath.hash</span><br><span class="line">  <span class="keyword">if</span> (hash &amp;&amp; hash.charAt(<span class="number">0</span>) !== <span class="string">'#'</span>) &#123;</span><br><span class="line">    hash = <span class="string">`#<span class="subst">$&#123;hash&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    _normalized: <span class="literal">true</span>,</span><br><span class="line">    path,</span><br><span class="line">    query,</span><br><span class="line">    hash</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法首先会判断当前的<code>RawLocation</code>是否已经经过<code>_normalized</code>处理，是的话直接返回，否则的话继续判断当前<code>Location</code>是否有<code>name</code>字段，有的话通过<code>extend</code>方法拷贝一份<code>raw</code>对象直接返回，这个<code>extend</code>方法的实现很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">extend</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> b) &#123;</span><br><span class="line">    a[key] = b[key]</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当上面的情况都不满足，接着进入下一个判断条件，如果有当前<code>Route</code>信息，有<code>params</code>但是没有<code>path</code>的情况，首先会设置<code>_normalized</code>标志位，然后对<code>params</code>参数进行合并处理，然后继续分为两种情况处理，分别是<code>current</code>有<code>name</code>与否，前者的话会直接将<code>current</code>的<code>name</code>和拼接后的<code>params</code>赋值给<code>next</code>后直接返回，后者的话会从路由记录里面找到最新的一条记录的<code>path</code>，调用<code>fillParams</code>方法根据<code>rawPath</code>和<code>params</code>计算当前<code>path</code>，看一下<code>fillParams</code>对相对路径的处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; warn &#125; <span class="keyword">from</span> <span class="string">'./warn'</span></span><br><span class="line"><span class="keyword">import</span> Regexp <span class="keyword">from</span> <span class="string">'path-to-regexp'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// $flow-disable-line</span></span><br><span class="line"><span class="keyword">const</span> regexpCompileCache: &#123;</span><br><span class="line">  [key: string]: <span class="built_in">Function</span></span><br><span class="line">&#125; = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fillParams</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  path: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  params: ?Object,</span></span></span><br><span class="line"><span class="function"><span class="params">  routeMsg: string</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  params = params || &#123;&#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> filler =</span><br><span class="line">      regexpCompileCache[path] ||</span><br><span class="line">      (regexpCompileCache[path] = Regexp.compile(path))</span><br><span class="line">    <span class="comment">// 如果param中有名为pathMatch的key将他设置为&#123;0, params[patchMatch]&#125;的键值对</span></span><br><span class="line">    <span class="comment">// Fix #2505 resolving asterisk routes &#123; name: 'not-found', params: &#123; pathMatch: '/not-found' &#125;&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (params.pathMatch) params[<span class="number">0</span>] = params.pathMatch</span><br><span class="line">    <span class="comment">// 将动态路径参数替换成正式参数</span></span><br><span class="line">    <span class="keyword">return</span> filler(params, &#123; <span class="attr">pretty</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      warn(<span class="literal">false</span>, <span class="string">`missing param for <span class="subst">$&#123;routeMsg&#125;</span>: <span class="subst">$&#123;e.message&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// delete the 0 if it was added</span></span><br><span class="line">    <span class="keyword">delete</span> params[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这里就是把形如<code>{zapId: 1}</code>的params参数通过<code>Regexp.compile</code>生成的方法拼接到<code>path</code>后面，就像这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toPath = pathToRegexp.compile(<span class="string">'/user/:id'</span>)</span><br><span class="line"></span><br><span class="line">toPath(&#123; <span class="attr">id</span>: <span class="number">123</span> &#125;) <span class="comment">//=&gt; "/user/123"</span></span><br></pre></td></tr></table></figure><p>回到<code>create-matcher.js</code>，计算出新的<code>location</code>之后对命名路由和非命名路由进行了不同的处理，如果<code>name</code>存在，从<code>nameMap</code>字典里面匹配出对应的<code>record</code>，如果<code>record</code>不存在通过<code>_createRoute</code>生成一条新的<code>record</code>直接返回，否则取出这条<code>record</code>里面的<code>params</code>的<code>key</code>组成的数组，将<code>currentRoute</code>里面的<code>params</code>以<code>key</code>/<code>value</code>的形式不重复地存入名为<code>location.params</code>的一个对象里面，最后依然是通过<code>fillParams</code>拼接<code>params</code>参数到路径尾部，通过<code>_createRoute</code>方法创建一条新路径返回。</p><p>反之，如果是非命名路由，会通过<code>pathList</code>返回<code>path</code>对应的<code>record</code>，然后通过<code>createRoute</code>方法判断是否能够匹配到路由信息，是的话也会通过<code>_createRoute</code>生成一条新路径返回。接下来只要搞懂<code>matchRoute</code>和<code>_createRoute</code>干了什么就行了，先看<code>matchRoute</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">matchRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  regex: RouteRegExp,</span></span></span><br><span class="line"><span class="function"><span class="params">  path: string,</span></span></span><br><span class="line"><span class="function"><span class="params">  params: Object</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> m = path.match(regex)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!m) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!params) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, len = m.length; i &lt; len; ++i) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = regex.keys[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">const</span> val = <span class="keyword">typeof</span> m[i] === <span class="string">'string'</span> ? <span class="built_in">decodeURIComponent</span>(m[i]) : m[i]</span><br><span class="line">    <span class="keyword">if</span> (key) &#123;</span><br><span class="line">      <span class="comment">// Fix #1994: using * with props: true generates a param named 0</span></span><br><span class="line">      params[key.name || <span class="string">'pathMatch'</span>] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实就是通过<code>match</code>方法做判断，如果没匹配到直接返回<code>false</code>，如果传入了<code>params</code>会将<code>path</code>里面的<code>params</code>以<code>key</code>/<code>value</code>形式存入，这个传入的<code>params</code>在这里是<code>location.params</code>所以和前面做的是一样的操作。</p><p>接着看<code>_createRoute</code>方法，这个方法也在<code>create_matcher.js</code>内部：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_createRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  record: ?RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  location: Location,</span></span></span><br><span class="line"><span class="function"><span class="params">  redirectedFrom?: Location</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (record &amp;&amp; record.redirect) &#123;</span><br><span class="line">    <span class="keyword">return</span> redirect(record, redirectedFrom || location)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (record &amp;&amp; record.matchAs) &#123;</span><br><span class="line">    <span class="keyword">return</span> alias(record, location, record.matchAs)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> createRoute(record, location, redirectedFrom, router)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论是否设置了<code>redirect</code>还是<code>alias</code>最后都会重新调用<code>_createRoute</code>，所以这里直接看最后的<code>createRoute</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* @flow */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> type VueRouter <span class="keyword">from</span> <span class="string">'../index'</span></span><br><span class="line"><span class="keyword">import</span> &#123; stringifyQuery &#125; <span class="keyword">from</span> <span class="string">'./query'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> trailingSlashRE = <span class="regexp">/\/?$/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">createRoute</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  record: ?RouteRecord,</span></span></span><br><span class="line"><span class="function"><span class="params">  location: Location,</span></span></span><br><span class="line"><span class="function"><span class="params">  redirectedFrom?: ?Location,</span></span></span><br><span class="line"><span class="function"><span class="params">  router?: VueRouter</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Route</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 提供自定义查询字符串的解析/反解析函数。覆盖默认行为</span></span><br><span class="line">  <span class="keyword">const</span> stringifyQuery = router &amp;&amp; router.options.stringifyQuery</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> query: any = location.query || &#123;&#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    query = clone(query)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> route: Route = &#123;</span><br><span class="line">    name: location.name || (record &amp;&amp; record.name),</span><br><span class="line">    meta: (record &amp;&amp; record.meta) || &#123;&#125;,</span><br><span class="line">    path: location.path || <span class="string">'/'</span>,</span><br><span class="line">    hash: location.hash || <span class="string">''</span>,</span><br><span class="line">    query,</span><br><span class="line">    params: location.params || &#123;&#125;,</span><br><span class="line">    fullPath: getFullPath(location, stringifyQuery), <span class="comment">// 完整路径</span></span><br><span class="line">    matched: record ? formatMatch(record) : []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (redirectedFrom) &#123;</span><br><span class="line">    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.freeze(route)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span> value.map(clone)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &amp;&amp; <span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> value) &#123;</span><br><span class="line">      res[key] = clone(value[key])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the starting route that represents the initial state</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> START = createRoute(<span class="literal">null</span>, &#123;</span><br><span class="line">  path: <span class="string">'/'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatMatch</span> (<span class="params">record: ?RouteRecord</span>): <span class="title">Array</span>&lt;<span class="title">RouteRecord</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">while</span> (record) &#123;</span><br><span class="line">    res.unshift(record)</span><br><span class="line">    record = record.parent</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullPath</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  &#123; path, query = &#123;&#125;, hash = <span class="string">''</span> &#125;,</span></span></span><br><span class="line"><span class="function"><span class="params">  _stringifyQuery</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">string</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> stringify = _stringifyQuery || stringifyQuery</span><br><span class="line">  <span class="keyword">return</span> (path || <span class="string">'/'</span>) + stringify(query) + hash</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isSameRoute</span> (<span class="params">a: Route, b: ?Route</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (b === START) &#123;</span><br><span class="line">    <span class="keyword">return</span> a === b</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.path &amp;&amp; b.path) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      a.path.replace(trailingSlashRE, <span class="string">''</span>) === b.path.replace(trailingSlashRE, <span class="string">''</span>) &amp;&amp;</span><br><span class="line">      a.hash === b.hash &amp;&amp;</span><br><span class="line">      isObjectEqual(a.query, b.query)</span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (a.name &amp;&amp; b.name) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      a.name === b.name &amp;&amp;</span><br><span class="line">      a.hash === b.hash &amp;&amp;</span><br><span class="line">      isObjectEqual(a.query, b.query) &amp;&amp;</span><br><span class="line">      isObjectEqual(a.params, b.params)</span><br><span class="line">    )</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isObjectEqual</span> (<span class="params">a = &#123;&#125;, b = &#123;&#125;</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="comment">// handle null value #1566</span></span><br><span class="line">  <span class="keyword">if</span> (!a || !b) <span class="keyword">return</span> a === b</span><br><span class="line">  <span class="keyword">const</span> aKeys = <span class="built_in">Object</span>.keys(a)</span><br><span class="line">  <span class="keyword">const</span> bKeys = <span class="built_in">Object</span>.keys(b)</span><br><span class="line">  <span class="keyword">if</span> (aKeys.length !== bKeys.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> aKeys.every(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> aVal = a[key]</span><br><span class="line">    <span class="keyword">const</span> bVal = b[key]</span><br><span class="line">    <span class="comment">// check nested equality</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> aVal === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> bVal === <span class="string">'object'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> isObjectEqual(aVal, bVal)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">String</span>(aVal) === <span class="built_in">String</span>(bVal)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">isIncludedRoute</span> (<span class="params">current: Route, target: Route</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    current.path.replace(trailingSlashRE, <span class="string">'/'</span>).indexOf(</span><br><span class="line">      target.path.replace(trailingSlashRE, <span class="string">'/'</span>)</span><br><span class="line">    ) === <span class="number">0</span> &amp;&amp;</span><br><span class="line">    (!target.hash || current.hash === target.hash) &amp;&amp;</span><br><span class="line">    queryIncludes(current.query, target.query)</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">queryIncludes</span> (<span class="params">current: Dictionary&lt;string&gt;, target: Dictionary&lt;string&gt;</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> current)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过传入的<code>record</code>和<code>location</code>创建一个不可被修改的<code>Route</code>对象，其中有个<code>matched</code>属性通过<code>formatMatch</code>方法构建：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatMatch</span> (<span class="params">record: ?RouteRecord</span>): <span class="title">Array</span>&lt;<span class="title">RouteRecord</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> res = []</span><br><span class="line">  <span class="keyword">while</span> (record) &#123;</span><br><span class="line">    res.unshift(record)</span><br><span class="line">    record = record.parent</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过循环不断地查找当前<code>record</code>的<code>parent</code>，然后返回这条线上所有的<code>record</code>组成的数组。</p><h5 id="路由的跳转"><a href="#路由的跳转" class="headerlink" title="路由的跳转"></a>路由的跳转</h5><p>无论是<code>Hash</code>路由还是<code>History</code>路由，在初始化的时候都会通过<code>transitionTo</code>方法跳转到初始路径，这个方法也是我们切换路由路径时候使用的方法，下面分析一下该方法的实现过程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">transitionTo (location: RawLocation, onComplete?: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">   <span class="comment">// 通过location和current返回初始化Route信息</span></span><br><span class="line">   <span class="keyword">const</span> route = <span class="keyword">this</span>.router.match(location, <span class="keyword">this</span>.current)</span><br><span class="line">   <span class="keyword">this</span>.confirmTransition(route, () =&gt; &#123;</span><br><span class="line">     <span class="keyword">this</span>.updateRoute(route)</span><br><span class="line">     <span class="comment">// 执行onComplete回调</span></span><br><span class="line">     onComplete &amp;&amp; onComplete(route)</span><br><span class="line">     <span class="keyword">this</span>.ensureURL()</span><br><span class="line"></span><br><span class="line">     <span class="comment">// fire ready cbs once</span></span><br><span class="line">     <span class="keyword">if</span> (!<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">       <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">       <span class="keyword">this</span>.readyCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb(route) &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;, err =&gt; &#123;</span><br><span class="line">     <span class="comment">// 如果跳转被终止</span></span><br><span class="line">     <span class="keyword">if</span> (onAbort) &#123;</span><br><span class="line">       onAbort(err)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">if</span> (err &amp;&amp; !<span class="keyword">this</span>.ready) &#123;</span><br><span class="line">       <span class="keyword">this</span>.ready = <span class="literal">true</span></span><br><span class="line">       <span class="keyword">this</span>.readyErrorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb(err) &#125;)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>初始化调用的时候，拿到的是初始化的<code>Route</code>，通过<code>confirmTransition</code>方法进行实际的跳转操作，同时对跳转成功和失败两种情况都设置了回调函数，看一下这个函数的定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">confirmTransition (route: Route, <span class="attr">onComplete</span>: <span class="built_in">Function</span>, onAbort?: <span class="built_in">Function</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> current = <span class="keyword">this</span>.current</span><br><span class="line">  <span class="keyword">const</span> abort = <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (isError(err)) &#123;</span><br><span class="line">      <span class="comment">// 将所有的错误信息都存入errorCbs</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.errorCbs.length) &#123;</span><br><span class="line">        <span class="keyword">this</span>.errorCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb(err) &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        warn(<span class="literal">false</span>, <span class="string">'uncaught error during route navigation:'</span>)</span><br><span class="line">        <span class="built_in">console</span>.error(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onAbort &amp;&amp; onAbort(err)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="comment">// 如果是同一个路由路径</span></span><br><span class="line">    isSameRoute(route, current) &amp;&amp;</span><br><span class="line">    <span class="comment">// in the case the route map has been dynamically appended to</span></span><br><span class="line">    route.matched.length === current.matched.length</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="comment">// ensureURL在不同的路由实现方式里面该方法的实现不一样</span></span><br><span class="line">    <span class="keyword">this</span>.ensureURL()</span><br><span class="line">    <span class="comment">// 如果设置了abort方法这里直接调用</span></span><br><span class="line">    <span class="keyword">return</span> abort()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 拿到路径的变化部分以及遗弃部分和升级部分</span></span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    updated,</span><br><span class="line">    deactivated,</span><br><span class="line">    activated</span><br><span class="line">  &#125; = resolveQueue(<span class="keyword">this</span>.current.matched, route.matched)</span><br><span class="line">  <span class="comment">// 维持一个对应路径变化的导航守卫的钩子组成的List</span></span><br><span class="line">  <span class="keyword">const</span> queue: <span class="built_in">Array</span>&lt;?NavigationGuard&gt; = [].concat(</span><br><span class="line">    <span class="comment">// in-component leave guards</span></span><br><span class="line">    extractLeaveGuards(deactivated),</span><br><span class="line">    <span class="comment">// global before hooks</span></span><br><span class="line">    <span class="keyword">this</span>.router.beforeHooks,</span><br><span class="line">    <span class="comment">// in-component update hooks</span></span><br><span class="line">    extractUpdateHooks(updated),</span><br><span class="line">    <span class="comment">// in-config enter guards</span></span><br><span class="line">    activated.map(<span class="function"><span class="params">m</span> =&gt;</span> m.beforeEnter),</span><br><span class="line">    <span class="comment">// async components</span></span><br><span class="line">    resolveAsyncComponents(activated)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.pending = route</span><br><span class="line">  <span class="comment">// 定义一个迭代器</span></span><br><span class="line">  <span class="keyword">const</span> iterator = <span class="function">(<span class="params">hook: NavigationGuard, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.pending !== route) &#123;</span><br><span class="line">      <span class="keyword">return</span> abort()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      hook(route, current, (to: any) =&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (to === <span class="literal">false</span> || isError(to)) &#123;</span><br><span class="line">          <span class="comment">// next(false) -&gt; abort navigation, ensure current URL</span></span><br><span class="line">          <span class="keyword">this</span>.ensureURL(<span class="literal">true</span>)</span><br><span class="line">          abort(to)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (</span><br><span class="line">          <span class="keyword">typeof</span> to === <span class="string">'string'</span> ||</span><br><span class="line">          (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp; (</span><br><span class="line">            <span class="keyword">typeof</span> to.path === <span class="string">'string'</span> ||</span><br><span class="line">            <span class="keyword">typeof</span> to.name === <span class="string">'string'</span></span><br><span class="line">          ))</span><br><span class="line">        ) &#123;</span><br><span class="line">          <span class="comment">// next('/') or next(&#123; path: '/' &#125;) -&gt; redirect</span></span><br><span class="line">          abort()</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> to === <span class="string">'object'</span> &amp;&amp; to.replace) &#123;</span><br><span class="line">            <span class="keyword">this</span>.replace(to)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.push(to)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 确认跳转，执行回调</span></span><br><span class="line">          <span class="comment">// confirm transition and pass on the value</span></span><br><span class="line">          next(to)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      abort(e)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  runQueue(queue, iterator, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> postEnterCbs = []</span><br><span class="line">    <span class="keyword">const</span> isValid = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.current === route</span><br><span class="line">    <span class="comment">// wait until async components are resolved before</span></span><br><span class="line">    <span class="comment">// extracting in-component enter guards</span></span><br><span class="line">    <span class="comment">// 执行beforeRouteEnter钩子函数</span></span><br><span class="line">    <span class="keyword">const</span> enterGuards = extractEnterGuards(activated, postEnterCbs, isValid)</span><br><span class="line">    <span class="keyword">const</span> queue = enterGuards.concat(<span class="keyword">this</span>.router.resolveHooks)</span><br><span class="line">    runQueue(queue, iterator, () =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.pending !== route) &#123;</span><br><span class="line">        <span class="keyword">return</span> abort()</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">this</span>.pending = <span class="literal">null</span></span><br><span class="line">      onComplete(route)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.router.app) &#123;</span><br><span class="line">        <span class="keyword">this</span>.router.app.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          postEnterCbs.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> &#123; cb() &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先定义了一个<code>abort</code>函数用于处理路由跳转失败的情况以及执行<code>onAbort</code>回调，然后判断如果要跳转的路由和当前路由是同一个的话，直接调用<code>this.ensureURL()</code>和<code>abort()</code>，这个<code>ensureURL</code>在不同的路由实现方式里面该方法的实现不一样，最终都是做了路由跳转的操作，紧接着通过<code>resolveQueue</code>方法拿到三个数组，分别存储着固定的部分，遗弃的部分以及更新的部分，这个方法的实现如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolveQueue</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  current: Array&lt;RouteRecord&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">  next: Array&lt;RouteRecord&gt;</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): </span>&#123;</span><br><span class="line">  updated: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span><br><span class="line">  activated: <span class="built_in">Array</span>&lt;RouteRecord&gt;,</span><br><span class="line">  deactivated: <span class="built_in">Array</span>&lt;RouteRecord&gt;</span><br><span class="line">&#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> i</span><br><span class="line">  <span class="keyword">const</span> max = <span class="built_in">Math</span>.max(current.length, next.length)</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current[i] !== next[i]) &#123;</span><br><span class="line">      <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    updated: next.slice(<span class="number">0</span>, i),</span><br><span class="line">    activated: next.slice(i),</span><br><span class="line">    deactivated: current.slice(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>路由从<code>current</code>变为<code>next</code>，两个路径的公共部分就是<code>next.slice(0, i)</code>，<code>next.slice(0, i)</code>就是路径需要更新的部分，而<code>current.slice(i)</code>就是路径需要变化的部分。</p><p>拿到三个数组之后会构造一个<code>queue</code>队列，里面存储了路径变化要执行的钩子函数，也就是官方说的路由守卫，会按次序执行一些诸如<code>beforeRouteLeave</code>、<code>beforeRouteUpdate</code>等方法，下面还会定义一个迭代器，这个迭代器会根据传入的<code>ro</code>参数来决定执行<code>abort</code>还是<code>next</code>方法，最后执行<code>runQueue</code>方法来执行这个队列，这个方法的定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">runQueue</span> (<span class="params">queue: Array&lt;?NavigationGuard&gt;, fn: Function, cb: Function</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> step = <span class="function"><span class="params">index</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= queue.length) &#123;</span><br><span class="line">      cb()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (queue[index]) &#123;</span><br><span class="line">        fn(queue[index], () =&gt; &#123;</span><br><span class="line">          step(index + <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        step(index + <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  step(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>fn</code>其实就是<code>iterator</code>里面的<code>next</code>函数，只有执行了<code>next</code>函数<code>index</code>才会<code>+1</code>，才会进行管道中的下一个钩子，如果全部钩子执行完了，则导航的状态会变成<code>confirmed</code>(确认的)。</p><p>最后可以看一下<code>Vue-Router</code>里面对导航的完整解析流程：</p><blockquote><p>导航被触发。<br>在失活的组件里调用离开守卫。<br>调用全局的 beforeEach 守卫。<br>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。<br>在路由配置里调用 beforeEnter。<br>解析异步路由组件。<br>在被激活的组件里调用 beforeRouteEnter。<br>调用全局的 beforeResolve 守卫 (2.5+)。<br>导航被确认。<br>调用全局的 afterEach 钩子。<br>触发 DOM 更新。<br>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>传统的路由实现是通过对路径的切换做到的，对于<code>Vue-Router</code>而言，路由模块的本质 就是建立起url和页面之间的映射关系。路由始终会维护当前的线路，路由切换的时候会把当前线路切换到目标线路，切换过程中会执行一系列的导航守卫钩子函数，会更改<code>url</code>，同样也会渲染对应的组件，切换完毕后会把目标线路更新替换当前线路，这样就会作为下一次的路径切换的依据.</p><p>参考链接：<a href="https://ustbhuangyi.github.io/vue-analysis/vue-router/" target="_blank" rel="noopener">Vue核心解密</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;路由的概念&quot;&gt;&lt;a href=&quot;#路由的概念&quot; class=&quot;headerlink&quot; title=&quot;路由的概念&quot;&gt;&lt;/a&gt;路由的概念&lt;/h4&gt;&lt;p&gt;路由这个概念最开始是在后端出现的，以前使用模板引擎开发页面的时候经常会看到这样的路径：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://hometown.xxx.edu.cn/bbs/forum.php&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;有时还会有带.asp或.html的路径，这就是所谓的SSR(Server Side Render)，通过服务端渲染，直接返回页面。&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://www.limuyang.cc/tags/javascript/"/>
    
      <category term="vue-router" scheme="https://www.limuyang.cc/tags/vue-router/"/>
    
      <category term="源码阅读" scheme="https://www.limuyang.cc/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>实现一个符合Promise/A+规范的Promise</title>
    <link href="https://www.limuyang.cc/2019/04/23/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AC%A6%E5%90%88Promise-A-%E8%A7%84%E8%8C%83%E7%9A%84Promise/"/>
    <id>https://www.limuyang.cc/2019/04/23/实现一个符合Promise-A-规范的Promise/</id>
    <published>2019-04-23T23:16:48.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，<code>Promise</code> 是一个对象，从它可以获取异步操作的消息。<code>Promise</code> 提供统一的 API，各种异步操作都可以用同样的方法进行处理。<br><a id="more"></a></p><h4 id="简易版Promise的实现"><a href="#简易版Promise的实现" class="headerlink" title="简易版Promise的实现"></a>简易版Promise的实现</h4><p>在实现一个能通过<code>Promise A+</code>规范测试的<code>Promise</code>版本之前，我们先写一个简易版的<code>Promise</code>，结合我们平常使用<code>Promise</code>的姿势：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>对照<a href="https://promisesaplus.com/#notes" target="_blank" rel="noopener">Promise A+规范</a>开始撸代码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.1 “promise” is an object or function with a then method whose behavior conforms to this specification.</span><br><span class="line">1.2 “thenable” is an object or function that defines a then method.</span><br><span class="line">1.3 “value” is any legal JavaScript value (including undefined, a thenable, or a promise).</span><br><span class="line">1.4 “exception” is a value that is thrown using the throw statement.</span><br><span class="line">1.5 “reason” is a value that indicates why a promise was rejected.</span><br></pre></td></tr></table></figure><p>先实现一个<code>Promise</code>的构造函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">self.status = <span class="string">'pending'</span> <span class="comment">// 一个promise必须处于三种状态之一： 请求态（pending）， 完成态（fulfilled），拒绝态（rejected）</span></span><br><span class="line">self.value = <span class="literal">null</span></span><br><span class="line">self.onResolveCallbacks = [] <span class="comment">// Promise resolve的时候可能会有多个回调 </span></span><br><span class="line">self.onRejectCallbacks = [] <span class="comment">// 同上</span></span><br><span class="line">executor(resolve, reject) <span class="comment">// 执行executor</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在构造函数内部先使用一个常量<code>self</code>，当异步执行的时候可以获取正确的<code>this</code>对象</li><li><code>Promise</code>的初始状态应该是<code>pending</code></li><li><code>value</code>变量用于存储<code>resolve</code>或者<code>reject</code>的值，这里其实同时表示了规范中的<code>value/reason</code></li><li>当执行完<code>Promise</code>之后当前<code>Promise</code>的<code>status</code>可能还是<code>pending</code>，这个时候要把<code>then</code>方法中传入的回调存储到对应的<code>callBackList</code></li></ul><p>我们知道<code>Promise</code>接受一个函数作为参数，这个函数有<code>resolve</code>和<code>reject</code>两个函数作为参数，<code>resolve</code>函数可以将<code>Promise</code>的状态从<code>pending</code>转为<code>fulfilled</code>，并将异步操作的结果作为参数传递出去，<code>reject</code>函数可以将<code>Promise</code>的状态从<code>pending</code>转为<code>rejected</code>，并将异步操作失败报出的错误作为参数传递出去，下面我们来实现这两个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">self.status = <span class="string">'pending'</span></span><br><span class="line">self.value = <span class="literal">null</span></span><br><span class="line">self.onResolveCallbacks = []</span><br><span class="line">self.onRejectCallbacks = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status = <span class="string">'fulfilled'</span></span><br><span class="line">self.value = value</span><br><span class="line">self.onResolveCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(self.value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status = <span class="string">'rejected'</span></span><br><span class="line">self.value = reason</span><br><span class="line">self.onRejectCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(self.value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">executor(resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一点需要解释的是，执行<code>executor</code>有可能会出错就像下面这样，如果出错了<code>Promise</code>应该<code>reject</code>这个出错的值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>下一步，实现逻辑较为复杂的<code>then</code>函数，也是整个<code>Promise</code>的精髓所在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">A promise must provide a then method to access its current or eventual value or reason.</span><br><span class="line"></span><br><span class="line">A promise’s then method accepts two arguments:</span><br><span class="line"></span><br><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><p>因为<code>then</code>方法可以链式调用，所以我们把它构造在<code>Promise</code>的原型链上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 内部实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据标准<code>2.2.1</code>和<code>2.2.7</code>我们可以写出如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v <span class="comment">// 2.2.1.1</span></span><br><span class="line">onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> r</span><br><span class="line">&#125; <span class="comment">// 2.2.1.2</span></span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.onResolveCallbacks.push(onFulfilled)</span><br><span class="line">self.onRejectCallbacks.push(onRejected)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line">onFulfilled(self.value)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line">onRejected(self.value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了透传我们在<code>onFulfilled/onRejected</code>不是一个函数的时候也创造了一个函数返回当前<code>onFulfilled/onRejected</code>的值，当<code>status</code>处于<code>pending</code>状态，我们不能确定调用<code>onFulfilled</code>还是<code>onRejected</code>，只有等状态确定后才可以处理，所以这里把两个<code>callback</code>存入回调数组里面，如果是确定状态则调用对应的方法即可，这就是最简易版本的<code>Promise</code>，来试一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">resolve(<span class="number">1</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(value) <span class="comment">// 打印结果 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="实现一个符合Promise-A-规范的Promise"><a href="#实现一个符合Promise-A-规范的Promise" class="headerlink" title="实现一个符合Promise/A+规范的Promise"></a>实现一个符合Promise/A+规范的Promise</h4><p>以上面的简易版为基础，继续改造<code>then</code>方法，规范中有提到说<code>then</code>需要返回一个<code>Promise</code>，这也是它可以链式操作的关键所在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">then must return a promise [3.3].</span><br><span class="line"></span><br><span class="line">promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure><p>虽然说规范里面允许我们返回同一个<code>Promise</code>，但是我们这里遵循大多数<code>Promise</code>的实现给它返回一个新的<code>Promise</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v <span class="comment">// 2.2.1.1</span></span><br><span class="line">onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> r</span><br><span class="line">&#125; <span class="comment">// 2.2.1.2</span></span><br><span class="line"><span class="keyword">let</span> returnedPromise = <span class="literal">null</span> <span class="comment">// 2.2.7</span></span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">self.onResolveCallbacks.push(onFulfilled)</span><br><span class="line">self.onRejectCallbacks.push(onRejected)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">onFulfilled(self.value)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">onRejected(self.value)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据规范的定义，我们这里还需要定义一个<code>[[Resolve]](promise2, x)</code>解析函数，解析<code>onFulfilled</code>或<code>onRejected</code>的返回值，同时对两个方法执行期间抛出的错误进行<code>reject</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v <span class="comment">// 2.2.1.1</span></span><br><span class="line">onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> r</span><br><span class="line">&#125; <span class="comment">// 2.2.1.2</span></span><br><span class="line"><span class="keyword">let</span> returnedPromise = <span class="literal">null</span> <span class="comment">// 2.2.7</span></span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">self.onResolveCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">self.onRejectCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onRejected(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onRejected(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ResolutionProcedure</span>(<span class="params">promise, x, resolvePromise, rejectPromise</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 内部实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来只需要关注这个<code>ResolutionProcedure</code>函数的内部实现，这里其实规范都给出了所有的详细步骤，按照规范来做就行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ResolutionProcedure</span>(<span class="params">promise, x, resolvePromise, rejectPromise</span>) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line"><span class="keyword">return</span> rejectPromise(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'2.3.1'</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) <span class="comment">//2.3.2</span></span><br><span class="line">x.then(<span class="function">(<span class="params">(value</span>)=&gt;</span>&#123;</span><br><span class="line">ResolutionProcedure(promise, value, reslove, reject);</span><br><span class="line">&#125;,(reason)=&gt;&#123;</span><br><span class="line">reject(reason)</span><br><span class="line">&#125;));</span><br><span class="line"><span class="keyword">let</span> called = <span class="literal">false</span> <span class="comment">// 2.3.3.3.3</span></span><br><span class="line"><span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x === <span class="string">'function'</span>)) &#123; <span class="comment">// 2.3.3</span></span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 2.3.3.1</span></span><br><span class="line"><span class="keyword">let</span> then = x.then</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123; <span class="comment">// 2.3.3.3</span></span><br><span class="line">then.call(x, (value) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">called = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> ResolutionProcedure(promise, value, resolvePromise, rejectPromise)</span><br><span class="line">&#125;, (reason) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">called = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> rejectPromise(reason)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> resolvePromise(x) <span class="comment">// 2.3.4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">called = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> rejectPromise(e) <span class="comment">// 2.3.3.2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> resolvePromise(x) <span class="comment">// 2.3.3.4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">return</span> rejectPromise(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们注意到规范<code>2.2.4</code>中说了只有在执行栈包含平台代码的时候才可以调用<code>onFulfilled</code>和<code>onRejected</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onFulfilled or onRejected must not be called until the execution context stack contains only platform code.</span><br></pre></td></tr></table></figure><p>解释文案中也说了其实就是异步执行，我们可以用<code>setTimeout</code>或<code>setImmediate</code>来做到这一点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v <span class="comment">// 2.2.1.1</span></span><br><span class="line">onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> r</span><br><span class="line">&#125; <span class="comment">// 2.2.1.2</span></span><br><span class="line"><span class="keyword">let</span> returnedPromise = <span class="literal">null</span> <span class="comment">// 2.2.7</span></span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">self.onResolveCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">self.onRejectCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onRejected(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onRejected(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>这里用官方提供的<code>promises-aplus-tests</code>来验证我们写出来的库是否符合规范，为了跑测试我们还需要加上<code>deferred</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Promise.deferred = function() &#123;</span><br><span class="line">let defer = &#123;&#125;</span><br><span class="line">defer.promise = new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">defer.resolve = resolve</span><br><span class="line">defer.reject = reject</span><br><span class="line">&#125;)</span><br><span class="line">return defer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = Promise</span><br></pre></td></tr></table></figure><p>跑一下测试：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g promises-aplus-tests </span><br><span class="line"></span><br><span class="line">promises-aplus-tests ./promise.js</span><br></pre></td></tr></table></figure><p><img width="650" alt="WeChat747a5c781800c28642a62c8ad2150198" src="https://user-images.githubusercontent.com/11991572/56417937-0ba73700-62c8-11e9-91d9-6c88e3fefcb9.png"></p><p>说明我们写的库是符合的<code>Promise/A+</code>标准的</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><code>Promise/A+</code>规范只是定义了<code>then</code>方法，但是<code>Promise</code>本身还有一些其他的方法，我们也可以实现一下：</p><ul><li>catch</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>race</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.race = <span class="function"><span class="keyword">function</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = values.length; i &lt; len; i++) &#123;</span><br><span class="line">values[i].then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>all</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> resolvedCounter = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> promiseNum = promises.length</span><br><span class="line"><span class="keyword">let</span> resolvedValues = <span class="keyword">new</span> <span class="built_in">Array</span>(promiseNum)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line"><span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">resolvedCounter++</span><br><span class="line">resolvedValues[i] = value</span><br><span class="line"><span class="keyword">if</span> (resolvedCounter === promiseNum) &#123;</span><br><span class="line"><span class="keyword">return</span> resolve(resolvedValues)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> reject(reason)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>finally</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">constructor</span> = this.<span class="keyword">constructor</span></span><br><span class="line">return this.then(</span><br><span class="line">function(value) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">constructor</span>.resolve(callback()).then(function() &#123;</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">constructor</span>.resolve(callback()).then(function() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">constructor</span>.reject(reason)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后奉上实现后的全部代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">executor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">self.status = <span class="string">'pending'</span></span><br><span class="line">self.value = <span class="literal">null</span></span><br><span class="line">self.onResolveCallbacks = []</span><br><span class="line">self.onRejectCallbacks = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status = <span class="string">'fulfilled'</span></span><br><span class="line">self.value = value</span><br><span class="line">self.onResolveCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(self.value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line">self.status = <span class="string">'rejected'</span></span><br><span class="line">self.value = reason</span><br><span class="line">self.onRejectCallbacks.forEach(<span class="function"><span class="params">cb</span> =&gt;</span> cb(self.value))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">executor(resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> self = <span class="keyword">this</span></span><br><span class="line">onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">v</span> =&gt;</span> v <span class="comment">// 2.2.1.1</span></span><br><span class="line">onRejected = <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span> ? onRejected : <span class="function"><span class="params">r</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> r</span><br><span class="line">&#125; <span class="comment">// 2.2.1.2</span></span><br><span class="line"><span class="keyword">let</span> returnedPromise = <span class="literal">null</span> <span class="comment">// 2.2.7</span></span><br><span class="line"><span class="keyword">if</span> (self.status === <span class="string">'pending'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">self.onResolveCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">self.onRejectCallbacks.push(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onRejected(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'fulfilled'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onFulfilled(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (self.status === <span class="string">'rejected'</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> returnedPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">let</span> x = onRejected(self.value)</span><br><span class="line">ResolutionProcedure(returnedPromise, x, resolve, reject)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">reject(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.catch = <span class="function"><span class="keyword">function</span>(<span class="params">onRejected</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.then(<span class="literal">null</span>, onRejected)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.race = <span class="function"><span class="keyword">function</span>(<span class="params">values</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = values.length; i &lt; len; i++) &#123;</span><br><span class="line">values[i].then(resolve, reject)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all = <span class="function"><span class="keyword">function</span>(<span class="params">promises</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> resolvedCounter = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> promiseNum = promises.length</span><br><span class="line"><span class="keyword">let</span> resolvedValues = <span class="keyword">new</span> <span class="built_in">Array</span>(promiseNum)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; promiseNum; i++) &#123;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line"><span class="built_in">Promise</span>.resolve(promises[i]).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">resolvedCounter++</span><br><span class="line">resolvedValues[i] = value</span><br><span class="line"><span class="keyword">if</span> (resolvedCounter === promiseNum) &#123;</span><br><span class="line"><span class="keyword">return</span> resolve(resolvedValues)</span><br><span class="line">&#125;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> reject(reason)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.prototype.finally = <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">constructor</span> = this.<span class="keyword">constructor</span></span><br><span class="line">return this.then(</span><br><span class="line">function(value) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">constructor</span>.resolve(callback()).then(function() &#123;</span><br><span class="line"><span class="keyword">return</span> value</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">constructor</span>.resolve(callback()).then(function() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">constructor</span>.reject(reason)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function ResolutionProcedure(promise, x, resolvePromise, rejectPromise) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line"><span class="keyword">return</span> rejectPromise(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'2.3.1'</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) <span class="comment">//2.3.2</span></span><br><span class="line">x.then(<span class="function">(<span class="params">(value</span>) =&gt;</span> &#123;</span><br><span class="line">ResolutionProcedure(promise, value, reslove, reject)</span><br><span class="line">&#125;, (reason) =&gt; &#123;</span><br><span class="line">reject(reason)</span><br><span class="line">&#125;))</span><br><span class="line"><span class="keyword">let</span> called = <span class="literal">false</span> <span class="comment">// 2.3.3.3.3</span></span><br><span class="line"><span class="keyword">if</span> (x !== <span class="literal">null</span> &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'object'</span> || <span class="keyword">typeof</span> x === <span class="string">'function'</span>)) &#123; <span class="comment">// 2.3.3</span></span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">// 2.3.3.1</span></span><br><span class="line"><span class="keyword">let</span> then = x.then</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123; <span class="comment">// 2.3.3.3</span></span><br><span class="line">then.call(x, (value) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">called = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> ResolutionProcedure(promise, value, resolvePromise, rejectPromise)</span><br><span class="line">&#125;, (reason) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">called = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> rejectPromise(reason)</span><br><span class="line">&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> resolvePromise(x) <span class="comment">// 2.3.4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">called = <span class="literal">true</span></span><br><span class="line"><span class="keyword">return</span> rejectPromise(e) <span class="comment">// 2.3.3.2</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> resolvePromise(x) <span class="comment">// 2.3.3.4</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line"><span class="keyword">return</span> rejectPromise(e)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.deferred = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> defer = &#123;&#125;</span><br><span class="line">defer.promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">defer.resolve = resolve</span><br><span class="line">defer.reject = reject</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> defer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="built_in">Promise</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h4&gt;&lt;p&gt;所谓&lt;code&gt;Promise&lt;/code&gt;，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，&lt;code&gt;Promise&lt;/code&gt; 是一个对象，从它可以获取异步操作的消息。&lt;code&gt;Promise&lt;/code&gt; 提供统一的 API，各种异步操作都可以用同样的方法进行处理。&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://www.limuyang.cc/tags/javascript/"/>
    
      <category term="Promise" scheme="https://www.limuyang.cc/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>阅读分析Vuex源码</title>
    <link href="https://www.limuyang.cc/2019/03/29/%E9%98%85%E8%AF%BB%E5%88%86%E6%9E%90Vuex%E6%BA%90%E7%A0%81/"/>
    <id>https://www.limuyang.cc/2019/03/29/阅读分析Vuex源码/</id>
    <published>2019-03-29T16:28:18.000Z</published>
    <updated>2019-08-16T09:03:51.843Z</updated>
    
    <content type="html"><![CDATA[<p>不管是<code>Vue</code>框架还是<code>React</code>框架，在实际开发使用的过程中我们都会有很多情况下都会有状态共享的需求，这些状态共享会发生在父子组件和兄弟组件之间，我们为了维护这些状态经常会写很多非必要性的代码，这些代码一多起来，维护就会变得很困难，正是由于有这种需求，人们开发了许多相关的库，从<code>Flux</code>到<code>Redux</code>再到<code>Vuex</code>，这些库的大致思路都是：将共享的状态抽离出来，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，达到代码结构化和易维护的目的。<br><a id="more"></a></p><h4 id="简单状态管理起步"><a href="#简单状态管理起步" class="headerlink" title="简单状态管理起步"></a>简单状态管理起步</h4><p>在说到<code>Vuex</code>之前，我们可以先了解下简单的状态管理，也就是<strong>Store模式</strong></p><p><img src="https://user-images.githubusercontent.com/11991572/54919628-407bd480-4f3c-11e9-9b15-af5868589263.png" alt="Store模式"></p><p>当你有一处需要多个实例共享的状态，可以简单地通过维护一份数据来实现共享：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sourceOfTruth = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vmA = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: sourceOfTruth</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vmB = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: sourceOfTruth</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在当 <code>sourceOfTruth</code> 发生变化，<code>vmA</code>和<code>vmB</code>都将自动的更新引用它们的视图，但是采用这种方式，在任何时间，我们应用中的任何部分，在任何数据改变后，都不会留下变更过的记录。为了解决这个问题，我们可以采用一个简单的<strong>Store模式</strong>:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> store = &#123;</span><br><span class="line">  debug: <span class="literal">true</span>,</span><br><span class="line">  state: &#123;</span><br><span class="line">    message: <span class="string">'Hello!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  setMessageAction (newValue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.debug) <span class="built_in">console</span>.log(<span class="string">'setMessageAction triggered with'</span>, newValue)</span><br><span class="line">    <span class="keyword">this</span>.state.message = newValue</span><br><span class="line">  &#125;,</span><br><span class="line">  clearMessageAction () &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.debug) <span class="built_in">console</span>.log(<span class="string">'clearMessageAction triggered'</span>)</span><br><span class="line">    <span class="keyword">this</span>.state.message = <span class="string">''</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有 store 中 state 的改变，都放置在 store 自身的 action 中去管理。这种集中式状态管理能够被更容易地理解哪种类型的 mutation 将会发生，以及它们是如何被触发。当错误出现时，我们现在也会有一个 log 记录 bug 之前发生了什么，此外，每个实例/组件仍然可以拥有和管理自己的私有状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vmA = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    privateState: &#123;&#125;,</span><br><span class="line">    sharedState: store.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vmB = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    privateState: &#123;&#125;,</span><br><span class="line">    sharedState: store.state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接着我们继续延伸约定，组件不允许直接修改属于 store 实例的 state，而应执行 action 来分发 (dispatch) 事件通知 store 去改变，这样的话，一个<code>Flux</code>架构就实现了。</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><blockquote><p>Vuex 的版本是 3.1.0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">目录结构</span><br><span class="line"></span><br><span class="line">├── helpers.js  提供action、mutations以及getters的查找API</span><br><span class="line">├── index.esm.js</span><br><span class="line">├── index.js  是源码主入口文件，提供store的各module构建安装</span><br><span class="line">├── mixin.js  提供了store在Vue实例上的装载注入</span><br><span class="line">├── module  提供module对象与module对象树的创建功能</span><br><span class="line">│   ├── module-collection.js</span><br><span class="line">│   └── module.js</span><br><span class="line">├── plugins  提供开发辅助插件，如“时光穿梭”功能</span><br><span class="line">│   ├── devtool.js</span><br><span class="line">│   └── logger.js</span><br><span class="line">├── store.js  构建store</span><br><span class="line">└── util.js  提供了工具方法如find、deepCopy、forEachValue以及assert等方法。</span><br></pre></td></tr></table></figure><p>一般我看源码都是从入口文件开始看，这里是<code>index.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Store, install &#125; <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState, mapMutations, mapGetters, mapActions, createNamespacedHelpers &#125; <span class="keyword">from</span> <span class="string">'./helpers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  Store,</span><br><span class="line">  install,</span><br><span class="line">  version: <span class="string">'__VERSION__'</span>,</span><br><span class="line">  mapState,</span><br><span class="line">  mapMutations,</span><br><span class="line">  mapGetters,</span><br><span class="line">  mapActions,</span><br><span class="line">  createNamespacedHelpers</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口文件对外暴露了<code>Vuex</code>相关的<code>API</code>，至于为什么这里有一个<code>install</code>，其实是因为<code>Vuex</code>是被当做<code>Vue</code>的插件来使用的，开发一个<code>Vue</code>插件的话就需要对外暴露一个<code>install</code>方法，这个方法第一个参数<code>Vue</code>构造器，第二个参数是一个可选的选项对象。</p><h4 id="Store-js"><a href="#Store-js" class="headerlink" title="Store.js"></a>Store.js</h4><p><code>Store.js</code>对外暴露出了<code>Store</code>这个类和<code>install</code>这个方法，在开始分析<code>Store.js</code>之前我们先看一下<code>install</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">install</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (Vue &amp;&amp; _Vue === Vue) &#123;</span><br><span class="line">    <span class="comment">// 报错，已经使用了 Vue.use(Vuex)方法注册了</span></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(</span><br><span class="line">        <span class="string">'[vuex] already installed. Vue.use(Vuex) should be called only once.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  Vue = _Vue</span><br><span class="line">  applyMixin(Vue)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单，只是把传入的<code>_Vue</code>赋值给<code>Vue</code>，然后调用<code>applyMixin(Vue)</code>方法，这个方法定义在<code>src/mixin.js</code>中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> version = <span class="built_in">Number</span>(Vue.version.split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line">  <span class="comment">// 在全局beforeCreate钩子里面初始化vuex</span></span><br><span class="line">  <span class="keyword">if</span> (version &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    Vue.mixin(&#123; <span class="attr">beforeCreate</span>: vuexInit &#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// override init and inject vuex init procedure</span></span><br><span class="line">    <span class="comment">// for 1.x backwards compatibility.</span></span><br><span class="line">    <span class="keyword">const</span> _init = Vue.prototype._init</span><br><span class="line">    Vue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">      options.init = options.init</span><br><span class="line">        ? [vuexInit].concat(options.init)</span><br><span class="line">        : vuexInit</span><br><span class="line">      _init.call(<span class="keyword">this</span>, options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Vuex init hook, injected into each instances init hooks list.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">vuexInit</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> options = <span class="keyword">this</span>.$options</span><br><span class="line">    <span class="comment">// store injection</span></span><br><span class="line">    <span class="keyword">if</span> (options.store) &#123;</span><br><span class="line">      <span class="comment">// new Vue(&#123;</span></span><br><span class="line">      <span class="comment">//   el: '#app',</span></span><br><span class="line">      <span class="comment">//   router,</span></span><br><span class="line">      <span class="comment">//   store,</span></span><br><span class="line">      <span class="comment">//   render: h =&gt; h(App)</span></span><br><span class="line">      <span class="comment">// &#125;)</span></span><br><span class="line">      <span class="comment">// 这里获取的store就是上面初始化Vue的时候传入的store，所以后面我们可以通过this.$store获取到store实例</span></span><br><span class="line">      <span class="keyword">this</span>.$store = <span class="keyword">typeof</span> options.store === <span class="string">'function'</span></span><br><span class="line">        ? options.store()</span><br><span class="line">        : options.store</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.parent &amp;&amp; options.parent.$store) &#123;</span><br><span class="line">      <span class="comment">// 如果是子组件，则从根组件获取store</span></span><br><span class="line">      <span class="keyword">this</span>.$store = options.parent.$store</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>applyMixin</code>方法主要是为了在<code>beforeCreate</code>的全局钩子给所有子组件注入<code>$store</code>属性方便后续调用，设置到<code>this</code>上所以后面再全局都可以通过<code>this.$store</code>来访问<code>store</code>对象</p><h4 id="Store的实例化"><a href="#Store的实例化" class="headerlink" title="Store的实例化"></a>Store的实例化</h4><p>当我们引入<code>Vuex</code>之后下一步的操作就是实例化一个<code>Store</code>对象，会返回一个<code>store</code>实例并且传入<code>Vue</code>的构造器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在<code>Store</code>的构造函数当中，首先会对执行环境进行断言(是否调用了Vue.use(Vuex)来初始化/是否支持Promise等)：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// Auto install if it is not done yet and `window` has `Vue`.</span></span><br><span class="line">    <span class="comment">// To allow users to avoid auto-installation in some cases,</span></span><br><span class="line">    <span class="comment">// this code should be placed here. See #731</span></span><br><span class="line">    <span class="comment">// 在浏览器环境下，如果插件还未安装则它会自动安装。</span></span><br><span class="line">    <span class="comment">// 它允许用户在某些情况下避免自动安装。</span></span><br><span class="line">    <span class="keyword">if</span> (!Vue &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">      install(<span class="built_in">window</span>.Vue)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      assert(Vue, <span class="string">`must call Vue.use(Vuex) before creating a store instance.`</span>)</span><br><span class="line">      assert(<span class="keyword">typeof</span> <span class="built_in">Promise</span> !== <span class="string">'undefined'</span>, <span class="string">`vuex requires a Promise polyfill in this browser.`</span>)</span><br><span class="line">      assert(<span class="keyword">this</span> <span class="keyword">instanceof</span> Store, <span class="string">`store must be called with the new operator.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略无关代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>assert</code>这个方法被定义在<code>utils.js</code>当中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">assert</span> (<span class="params">condition, msg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!condition) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`[vuex] <span class="subst">$&#123;msg&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实这个方法的作用就是抛出一些异常信息，紧接着定义了一些<code>Store</code>的内部变量：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">      <span class="comment">// 一个数组，包含应用在 store 上的插件方法</span></span><br><span class="line">      plugins = [],</span><br><span class="line">      <span class="comment">// 使 Vuex store 进入严格模式，在严格模式下，任何 mutation 处理函数以外修改 Vuex state 都会抛出错误</span></span><br><span class="line">      strict = <span class="literal">false</span></span><br><span class="line">    &#125; = options</span><br><span class="line">    <span class="comment">// store internal state</span></span><br><span class="line">    <span class="comment">// 判断是否是通过mutation更改的state</span></span><br><span class="line">    <span class="keyword">this</span>._committing = <span class="literal">false</span></span><br><span class="line">    <span class="comment">// 存放action</span></span><br><span class="line">    <span class="keyword">this</span>._actions = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>._actionSubscribers = []</span><br><span class="line">    <span class="comment">// 存放mutations</span></span><br><span class="line">    <span class="keyword">this</span>._mutations = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// 存放getters</span></span><br><span class="line">    <span class="keyword">this</span>._wrappedGetters = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// 传入的options对象，其实就是初始化时候传入的对象 new Vuex.Store(&#123;options&#125;)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//   modules: &#123;</span></span><br><span class="line">    <span class="comment">//     cart,</span></span><br><span class="line">    <span class="comment">//         products</span></span><br><span class="line">    <span class="comment">//   &#125;,</span></span><br><span class="line">    <span class="comment">//   strict: debug,</span></span><br><span class="line">    <span class="comment">//       plugins: debug ? [createLogger()] : []</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// 初始化modules</span></span><br><span class="line">    <span class="keyword">this</span>._modules = <span class="keyword">new</span> ModuleCollection(options)</span><br><span class="line">    <span class="comment">// 根据namespace来map对应的module</span></span><br><span class="line">    <span class="keyword">this</span>._modulesNamespaceMap = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">this</span>._subscribers = []</span><br><span class="line">    <span class="comment">// 用$watch监测store数据的变化</span></span><br><span class="line">    <span class="keyword">this</span>._watcherVM = <span class="keyword">new</span> Vue()</span><br></pre></td></tr></table></figure><p>这里有个很有意思的知识点，就是我们发现这里创建空对象的时候用的都是<code>Object.create(null)</code>，这是因为如果直接用一个<code>{}</code>赋值的话等价于<code>Object.create(Object.prototype)</code>，它还会从<code>Object.prototype</code>上继承一些方法如<code>hasOwnProperty</code>、<code>isPrototypeOf</code>等，如果用<code>Object.create(null)</code>则说明这个对象的原型是<code>null</code>也就是没有继承任何对象。<br>除此之外，在<code>Store</code>的初始化过程中还有几个主要的方法，下面进行逐一的分析：</p><h4 id="模块的初始化"><a href="#模块的初始化" class="headerlink" title="模块的初始化"></a>模块的初始化</h4><p>由于<code>Store</code>使用的是单一的状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的<code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state: &#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123; ... &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    a: moduleA,</span><br><span class="line">    b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">// -&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure><p>完成这种树形结构的构建入口就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传入的options对象，其实就是初始化时候传入的对象 new Vuex.Store(&#123;options&#125;)</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   modules: &#123;</span></span><br><span class="line"><span class="comment">//     cart,</span></span><br><span class="line"><span class="comment">//         products</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   strict: debug,</span></span><br><span class="line"><span class="comment">//       plugins: debug ? [createLogger()] : []</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="keyword">this</span>._modules = <span class="keyword">new</span> ModuleCollection(options)</span><br></pre></td></tr></table></figure><p><code>ModuleCollection</code>这个类的定义在<code>src/module/module-collection.js</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Module <span class="keyword">from</span> <span class="string">'./module'</span></span><br><span class="line"><span class="keyword">import</span> &#123; assert, forEachValue &#125; <span class="keyword">from</span> <span class="string">'../util'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleCollection</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (rawRootModule) &#123;</span><br><span class="line">    <span class="comment">// register root module (Vuex.Store options)</span></span><br><span class="line">    <span class="keyword">this</span>.register([], rawRootModule, <span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取对应于path的Module</span></span><br><span class="line">  <span class="keyword">get</span> (path) &#123;</span><br><span class="line">    <span class="comment">// this.root根Module</span></span><br><span class="line">    <span class="keyword">return</span> path.reduce(<span class="function">(<span class="params"><span class="built_in">module</span>, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">module</span>.getChild(key)</span><br><span class="line">    &#125;, <span class="keyword">this</span>.root)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getNamespace (path) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="built_in">module</span> = <span class="keyword">this</span>.root</span><br><span class="line">    <span class="keyword">return</span> path.reduce(<span class="function">(<span class="params">namespace, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">module</span> = <span class="built_in">module</span>.getChild(key)</span><br><span class="line">      <span class="keyword">return</span> namespace + (<span class="built_in">module</span>.namespaced ? key + <span class="string">'/'</span> : <span class="string">''</span>)</span><br><span class="line">    &#125;, <span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update (rawRootModule) &#123;</span><br><span class="line">    update([], <span class="keyword">this</span>.root, rawRootModule)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  register (path, rawModule, runtime = <span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="comment">// 检测module对应的函数的形式是否正确</span></span><br><span class="line">      assertRawModule(path, rawModule)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建Module对象</span></span><br><span class="line">    <span class="keyword">const</span> newModule = <span class="keyword">new</span> Module(rawModule, runtime)</span><br><span class="line">    <span class="keyword">if</span> (path.length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.root = newModule</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 获取Parent Module</span></span><br><span class="line">      <span class="keyword">const</span> parent = <span class="keyword">this</span>.get(path.slice(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">      <span class="comment">// 添加子Module</span></span><br><span class="line">      parent.addChild(path[path.length - <span class="number">1</span>], newModule)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// register nested modules</span></span><br><span class="line">    <span class="keyword">if</span> (rawModule.modules) &#123;</span><br><span class="line">      <span class="comment">// 递归注册子Module</span></span><br><span class="line">      forEachValue(rawModule.modules, (rawChildModule, key) =&gt; &#123;</span><br><span class="line">        <span class="keyword">this</span>.register(path.concat(key), rawChildModule, runtime)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  unregister (path) &#123;</span><br><span class="line">    <span class="keyword">const</span> parent = <span class="keyword">this</span>.get(path.slice(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">    <span class="keyword">const</span> key = path[path.length - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> (!parent.getChild(key).runtime) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    parent.removeChild(key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">update</span> (<span class="params">path, targetModule, newModule</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assertRawModule(path, newModule)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update target module</span></span><br><span class="line">  targetModule.update(newModule)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// update nested modules</span></span><br><span class="line">  <span class="keyword">if</span> (newModule.modules) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> newModule.modules) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!targetModule.getChild(key)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.warn(</span><br><span class="line">            <span class="string">`[vuex] trying to add a new module '<span class="subst">$&#123;key&#125;</span>' on hot reloading, `</span> +</span><br><span class="line">            <span class="string">'manual reload is needed'</span></span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      update(</span><br><span class="line">        path.concat(key),</span><br><span class="line">        targetModule.getChild(key),</span><br><span class="line">        newModule.modules[key]</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> functionAssert = &#123;</span><br><span class="line">  assert: <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">typeof</span> value === <span class="string">'function'</span>,</span><br><span class="line">  expected: <span class="string">'function'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectAssert = &#123;</span><br><span class="line">  assert: <span class="function"><span class="params">value</span> =&gt;</span> <span class="keyword">typeof</span> value === <span class="string">'function'</span> ||</span><br><span class="line">    (<span class="keyword">typeof</span> value === <span class="string">'object'</span> &amp;&amp; <span class="keyword">typeof</span> value.handler === <span class="string">'function'</span>),</span><br><span class="line">  expected: <span class="string">'function or object with "handler" function'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// actions使用objectAssert是因为在带命名空间的模块注册全局action时action的定义会放在函数handler中</span></span><br><span class="line"><span class="keyword">const</span> assertTypes = &#123;</span><br><span class="line">  getters: functionAssert,</span><br><span class="line">  mutations: functionAssert,</span><br><span class="line">  actions: objectAssert</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertRawModule</span> (<span class="params">path, rawModule</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(assertTypes).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!rawModule[key]) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">const</span> assertOptions = assertTypes[key]</span><br><span class="line">    <span class="comment">// 循环getters/mutations/actions</span></span><br><span class="line">    <span class="comment">// value和type对应函数体和函数名</span></span><br><span class="line">    forEachValue(rawModule[key], (value, type) =&gt; &#123;</span><br><span class="line">      assert(</span><br><span class="line">        assertOptions.assert(value),</span><br><span class="line">        makeAssertionMessage(path, key, type, value, assertOptions.expected)</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeAssertionMessage</span> (<span class="params">path, key, type, value, expected</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> buf = <span class="string">`<span class="subst">$&#123;key&#125;</span> should be <span class="subst">$&#123;expected&#125;</span> but "<span class="subst">$&#123;key&#125;</span>.<span class="subst">$&#123;type&#125;</span>"`</span></span><br><span class="line">  <span class="keyword">if</span> (path.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    buf += <span class="string">` in module "<span class="subst">$&#123;path.join(<span class="string">'.'</span>)&#125;</span>"`</span></span><br><span class="line">  &#125;</span><br><span class="line">  buf += <span class="string">` is <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(value)&#125;</span>.`</span></span><br><span class="line">  <span class="keyword">return</span> buf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化<code>ModuleCollection</code>其实就是执行<code>register</code>方法，这个方法接受3个参数，其中<code>path</code>参数就是<code>module</code>的路径，这个值是我们拆分<code>module</code>时候<code>module</code>的<code>key</code>组成的一个数组，以上面为例的话，<code>moduleA</code>和<code>moduleB</code>的<code>path</code>分别为<code>[&quot;a&quot;]</code>和<code>[&quot;b&quot;]</code>，如果他们还有子<code>module</code>则子<code>module</code>的<code>path</code>的形式大致如<code>[&quot;a&quot;，&quot;a1&quot;]</code>/<code>[&quot;b&quot;，&quot;b1&quot;]</code>，第二个参数其实是定义<code>module</code>的配置，像<code>rawRootModule</code>就是我们构建一个<code>Store</code>的时候传入的那个对象，第三个参数<code>runtime</code>表示是否是一个运行时创建的<code>module</code>，紧接着在<code>register</code>方法内部通过<code>assertRawModule</code>方法遍历<code>module</code>内部的<code>getters</code>、<code>mutations</code>、<code>actions</code>是否符合要求，紧接着通过<code>const newModule = new Module(rawModule, runtime)</code>构建一个<code>module</code>对象，看一眼<code>module</code>类的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; forEachValue &#125; <span class="keyword">from</span> <span class="string">'../util'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Base data struct for store's module, package with some attribute and method</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Module</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (rawModule, runtime) &#123;</span><br><span class="line">    <span class="keyword">this</span>.runtime = runtime</span><br><span class="line">    <span class="comment">// Store some children item</span></span><br><span class="line">    <span class="keyword">this</span>._children = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="comment">// Store the origin module object which passed by programmer</span></span><br><span class="line">    <span class="keyword">this</span>._rawModule = rawModule</span><br><span class="line">    <span class="keyword">const</span> rawState = rawModule.state</span><br><span class="line">    <span class="comment">// Store the origin module's state</span></span><br><span class="line">    <span class="comment">//   state() &#123;</span></span><br><span class="line">    <span class="comment">//       return &#123;</span></span><br><span class="line">    <span class="comment">//           // state here instead</span></span><br><span class="line">    <span class="comment">//       &#125;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="keyword">this</span>.state = (<span class="keyword">typeof</span> rawState === <span class="string">'function'</span> ? rawState() : rawState) || &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> namespaced () &#123;</span><br><span class="line">    <span class="keyword">return</span> !!<span class="keyword">this</span>._rawModule.namespaced</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addChild (key, <span class="built_in">module</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>._children[key] = <span class="built_in">module</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeChild (key) &#123;</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>._children[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getChild (key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._children[key]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  update (rawModule) &#123;</span><br><span class="line">    <span class="keyword">this</span>._rawModule.namespaced = rawModule.namespaced</span><br><span class="line">    <span class="keyword">if</span> (rawModule.actions) &#123;</span><br><span class="line">      <span class="keyword">this</span>._rawModule.actions = rawModule.actions</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rawModule.mutations) &#123;</span><br><span class="line">      <span class="keyword">this</span>._rawModule.mutations = rawModule.mutations</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (rawModule.getters) &#123;</span><br><span class="line">      <span class="keyword">this</span>._rawModule.getters = rawModule.getters</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  forEachChild (fn) &#123;</span><br><span class="line">    forEachValue(<span class="keyword">this</span>._children, fn)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  forEachGetter (fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._rawModule.getters) &#123;</span><br><span class="line">      forEachValue(<span class="keyword">this</span>._rawModule.getters, fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  forEachAction (fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._rawModule.actions) &#123;</span><br><span class="line">      forEachValue(<span class="keyword">this</span>._rawModule.actions, fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  forEachMutation (fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._rawModule.mutations) &#123;</span><br><span class="line">      forEachValue(<span class="keyword">this</span>._rawModule.mutations, fn)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是简单地描述了构建出来的每个模块的一些属性和方法，回到上面的<code>register</code>函数，构建完<code>Module</code>之后，我们先判断<code>path</code>的长度，如果长度为0说明是根<code>module</code>，将它赋值给<code>this.root</code>，否则的话获取到这个<code>module</code>的<code>parent</code>，然后通过<code>module</code>的<code>addChild</code>方法建立模块之间的父子关系：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Parent Module</span></span><br><span class="line"><span class="keyword">const</span> parent = <span class="keyword">this</span>.get(path.slice(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line"><span class="comment">// 添加子Module</span></span><br><span class="line">parent.addChild(path[path.length - <span class="number">1</span>], newModule)</span><br></pre></td></tr></table></figure><p>这里调用了<code>get</code>方法，传入的<code>path</code>是<code>parent</code>模块的<code>path</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">get</span> (path) &#123;</span><br><span class="line">    <span class="comment">// this.root根Module</span></span><br><span class="line">    <span class="keyword">return</span> path.reduce(<span class="function">(<span class="params"><span class="built_in">module</span>, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">module</span>.getChild(key)</span><br><span class="line">    &#125;, <span class="keyword">this</span>.root)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>因为<code>path</code>是整个模块树的路径，这里通过<code>reduce</code>方法一层层解析去找到对应模块，查找的过程是用的<code>module.getChild(key)</code>方法，返回的是<code>this._children[key]</code>，这些<code>_children</code>就是通过执行<code>parent.addChild(path[path.length - 1], newModule)</code>方法添加的，就这样，每一个模块都通过<code>path</code>去寻找到<code>parent`</code>module<code>，然后通过</code>addChild<code>建立父子关系，逐级递进，构建完成整个</code>module`树。</p><h4 id="模块的安装"><a href="#模块的安装" class="headerlink" title="模块的安装"></a>模块的安装</h4><p>接下来回到<code>Store.js</code>，初始化<code>modules</code>之后会执行一些<code>bind</code>操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">const</span> &#123; dispatch, commit &#125; = <span class="keyword">this</span></span><br><span class="line"><span class="keyword">this</span>.dispatch = <span class="function"><span class="keyword">function</span> <span class="title">boundDispatch</span> (<span class="params">type, payload</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dispatch.call(store, type, payload)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.commit = <span class="function"><span class="keyword">function</span> <span class="title">boundCommit</span> (<span class="params">type, payload, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> commit.call(store, type, payload, options)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是为了当我们在组件内部使用<code>this.$store.commit/this.$store.dispatch</code>方法时候的<code>this</code>指向的是当前的<code>store</code>而不是组件本身，这里先略过<code>commit</code>和<code>dispatch</code>方法的实现，先分析<code>Store.js</code>的初始化操作，在初始化<code>module</code>之后会进行<code>module</code>安装的一些操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="keyword">this</span>._modules.root.state</span><br><span class="line"><span class="comment">// init root module.</span></span><br><span class="line"><span class="comment">// this also recursively registers all sub-modules</span></span><br><span class="line"><span class="comment">// and collects all module getters inside this._wrappedGetters</span></span><br><span class="line">installModule(<span class="keyword">this</span>, state, [], <span class="keyword">this</span>._modules.root)</span><br></pre></td></tr></table></figure><p>看一眼<code>installModule</code>方法的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">installModule</span> (<span class="params">store, rootState, path, module, hot</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否是根module</span></span><br><span class="line">  <span class="keyword">const</span> isRoot = !path.length</span><br><span class="line">  <span class="comment">// 获取module的命名空间</span></span><br><span class="line">  <span class="keyword">const</span> namespace = store._modules.getNamespace(path)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将module的命名空间和module本身一一对应存储在_modulesNamespaceMap对象里面方便后续查找</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">module</span>.namespaced) &#123;</span><br><span class="line">    store._modulesNamespaceMap[namespace] = <span class="built_in">module</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set state</span></span><br><span class="line">  <span class="keyword">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class="line">    <span class="keyword">const</span> parentState = getNestedState(rootState, path.slice(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">    <span class="keyword">const</span> moduleName = path[path.length - <span class="number">1</span>]</span><br><span class="line">    store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      Vue.set(parentState, moduleName, <span class="built_in">module</span>.state)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> local = <span class="built_in">module</span>.context = makeLocalContext(store, namespace, path)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.forEachMutation(<span class="function">(<span class="params">mutation, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    registerMutation(store, namespacedType, mutation, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.forEachAction(<span class="function">(<span class="params">action, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> type = action.root ? key : namespace + key</span><br><span class="line">    <span class="keyword">const</span> handler = action.handler || action</span><br><span class="line">    registerAction(store, type, handler, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.forEachGetter(<span class="function">(<span class="params">getter, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">    registerGetter(store, namespacedType, getter, local)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">module</span>.forEachChild(<span class="function">(<span class="params">child, key</span>) =&gt;</span> &#123;</span><br><span class="line">    installModule(store, rootState, path.concat(key), child, hot)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法接受5个参数：<code>store</code>意味着<code>root store</code>、<code>state</code>就是<code>root state</code>、<code>path</code>是当前模块路径、<code>module</code>是当前模块，<code>hot</code>表示是否是热更新。<br>首先用一个变量<code>isRoot</code>判断是否是根<code>module</code>，然后通过<code>ModuleCollection</code>类的<code>getNamespace</code>获取当前路径的命名空间，这里提一下<code>Vuex</code>里面命名空间的概念：</p><blockquote><p>默认情况下，模块内部的 action、mutation 和 getter 是注册在全局命名空间的——这样使得多个模块能够对同一 mutation 或 action 作出响应。如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。<br>例如：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    account: &#123;</span><br><span class="line">      namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 模块内容（module assets）</span></span><br><span class="line">      state: &#123; ... &#125;, <span class="comment">// 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响</span></span><br><span class="line">      getters: &#123;</span><br><span class="line">        isAdmin () &#123; ... &#125; <span class="comment">// -&gt; getters['account/isAdmin']</span></span><br><span class="line">      &#125;,</span><br><span class="line">      actions: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; dispatch('account/login')</span></span><br><span class="line">      &#125;,</span><br><span class="line">      mutations: &#123;</span><br><span class="line">        login () &#123; ... &#125; <span class="comment">// -&gt; commit('account/login')</span></span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 嵌套模块</span></span><br><span class="line">      modules: &#123;</span><br><span class="line">        <span class="comment">// 继承父模块的命名空间</span></span><br><span class="line">        myPage: &#123;</span><br><span class="line">          state: &#123; ... &#125;,</span><br><span class="line">          getters: &#123;</span><br><span class="line">            profile () &#123; ... &#125; <span class="comment">// -&gt; getters['account/profile']</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步嵌套命名空间</span></span><br><span class="line">        posts: &#123;</span><br><span class="line">          namespaced: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">          state: &#123; ... &#125;,</span><br><span class="line">          getters: &#123;</span><br><span class="line">            popular () &#123; ... &#125; <span class="comment">// -&gt; getters['account/posts/popular']</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>回到<code>installModule</code>方法，我么可以看一下根据<code>path</code>来获取<code>namespace</code>的方法实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getNamespace (path) &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="built_in">module</span> = <span class="keyword">this</span>.root</span><br><span class="line">   <span class="keyword">return</span> path.reduce(<span class="function">(<span class="params">namespace, key</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">module</span> = <span class="built_in">module</span>.getChild(key)</span><br><span class="line">     <span class="keyword">return</span> namespace + (<span class="built_in">module</span>.namespaced ? key + <span class="string">'/'</span> : <span class="string">''</span>)</span><br><span class="line">   &#125;, <span class="string">''</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>从根<code>module</code>开始，通过<code>reduce</code>方法沿着<code>path</code>一层层查找子<code>module</code>，然后如果发现该<code>module</code>配置了<code>namespaced</code>，就把该<code>path</code>拼接到<code>namespace</code>后面，最后返回完整的路径。<br>接下来如果该<code>module</code>配置了<code>namespaced</code>，则把该<code>module</code>的<code>namespace</code>和<code>module</code>本身一一对应存储到<code>_modulesNamespaceMap</code>对象里面方便后续查找：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将module的命名空间和module本身一一对应存储在_modulesNamespaceMap对象里面方便后续查找</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.namespaced) &#123;</span><br><span class="line">  store._modulesNamespaceMap[namespace] = <span class="built_in">module</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>紧接着是非<code>root module</code>下的模块<code>state</code>初始化逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// set state</span></span><br><span class="line"><span class="keyword">if</span> (!isRoot &amp;&amp; !hot) &#123;</span><br><span class="line">  <span class="keyword">const</span> parentState = getNestedState(rootState, path.slice(<span class="number">0</span>, <span class="number">-1</span>))</span><br><span class="line">  <span class="keyword">const</span> moduleName = path[path.length - <span class="number">1</span>]</span><br><span class="line">  store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    Vue.set(parentState, moduleName, <span class="built_in">module</span>.state)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先通过<code>getNestedState</code>获取父模块的<code>state</code>，这个方法的实现大同小异，都是通过<code>reduce</code>函数一层层查找到子模块的<code>state</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNestedState</span> (<span class="params">state, path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.length</span><br><span class="line">    ? path.reduce(<span class="function">(<span class="params">state, key</span>) =&gt;</span> state[key], state)</span><br><span class="line">    : state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随后我们拿到子<code>module</code>的名称，调用<code>store</code>对象的<code>_withCommit</code>方法，这个方法里面的函数执行的操作是给父模块的<code>state</code>添加一个名字是<code>module</code>的名称的响应式属性，看一下这个方法的作用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">_withCommit (fn) &#123;</span><br><span class="line">    <span class="keyword">const</span> committing = <span class="keyword">this</span>._committing</span><br><span class="line">    <span class="keyword">this</span>._committing = <span class="literal">true</span></span><br><span class="line">    fn()</span><br><span class="line">    <span class="keyword">this</span>._committing = committing</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>_committing</code>的初始值为<code>false</code>，用来判断是否是通过<code>mutation</code>来更改的<code>state</code>，因为在严格模式下，无论何时发生了状态变更且不是由<code>mutation</code>函数引起的，将会抛出错误，在<code>Store.js</code>的源码中有相关代码体现这一点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">if</span> (store.strict) &#123;</span><br><span class="line">  enableStrictMode(store)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enableStrictMode</span> (<span class="params">store</span>) </span>&#123;</span><br><span class="line">  store._vm.$watch(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>._data.$$state &#125;, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      assert(store._committing, <span class="string">`do not mutate vuex store state outside mutation handlers.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123; <span class="attr">deep</span>: <span class="literal">true</span>, <span class="attr">sync</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>store._vm</code>是一个在<code>Store.js</code>内置的<code>Vue</code>对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">store._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    $$state: state</span><br><span class="line">  &#125;,</span><br><span class="line">  computed</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后通过<code>Vue</code>的实例方法<code>$watch</code>监听每一次<code>state</code>的变化，通过断言判断当前<code>state</code>的变化是否是通过提交一个<code>mutation</code>来引起的，不是的话就报错<code>do not mutate vuex store state outside mutation handlers</code>。</p><p>初始化非<code>root module</code>下的<code>state</code>之后下一步操作是构造一个当前<code>module</code>的上下文环境：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> local = <span class="built_in">module</span>.context = makeLocalContext(store, namespace, path)</span><br></pre></td></tr></table></figure><p><code>makeLocalContext</code>支持3个参数，分别是<code>root store</code>、当前<code>module</code>的<code>namespace</code>以及当前<code>module</code>的<code>path</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * make localized dispatch, commit, getters and state</span></span><br><span class="line"><span class="comment"> * if there is no namespace, just use root ones</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLocalContext</span> (<span class="params">store, namespace, path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> noNamespace = namespace === <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> local = &#123;</span><br><span class="line">    dispatch: noNamespace ? store.dispatch : <span class="function">(<span class="params">_type, _payload, _options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> args = unifyObjectStyle(_type, _payload, _options)</span><br><span class="line">      <span class="keyword">const</span> &#123; payload, options &#125; = args</span><br><span class="line">      <span class="keyword">let</span> &#123; type &#125; = args</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!options || !options.root) &#123;</span><br><span class="line">        type = namespace + type</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !store._actions[type]) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown local action type: <span class="subst">$&#123;args.type&#125;</span>, global type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> store.dispatch(type, payload)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    commit: noNamespace ? store.commit : <span class="function">(<span class="params">_type, _payload, _options</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> args = unifyObjectStyle(_type, _payload, _options)</span><br><span class="line">      <span class="keyword">const</span> &#123; payload, options &#125; = args</span><br><span class="line">      <span class="keyword">let</span> &#123; type &#125; = args</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!options || !options.root) &#123;</span><br><span class="line">        type = namespace + type</span><br><span class="line">        <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp; !store._mutations[type]) &#123;</span><br><span class="line">          <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown local mutation type: <span class="subst">$&#123;args.type&#125;</span>, global type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      store.commit(type, payload, options)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getters and state object must be gotten lazily</span></span><br><span class="line">  <span class="comment">// because they will be changed by vm update</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperties(local, &#123;</span><br><span class="line">    getters: &#123;</span><br><span class="line">      <span class="keyword">get</span>: noNamespace</span><br><span class="line">        ? () =&gt; store.getters</span><br><span class="line">        : () =&gt; makeLocalGetters(store, namespace)</span><br><span class="line">    &#125;,</span><br><span class="line">    state: &#123;</span><br><span class="line">      <span class="keyword">get</span>: () =&gt; getNestedState(store.state, path)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return local</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过一个变量<code>noNamespace</code>判断<code>module</code>是否配置了<code>namespaced</code>属性，然后构建一个<code>local</code>对象，这个对象包含了<code>commit</code>和<code>dispatch</code>方法，两个方法定义过程差不多，以<code>commit</code>为例，如果没有<code>namespaced</code>属性，这个<code>commit</code>直接指向了<code>store.commit</code>，否则构建一个函数，这个函数首先会对传入的参数顺序进行格式化，<code>unifyObjectStyle</code>方法兼容了载荷和对象风格的两种提交方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unifyObjectStyle</span> (<span class="params">type, payload, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isObject(type) &amp;&amp; type.type) &#123;</span><br><span class="line">    options = payload</span><br><span class="line">    payload = type</span><br><span class="line">    type = type.type</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    assert(<span class="keyword">typeof</span> type === <span class="string">'string'</span>, <span class="string">`expects string as the type, but found <span class="subst">$&#123;<span class="keyword">typeof</span> type&#125;</span>.`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; type, payload, options &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是对象风格的提交方式则对参数位置进行调整，然后返回一个调整位置后的对象，如果没有在<code>commit</code>方法里面设置<code>root：true</code>参数，则将<code>type</code>和<code>namespace</code>拼接之后执行<code>commit</code>方法，如果设置了<code>root：true</code>意味着允许在命名空间模块里提交根的<code>mutation</code>。</p><p>构建完<code>local</code>对象后会在<code>local</code>对象上定义两个属性<code>getters</code>和<code>state</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getters and state object must be gotten lazily</span></span><br><span class="line"><span class="comment">// because they will be changed by vm update</span></span><br><span class="line"><span class="built_in">Object</span>.defineProperties(local, &#123;</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="keyword">get</span>: noNamespace</span><br><span class="line">      ? () =&gt; store.getters</span><br><span class="line">      : () =&gt; makeLocalGetters(store, namespace)</span><br><span class="line">  &#125;,</span><br><span class="line">  state: &#123;</span><br><span class="line">    <span class="keyword">get</span>: () =&gt; getNestedState(store.state, path)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>state</code>的获取比较简单，就是根据<code>root state</code>和当前<code>module</code>的<code>path</code>获取该<code>module</code>的<code>state</code>，我们看<code>getters</code>的实现，如果没有<code>namespace</code>，直接返回<code>root store</code>的<code>getters</code>，否则调用<code>makeLocalGetters</code>获取对应<code>namespace</code>的<code>getters</code>，看一下<code>makeLocalGetters</code>方法的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeLocalGetters</span> (<span class="params">store, namespace</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> gettersProxy = &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> splitPos = namespace.length</span><br><span class="line">  <span class="built_in">Object</span>.keys(store.getters).forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// skip if the target getter is not match this namespace</span></span><br><span class="line">    <span class="keyword">if</span> (type.slice(<span class="number">0</span>, splitPos) !== namespace) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// extract local getter type</span></span><br><span class="line">    <span class="keyword">const</span> localType = type.slice(splitPos)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Add a port to the getters proxy.</span></span><br><span class="line">    <span class="comment">// Define as getter property because</span></span><br><span class="line">    <span class="comment">// we do not want to evaluate the getters in this time.</span></span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(gettersProxy, localType, &#123;</span><br><span class="line">      <span class="keyword">get</span>: () =&gt; store.getters[type],</span><br><span class="line">      enumerable: true</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  return gettersProxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法对<code>this.getters</code>上所有的可玫举属性进行遍历，然后截取<code>type</code>的包含<code>namespace</code>的部分和传入的<code>namespace</code>进行对比，找到后截取<code>type</code>里面的后半部分，也就是不包含<code>namespace</code>的部分，然后定义了<code>gettersProxy</code>的<code>get</code>属性并将其返回。</p><p>回到<code>installModule</code>方法，在完成构建<code>local</code>之后，会循环遍历<code>module</code>中定义的<code>mutation</code>、<code>action</code>、<code>getters</code>然后执行注册逻辑，这几个操作都差不多，我们看一个<code>mutation</code>的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="built_in">module</span>.forEachMutation(<span class="function">(<span class="params">mutation, key</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">const</span> namespacedType = namespace + key</span><br><span class="line">   registerMutation(store, namespacedType, mutation, local)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">forEachMutation (fn) &#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>._rawModule.mutations) &#123;</span><br><span class="line">     forEachValue(<span class="keyword">this</span>._rawModule.mutations, fn)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">forEachValue</span> (<span class="params">obj, fn</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 将对象里面的每一项组合成数组</span></span><br><span class="line">   <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> fn(obj[key], key))</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">registerMutation</span> (<span class="params">store, type, handler, local</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">const</span> entry = store._mutations[type] || (store._mutations[type] = [])</span><br><span class="line">   entry.push(<span class="function"><span class="keyword">function</span> <span class="title">wrappedMutationHandler</span> (<span class="params">payload</span>) </span>&#123;</span><br><span class="line">     handler.call(store, local.state, payload)</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>实际上就是给<code>root store</code>的<code>_mutations</code>对象的对应<code>type`</code>push<code>一个处理函数，这个函数调用时候会将</code>handler<code>的</code>this<code>指向</code>root store<code>。在</code>installModule<code>的最后会循环遍历子</code>module<code>然后执行子</code>module<code>的</code>installModule`方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.forEachChild(<span class="function">(<span class="params">child, key</span>) =&gt;</span> &#123;</span><br><span class="line">    installModule(store, rootState, path.concat(key), child, hot)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>至此，<code>installModule</code>方法分析完毕</p><h4 id="初始化store-vm"><a href="#初始化store-vm" class="headerlink" title="初始化store vm"></a>初始化store vm</h4><p>这是实例化<code>Store</code>的最后一步，通过<code>resetStoreVM</code>方法初始化<code>vm</code>以及注册<code>_wrappedGetters</code>，其中有些代码上面分析过，这里先贴出全部相关代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetStoreVM</span> (<span class="params">store, state, hot</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> oldVm = store._vm</span><br><span class="line"></span><br><span class="line">  <span class="comment">// bind store public getters</span></span><br><span class="line">  store.getters = &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> wrappedGetters = store._wrappedGetters</span><br><span class="line">  <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">  forEachValue(wrappedGetters, (fn, key) =&gt; &#123;</span><br><span class="line">    <span class="comment">// use computed to leverage its lazy-caching mechanism</span></span><br><span class="line">    computed[key] = <span class="function"><span class="params">()</span> =&gt;</span> fn(store)</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class="line">      <span class="keyword">get</span>: () =&gt; store._vm[key],</span><br><span class="line">      enumerable: true // for local getters</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // use a Vue instance to store the state tree</span><br><span class="line">  // suppress warnings just in case the user has added</span><br><span class="line">  // some funky global mixins</span><br><span class="line">  const silent = Vue.config.silent</span><br><span class="line">  Vue.config.silent = true</span><br><span class="line">  store._vm = new Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">      $$state: state</span><br><span class="line">    &#125;,</span><br><span class="line">    computed</span><br><span class="line">  &#125;)</span><br><span class="line">  Vue.config.silent = silent</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enable strict mode for new vm</span></span><br><span class="line">  <span class="keyword">if</span> (store.strict) &#123;</span><br><span class="line">    enableStrictMode(store)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (oldVm) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hot) &#123;</span><br><span class="line">      <span class="comment">// dispatch changes in all subscribed watchers</span></span><br><span class="line">      <span class="comment">// to force getter re-evaluation for hot reloading.</span></span><br><span class="line">      store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        oldVm._data.$$state = <span class="literal">null</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> oldVm.$destroy())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。这里首先遍历<code>wrappedGetters</code>得到对应的<code>fn</code>组成的数组，然后将其定义为一个个计算属性<code>computed[key] = () =&gt; fn(store)</code>，<code>fn(store)</code>其实就是执行了下面的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">store._wrappedGetters[type] = <span class="function"><span class="keyword">function</span> <span class="title">wrappedGetter</span> (<span class="params">store</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rawGetter(</span><br><span class="line">      local.state, <span class="comment">// local state</span></span><br><span class="line">      local.getters, <span class="comment">// local getters</span></span><br><span class="line">      store.state, <span class="comment">// root state</span></span><br><span class="line">      store.getters <span class="comment">// root getters</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>_随后给<code>store.getters</code>新增属性，访问这些属性也就是使用<code>this.store.getters</code>的时候拿到的是<code>key</code>对应的计算属性的值:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class="line">      <span class="keyword">get</span>: () =&gt; store._vm[key],</span><br><span class="line">      enumerable: true // for local getters</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>执行这个<code>getter</code>对应的函数等价于执行了<code>computed[key] = () =&gt; fn(store)</code>这个计算属性对应的函数，由于这个函数依赖了<code>store</code>，所以根据计算属性的特性在<code>store</code>变化的时候这个<code>getter</code>也会得到相应的更新。<br>方法的最后，处理了<code>hotUpdate</code>时候的逻辑，即销毁旧的实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hotUpdate (newOptions) &#123;</span><br><span class="line">    <span class="keyword">this</span>._modules.update(newOptions)</span><br><span class="line">    resetStore(<span class="keyword">this</span>, <span class="literal">true</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resetStoreVM</span> (<span class="params">store, state, hot</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> oldVm = store._vm</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">if</span> (oldVm) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hot) &#123;</span><br><span class="line">      <span class="comment">// dispatch changes in all subscribed watchers</span></span><br><span class="line">      <span class="comment">// to force getter re-evaluation for hot reloading.</span></span><br><span class="line">      store._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        oldVm._data.$$state = <span class="literal">null</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    Vue.nextTick(<span class="function"><span class="params">()</span> =&gt;</span> oldVm.$destroy())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，整个<code>Store.js</code>的主题初始化流程已经分析完毕，下面分析一写内置函数以及辅助函数的实现</p><h4 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h4><p>更改<code>Vuex</code>的<code>store</code>中的状态的唯一方法是提交<code>mutation</code>。<code>Vuex</code>中的<code>mutation</code>非常类似于事件：每个<code>mutation</code>都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (state) &#123;</span><br><span class="line">      <span class="comment">// 变更状态</span></span><br><span class="line">      state.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们不能直接调用一个<code>mutation handler</code>，需要以相应的<code>type</code>调用<code>store.commit</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.commit(<span class="string">'increment'</span>)</span><br></pre></td></tr></table></figure><p>看一下<code>commit</code>方法相关的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">commit (_type, _payload, _options) &#123;</span><br><span class="line">    <span class="comment">// 将对象风格的commit格式化</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      type,</span><br><span class="line">      payload,</span><br><span class="line">      options</span><br><span class="line">    &#125; = unifyObjectStyle(_type, _payload, _options)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mutation = &#123; type, payload &#125;</span><br><span class="line">    <span class="comment">// 通过mutation type找到对应的回调函数handler并执行</span></span><br><span class="line">    <span class="keyword">const</span> entry = <span class="keyword">this</span>._mutations[type]</span><br><span class="line">    <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">      <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown mutation type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>._withCommit(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      entry.forEach(<span class="function"><span class="keyword">function</span> <span class="title">commitIterator</span> (<span class="params">handler</span>) </span>&#123;</span><br><span class="line">        handler(payload)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 通知所有的订阅者</span></span><br><span class="line">    <span class="keyword">this</span>._subscribers.forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub(mutation, <span class="keyword">this</span>.state))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">      options &amp;&amp; options.silent</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="built_in">console</span>.warn(</span><br><span class="line">        <span class="string">`[vuex] mutation type: <span class="subst">$&#123;type&#125;</span>. Silent option has been removed. `</span> +</span><br><span class="line">        <span class="string">'Use the filter functionality in the vue-devtools'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>首先同样是将载荷方式和对象方式的<code>commit</code>格式化，然后找到<code>type</code>对应的<code>mutation</code>，在确保数据更新方式正确的情况下循环执行<code>mutation</code>里面的方法，然后所有<code>mutation</code>相关的订阅者。</p><p><code>dispatch</code>的逻辑要稍微复杂一些，因为通过<code>dispatch</code>分发<code>action</code>是可以执行异步操作的，然后在<code>action</code>内部执行异步操作后再<code>commit</code>一个<code>mutation</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">dispatch (_type, _payload) &#123;</span><br><span class="line">   <span class="comment">// 对象风格的dispatch格式化</span></span><br><span class="line">   <span class="keyword">const</span> &#123;</span><br><span class="line">     type,</span><br><span class="line">     payload</span><br><span class="line">   &#125; = unifyObjectStyle(_type, _payload)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> action = &#123; type, payload &#125;</span><br><span class="line">   <span class="keyword">const</span> entry = <span class="keyword">this</span>._actions[type]</span><br><span class="line">   <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">     <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.error(<span class="string">`[vuex] unknown action type: <span class="subst">$&#123;type&#125;</span>`</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 从 3.1.0 起，subscribeAction 也可以指定订阅处理函数的被调用时机应该在一个 action 分发之前还是之后 (默认行为是之前)</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">this</span>._actionSubscribers</span><br><span class="line">       .filter(<span class="function"><span class="params">sub</span> =&gt;</span> sub.before)</span><br><span class="line">       .forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub.before(action, <span class="keyword">this</span>.state))</span><br><span class="line">   &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">     <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">       <span class="built_in">console</span>.warn(<span class="string">`[vuex] error in before action subscribers: `</span>)</span><br><span class="line">       <span class="built_in">console</span>.error(e)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> result = entry.length &gt; <span class="number">1</span></span><br><span class="line">     ? <span class="built_in">Promise</span>.all(entry.map(<span class="function"><span class="params">handler</span> =&gt;</span> handler(payload)))</span><br><span class="line">     : entry[<span class="number">0</span>](payload)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">       <span class="keyword">this</span>._actionSubscribers</span><br><span class="line">         .filter(<span class="function"><span class="params">sub</span> =&gt;</span> sub.after)</span><br><span class="line">         .forEach(<span class="function"><span class="params">sub</span> =&gt;</span> sub.after(action, <span class="keyword">this</span>.state))</span><br><span class="line">     &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">       <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">         <span class="built_in">console</span>.warn(<span class="string">`[vuex] error in after action subscribers: `</span>)</span><br><span class="line">         <span class="built_in">console</span>.error(e)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> res</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>同样是先格式化参数，然后<code>type</code>对应的<code>action</code>，先判断该<code>type</code>是否存在，然后执行<code>_actionSubscribers</code>里面在<code>action</code>分发之前的回调，这是3.1.0开始有的新功能，可以指定订阅处理函数的被调用时机应该在一个 action 分发之前还是之后 (默认行为是之前)，这个功能多用于插件使用，然后分发<code>action</code>，如果同一个<code>type</code>的<code>action</code>有多个就用<code>Promise.all</code>去分发，否则直接传入载荷，在执行分发<code>action</code>完毕之后执行<code>_actionSubscribers</code>里面在<code>action</code>分发之后的回调，至此完成一次<code>dispatch</code>。</p><h4 id="辅助函数"><a href="#辅助函数" class="headerlink" title="辅助函数"></a>辅助函数</h4><p>为了解决重复代码的冗余性，<code>Vuex</code>对外提供了一些工具函数，这些工具函数会自动帮我们生成计算属性减少工作量，这些函数都位于<code>src/helpers.js</code>目录下，这里可以分析一下<code>mapState</code>的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Reduce the code which written in Vue.js for getting the state.</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; [namespace] - Module's namespace</span></span><br><span class="line"><span class="comment"> * @param &#123;Object|Array&#125; states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mapState = normalizeNamespace(<span class="function">(<span class="params">namespace, states</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> res = &#123;&#125;</span><br><span class="line">  normalizeMap(states).forEach(<span class="function">(<span class="params">&#123; key, val &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    res[key] = <span class="function"><span class="keyword">function</span> <span class="title">mappedState</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> state = <span class="keyword">this</span>.$store.state</span><br><span class="line">      <span class="keyword">let</span> getters = <span class="keyword">this</span>.$store.getters</span><br><span class="line">      <span class="keyword">if</span> (namespace) &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="built_in">module</span> = getModuleByNamespace(<span class="keyword">this</span>.$store, <span class="string">'mapState'</span>, namespace)</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">module</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        state = <span class="built_in">module</span>.context.state</span><br><span class="line">        getters = <span class="built_in">module</span>.context.getters</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> val === <span class="string">'function'</span></span><br><span class="line">        ? val.call(<span class="keyword">this</span>, state, getters)</span><br><span class="line">        : state[val]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// mark vuex getter for devtools</span></span><br><span class="line">    res[key].vuex = <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>mapState</code>函数可以传递两个参数，第一个参数是可选参数，代表命名空间字符串，对象形式的第二个参数的成员可以是一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mapState(namespace?: string, <span class="attr">map</span>: <span class="built_in">Array</span>&lt;string&gt; | <span class="built_in">Object</span>&lt;string | <span class="function"><span class="keyword">function</span>&gt;): <span class="title">Object</span></span></span><br></pre></td></tr></table></figure><p>执行<code>mapState</code>其实就是执行<code>normalizeNamespace</code>返回的函数，这个函数的作用也很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; fn</span></span><br><span class="line"><span class="comment"> * @return &#123;Function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeNamespace</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">namespace, map</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> namespace !== <span class="string">'string'</span>) &#123;</span><br><span class="line">      map = namespace</span><br><span class="line">      namespace = <span class="string">''</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (namespace.charAt(namespace.length - <span class="number">1</span>) !== <span class="string">'/'</span>) &#123;</span><br><span class="line">      namespace += <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn(namespace, map)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断是否传入了<code>namespace</code>参数，没有的话，将<code>namespace</code>赋值给<code>map</code>参数，如果传了<code>namespace</code>则拼接好路径，最后将处理好的<code>map</code>作为<code>states</code>传入处理函数。这个函数首先会对<code>states</code>执行<code>normalizeMap</code>处理，这个方法的作用是把我们传入<code>mapState</code>的数组/对象统一转换成一个内部元素都是形如<code>{ key: &#39;a&#39;, val: 1 }</code>的数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">normalizeMap</span> (<span class="params">map</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(map)</span><br><span class="line">    ? map.map(<span class="function"><span class="params">key</span> =&gt;</span> (&#123; key, <span class="attr">val</span>: key &#125;))</span><br><span class="line">    : <span class="built_in">Object</span>.keys(map).map(<span class="function"><span class="params">key</span> =&gt;</span> (&#123; key, <span class="attr">val</span>: map[key] &#125;))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后循环处理数组，结构每一项的<code>key</code>和<code>val</code>，用一个空对象存储，<code>key</code>作为这个空对象<code>res</code>的<code>key</code>，<code>key</code>对应的值是一个名为<code>mappedState</code>的函数，在函数内部获取到了<code>state</code>、<code>getters</code>，然后再判断数组的<code>val</code>是否是一个函数，是的话直接调用，并传入<code>state</code>和<code>getters</code>，否则直接返回<code>state[val]</code>。最后将构建好的<code>res</code>对象返回，通过对象展开运算符将这个<code>res</code>填充到<code>computed</code>中。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>在<code>Vuex</code>的模式下，我们的组件树构成了一个巨大的视图，无论该组件在树的哪个位置，它都可以获取状态或者触发状态更新的行为，通过定义和隔离状态管理中的各种概念并通过强制规则维持视图和状态间的独立性，我们的代码将会变得更结构化且易维护：</p><p><img src="https://user-images.githubusercontent.com/11991572/55219071-e2eacf00-523e-11e9-9769-626db78eed40.png" alt="Vuex"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不管是&lt;code&gt;Vue&lt;/code&gt;框架还是&lt;code&gt;React&lt;/code&gt;框架，在实际开发使用的过程中我们都会有很多情况下都会有状态共享的需求，这些状态共享会发生在父子组件和兄弟组件之间，我们为了维护这些状态经常会写很多非必要性的代码，这些代码一多起来，维护就会变得很困难，正是由于有这种需求，人们开发了许多相关的库，从&lt;code&gt;Flux&lt;/code&gt;到&lt;code&gt;Redux&lt;/code&gt;再到&lt;code&gt;Vuex&lt;/code&gt;，这些库的大致思路都是：将共享的状态抽离出来，通过定义和隔离状态管理中的各种概念并强制遵守一定的规则，达到代码结构化和易维护的目的。&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://www.limuyang.cc/tags/javascript/"/>
    
      <category term="源码阅读" scheme="https://www.limuyang.cc/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="vuex" scheme="https://www.limuyang.cc/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>阅读分析snabbdom源码</title>
    <link href="https://www.limuyang.cc/2019/03/06/%E9%98%85%E8%AF%BB%E5%88%86%E6%9E%90snabbdom%E6%BA%90%E7%A0%81/"/>
    <id>https://www.limuyang.cc/2019/03/06/阅读分析snabbdom源码/</id>
    <published>2019-03-06T22:20:26.000Z</published>
    <updated>2019-08-16T09:03:51.843Z</updated>
    
    <content type="html"><![CDATA[<p>尤大在官宣Vue 2.0的时候这么说过：</p><blockquote><p>渲染层基于一个轻量级的 Virtual DOM 实现进行了重写，该 Virtual DOM 实现 fork 自 snabbdom。新的渲染层相比 v1 带来了巨大的性能提升，也让 Vue 2.0 成为了最快速的框架之一。<br>那么对于想要深入了解Vue源码的人来说先深入了解一下snabbdom的实现是有必要的<br><a id="more"></a></p></blockquote><h4 id="什么是Virtual-DOM"><a href="#什么是Virtual-DOM" class="headerlink" title="什么是Virtual DOM"></a>什么是Virtual DOM</h4><ul><li>Virtual DOM使用JavaScript对象来描述节点，只保留一些有用的信息，可以更轻量的描述DOM树的结构</li><li>将原本需要在真实DOM进行的创建节点,删除节点,添加节点等一系列复杂的DOM操作全部放到Vritual DOM中进行<br>比如在我们的<code>snabbdom</code>中就是用这样的方式来定义一个<code>VNODE</code>：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface VNode &#123;</span><br><span class="line">  sel: string | <span class="literal">undefined</span>;</span><br><span class="line">  data: VNodeData | <span class="literal">undefined</span>;</span><br><span class="line">  children: <span class="built_in">Array</span>&lt;VNode | string&gt; | <span class="literal">undefined</span>;</span><br><span class="line">  elm: Node | <span class="literal">undefined</span>;</span><br><span class="line">  text: string | <span class="literal">undefined</span>;</span><br><span class="line">  key: Key | <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> interface VNodeData &#123;</span><br><span class="line">  props?: Props;</span><br><span class="line">  attrs?: Attrs;</span><br><span class="line">  class?: Classes;</span><br><span class="line">  style?: VNodeStyle;</span><br><span class="line">  dataset?: Dataset;</span><br><span class="line">  on?: On;</span><br><span class="line">  hero?: Hero;</span><br><span class="line">  attachData?: AttachData;</span><br><span class="line">  hook?: Hooks;</span><br><span class="line">  key?: Key;</span><br><span class="line">  ns?: string; <span class="comment">// for SVGs</span></span><br><span class="line">  fn?: <span class="function"><span class="params">()</span> =&gt;</span> VNode; <span class="comment">// for thunks</span></span><br><span class="line">  args?: <span class="built_in">Array</span>&lt;any&gt;; <span class="comment">// for thunks</span></span><br><span class="line">  [key: string]: any; <span class="comment">// for any other 3rd party module</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>既然DOM树信息可以通过JavaScript对象来表示，反过来我们就可以用这个JavaScript对象还原构建一棵真正的DOM树，当状态变化的时候重新渲染这个 JavaScript 的对象结构，然后将两个JavScript对象进行对比，记录差异，然后把它们应用在真实的DOM树上，这便是<code>diff</code>算法</p><h4 id="分析源码"><a href="#分析源码" class="headerlink" title="分析源码"></a>分析源码</h4><p>从官方给的Demo入手<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> snabbdom = <span class="built_in">require</span>(<span class="string">'snabbdom'</span>);</span><br><span class="line"><span class="keyword">var</span> patch = snabbdom.init([ <span class="comment">// Init patch function with chosen modules</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/class'</span>).default, <span class="comment">// makes it easy to toggle classes</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/props'</span>).default, <span class="comment">// for setting properties on DOM elements</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/style'</span>).default, <span class="comment">// handles styling on elements with support for animations</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/eventlisteners'</span>).default, <span class="comment">// attaches event listeners</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">require</span>(<span class="string">'snabbdom/h'</span>).default; <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> container = <span class="built_in">document</span>.getElementById(<span class="string">'container'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vnode = h(<span class="string">'div#container.two.classes'</span>, &#123;<span class="attr">on</span>: &#123;<span class="attr">click</span>: someFn&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">fontWeight</span>: <span class="string">'bold'</span>&#125;&#125;, <span class="string">'This is bold'</span>),</span><br><span class="line">  <span class="string">' and this is just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123;<span class="attr">props</span>: &#123;<span class="attr">href</span>: <span class="string">'/foo'</span>&#125;&#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Patch into empty DOM element – this modifies the DOM as a side effect</span></span><br><span class="line">patch(container, vnode);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newVnode = h(<span class="string">'div#container.two.classes'</span>, &#123;<span class="attr">on</span>: &#123;<span class="attr">click</span>: anotherEventHandler&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'span'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">fontWeight</span>: <span class="string">'normal'</span>, <span class="attr">fontStyle</span>: <span class="string">'italic'</span>&#125;&#125;, <span class="string">'This is now italic type'</span>),</span><br><span class="line">  <span class="string">' and this is still just normal text'</span>,</span><br><span class="line">  h(<span class="string">'a'</span>, &#123;<span class="attr">props</span>: &#123;<span class="attr">href</span>: <span class="string">'/bar'</span>&#125;&#125;, <span class="string">'I\'ll take you places!'</span>)</span><br><span class="line">]);</span><br><span class="line"><span class="comment">// Second `patch` invocation</span></span><br><span class="line">patch(vnode, newVnode); <span class="comment">// Snabbdom efficiently updates the old view to the new state</span></span><br></pre></td></tr></table></figure></p><p>可以看到<code>snabbdom</code>核心模块对外暴露一个<code>init</code>方法，这个方法接收一个数组，数组里面的每一项都是一个<code>module</code>，这些<code>module</code>的作用是扩展<code>snabbdom</code>生成复杂DOM的能力，可以根据自己的需求决定是否要引入对应的<code>module</code>，与此同时你也可以实现自己的<code>module</code>，打个比方，如果你的<code>vnode</code>节点不需要写入<code>listener</code>，你可以不引入<code>snabbdom/modules/eventlisteners</code>，调用<code>init</code>方法之后会返回一个<code>patch</code>函数，这个函数接收两个参数，第一个参数是一个<code>DOM</code>节点或者一个用于表示当前视图的<code>vnode</code>节点，第二个参数是表示即将要更新的视图的<code>vnode</code>节点，<code>patch</code>函数会根据传递的参数不同进行对应的<code>DOM</code>更新操作，接下来我们可以先看一下<code>init</code>函数的核心实现(为了理解方便暂时隐去函数内部的实现细节)：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> interface Module &#123;</span><br><span class="line">  pre: PreHook;</span><br><span class="line">  create: CreateHook;</span><br><span class="line">  update: UpdateHook;</span><br><span class="line">  destroy: DestroyHook;</span><br><span class="line">  remove: RemoveHook;</span><br><span class="line">  post: PostHook;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">modules: Array&lt;Partial&lt;Module&gt;&gt;, domApi?: DOMAPI</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// cbs 用于收集 module 中的 hook</span></span><br><span class="line">  <span class="keyword">let</span> i: number,</span><br><span class="line">    j: number,</span><br><span class="line">    cbs = &#123;&#125; <span class="keyword">as</span> ModuleHooks;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> api: DOMAPI = domApi !== <span class="literal">undefined</span> ? domApi : htmlDomApi;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 收集 module 中的 hook</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; hooks.length; ++i) &#123;</span><br><span class="line">    cbs[hooks[i]] = [];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; modules.length; ++j) &#123;</span><br><span class="line">      <span class="keyword">const</span> hook = modules[j][hooks[i]];</span><br><span class="line">      <span class="keyword">if</span> (hook !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        (cbs[hooks[i]] <span class="keyword">as</span> <span class="built_in">Array</span>&lt;any&gt;).push(hook);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">emptyNodeAt</span>(<span class="params">elm: Element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createRmCb</span>(<span class="params">childElm: Node, listeners: number</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建真正的 dom 节点</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">createElm</span>(<span class="params">vnode: VNode, insertedVnodeQueue: VNodeQueue</span>): <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">addVnodes</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">    before: Node | null,</span></span></span><br><span class="line"><span class="function"><span class="params">    vnodes: Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">    startIdx: number,</span></span></span><br><span class="line"><span class="function"><span class="params">    endIdx: number,</span></span></span><br><span class="line"><span class="function"><span class="params">    insertedVnodeQueue: VNodeQueue</span></span></span><br><span class="line"><span class="function"><span class="params">  </span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用 destory hook</span></span><br><span class="line">  <span class="comment">// 如果存在 children 递归调用</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">invokeDestroyHook</span>(<span class="params">vnode: VNode</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">removeVnodes</span>(<span class="params">parentElm: Node, vnodes: Array&lt;VNode&gt;, startIdx: number, endIdx: number</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params">parentElm: Node, oldCh: Array&lt;VNode&gt;, newCh: Array&lt;VNode&gt;, insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span>(<span class="params">oldVnode: VNode, vnode: VNode, insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">oldVnode: VNode | Element, vnode: VNode</span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到首先<code>init</code>方法会接收两个参数，一个由<code>module</code>组成的数组，以及一个可选参数<code>domApi</code>，默认是使用预定义的一些和<code>DOM</code>操作相关的<code>API</code>，接下来会通过循环遍历收集<code>modules</code>中的<code>hook</code>，存储到<code>cbs</code>对象中，以便在恰当的时机对<code>DOM</code>节点进行一些操作，举个例子，我们看一下<code>class</code>这个<code>module</code>的源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateClass</span>(<span class="params">oldVnode, vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cur, name, elm = vnode.elm, oldClass = oldVnode.data.class, klass = vnode.data.class;</span><br><span class="line">    <span class="keyword">if</span> (!oldClass &amp;&amp; !klass)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (oldClass === klass)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    oldClass = oldClass || &#123;&#125;;</span><br><span class="line">    klass = klass || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> oldClass) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!klass[name]) &#123;</span><br><span class="line">            elm.classList.remove(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (name <span class="keyword">in</span> klass) &#123;</span><br><span class="line">        cur = klass[name];</span><br><span class="line">        <span class="keyword">if</span> (cur !== oldClass[name]) &#123;</span><br><span class="line">            elm.classList[cur ? <span class="string">'add'</span> : <span class="string">'remove'</span>](name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">exports.classModule = &#123; <span class="attr">create</span>: updateClass, <span class="attr">update</span>: updateClass &#125;;</span><br><span class="line">exports.default = exports.classModule;</span><br></pre></td></tr></table></figure></p><p>很明显可以看出这个<code>module</code>的作用是对比新旧两个<code>vnode</code>节点，更新<code>classname</code>，执行的时机分别是在调用<code>create</code>和<code>update</code>两种<code>hook</code>的时候，其他<code>module</code>也差不多，这里不展开分析。<br>下面几个都是功能型函数略过不看，直接看返回的<code>patch</code>函数</p><h4 id="patch函数"><a href="#patch函数" class="headerlink" title="patch函数"></a>patch函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于dom相关的更新</span></span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">patch</span>(<span class="params">oldVnode: VNode | Element, vnode: VNode</span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i: number, <span class="attr">elm</span>: Node, <span class="attr">parent</span>: Node;</span><br><span class="line">  <span class="keyword">const</span> insertedVnodeQueue: VNodeQueue = [];</span><br><span class="line">  <span class="comment">// 调用 module 中的 pre hook</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.pre.length; ++i) cbs.pre[i]();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isVnode(oldVnode)) &#123;</span><br><span class="line">    oldVnode = emptyNodeAt(oldVnode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断两个Vnode节点是否相同</span></span><br><span class="line">  <span class="keyword">if</span> (sameVnode(oldVnode, vnode)) &#123;</span><br><span class="line">    patchVnode(oldVnode, vnode, insertedVnodeQueue);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    elm = oldVnode.elm <span class="keyword">as</span> Node;</span><br><span class="line">    parent = api.parentNode(elm);</span><br><span class="line"></span><br><span class="line">    createElm(vnode, insertedVnodeQueue);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent !== <span class="literal">null</span>) &#123;</span><br><span class="line">      api.insertBefore(parent, vnode.elm <span class="keyword">as</span> Node, api.nextSibling(elm));</span><br><span class="line">      removeVnodes(parent, [oldVnode], <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; insertedVnodeQueue.length; ++i) &#123;</span><br><span class="line">    (((insertedVnodeQueue[i].data <span class="keyword">as</span> VNodeData).hook <span class="keyword">as</span> Hooks).insert <span class="keyword">as</span> any)(insertedVnodeQueue[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.post.length; ++i) cbs.post[i]();</span><br><span class="line">  <span class="keyword">return</span> vnode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>先通过<code>isVnode</code>方法来判断传入的第一个参数是不是<code>vnode</code>，如果不是的话通过<code>emptyNodeAt</code>方法来将其转换成<code>vnode</code>，这两个方法实现都比较简单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// isVnode</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isVnode</span>(<span class="params">vnode: any</span>): <span class="title">vnode</span> <span class="title">is</span> <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否具有sel属性</span></span><br><span class="line">  <span class="keyword">return</span> vnode.sel !== <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// emptyNodeAt</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">emptyNodeAt</span>(<span class="params">elm: Element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> id = elm.id ? <span class="string">'#'</span> + elm.id : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">const</span> c = elm.className ? <span class="string">'.'</span> + elm.className.split(<span class="string">' '</span>).join(<span class="string">'.'</span>) : <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">return</span> vnode(api.tagName(elm).toLowerCase() + id + c, &#123;&#125;, [], <span class="literal">undefined</span>, elm);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>看一眼vnode方法的实现：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">vnode</span>(<span class="params">sel: string | undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">                      data: any | undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">                      children: Array&lt;VNode | string&gt; | undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">                      text: string | undefined,</span></span></span><br><span class="line"><span class="function"><span class="params">                      elm: Element | Text | undefined</span>): <span class="title">VNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> key = data === <span class="literal">undefined</span> ? <span class="literal">undefined</span> : data.key;</span><br><span class="line">  <span class="keyword">return</span> &#123;<span class="attr">sel</span>: sel, <span class="attr">data</span>: data, <span class="attr">children</span>: children,</span><br><span class="line">          text: text, <span class="attr">elm</span>: elm, <span class="attr">key</span>: key&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着往下看，当两个需要被对比的节点都转化成了<code>vnode</code>之后，通过<code>sameVnode</code>方法判断两个<code>Vnode</code>节点是否相同：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sameVnode</span>(<span class="params">vnode1: VNode, vnode2: VNode</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> vnode1.key === vnode2.key &amp;&amp; vnode1.sel === vnode2.sel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里通过判断<code>key</code>和<code>sel</code>是否相同来判断是否是相同<code>vnode</code>节点，如果是两个相同的<code>vnode</code>节点，调用<code>patchVnode</code>方法来对比更新，如果不是，则通过<code>createElm</code>方法创建新的<code>DOM</code>节点，如果存在父节点，则通过<code>htmdomapi</code>里面的<code>insertBefore</code>方法插入新的<code>DOM</code>节点到子节点的末尾，然后通过<code>removeVnodes</code>移除旧节点完成更新，这里的关键方法是<code>patchVnode</code>和<code>createElm</code>，简单起见先看第二个。</p><h4 id="createElm"><a href="#createElm" class="headerlink" title="createElm"></a>createElm</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过vnode创建真正的dom节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElm</span>(<span class="params">vnode: VNode, insertedVnodeQueue: VNodeQueue</span>): <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i: any, data = vnode.data;</span><br><span class="line">  <span class="keyword">if</span> (data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(i = data.hook) &amp;&amp; isDef(i = i.init)) &#123;</span><br><span class="line">     <span class="comment">// 调用init hook</span></span><br><span class="line">      i(vnode);</span><br><span class="line">      data = vnode.data;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> children = vnode.children, sel = vnode.sel;</span><br><span class="line">  <span class="comment">// 如果是注释节点</span></span><br><span class="line">  <span class="keyword">if</span> (sel === <span class="string">'!'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">      vnode.text = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    vnode.elm = api.createComment(vnode.text <span class="keyword">as</span> string);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sel !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 解析sel</span></span><br><span class="line">    <span class="keyword">const</span> hashIdx = sel.indexOf(<span class="string">'#'</span>);</span><br><span class="line">    <span class="keyword">const</span> dotIdx = sel.indexOf(<span class="string">'.'</span>, hashIdx);</span><br><span class="line">    <span class="keyword">const</span> hash = hashIdx &gt; <span class="number">0</span> ? hashIdx : sel.length;</span><br><span class="line">    <span class="keyword">const</span> dot = dotIdx &gt; <span class="number">0</span> ? dotIdx : sel.length;</span><br><span class="line">    <span class="keyword">const</span> tag = hashIdx !== <span class="number">-1</span> || dotIdx !== <span class="number">-1</span> ? sel.slice(<span class="number">0</span>, <span class="built_in">Math</span>.min(hash, dot)) : sel;</span><br><span class="line">   <span class="comment">// 如果有ns属性说明是svg元素</span></span><br><span class="line">    <span class="keyword">const</span> elm = vnode.elm = isDef(data) &amp;&amp; isDef(i = (data <span class="keyword">as</span> VNodeData).ns) ? api.createElementNS(i, tag)</span><br><span class="line">                                                                             : api.createElement(tag);</span><br><span class="line">    <span class="comment">// 设置元素id</span></span><br><span class="line">    <span class="keyword">if</span> (hash &lt; dot) elm.setAttribute(<span class="string">'id'</span>, sel.slice(hash + <span class="number">1</span>, dot));</span><br><span class="line">    <span class="comment">// 设置元素classname</span></span><br><span class="line">    <span class="keyword">if</span> (dotIdx &gt; <span class="number">0</span>) elm.setAttribute(<span class="string">'class'</span>, sel.slice(dot + <span class="number">1</span>).replace(<span class="regexp">/\./g</span>, <span class="string">' '</span>));</span><br><span class="line">    <span class="comment">// 调用create hook</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.create.length; ++i) cbs.create[i](emptyNode, vnode);</span><br><span class="line">    <span class="comment">// 创建子元素节点</span></span><br><span class="line">    <span class="keyword">if</span> (is.array(children)) &#123;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; children.length; ++i) &#123;</span><br><span class="line">        <span class="keyword">const</span> ch = children[i];</span><br><span class="line">        <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">          api.appendChild(elm, createElm(ch <span class="keyword">as</span> VNode, insertedVnodeQueue));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (is.primitive(vnode.text)) &#123;</span><br><span class="line">      <span class="comment">// 文本节点 </span></span><br><span class="line">      api.appendChild(elm, api.createTextNode(vnode.text));</span><br><span class="line">    &#125;</span><br><span class="line">    i = (vnode.data <span class="keyword">as</span> VNodeData).hook; <span class="comment">// Reuse variable</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i)) &#123;</span><br><span class="line">      <span class="comment">// 调用节点的create hook</span></span><br><span class="line">      <span class="keyword">if</span> (i.create) i.create(emptyNode, vnode);</span><br><span class="line">     <span class="comment">// insert hook要等dom真正挂载的时候才会调用，这里先存储到数组里面</span></span><br><span class="line">      <span class="keyword">if</span> (i.insert) insertedVnodeQueue.push(vnode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 文本节点</span></span><br><span class="line">    vnode.elm = api.createTextNode(vnode.text <span class="keyword">as</span> string);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> vnode.elm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>DOM</code>的时候首先调用<code>vnode</code>节点的<code>init hook</code>，然后判断该<code>vnode</code>节点是注释节点/文本节点/带选择器节点的其中之一，至于为什么<code>sel === &#39;!&#39;</code>就说明是注释节点这里可以解释一下，<code>snabbdom</code>提供了<code>tovnode</code>方法来将一个<code>DOM</code>节点转换成<code>vnode</code>节点，大致用法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> snabbdom = <span class="built_in">require</span>(<span class="string">'snabbdom'</span>)</span><br><span class="line"><span class="keyword">var</span> patch = snabbdom.init([ <span class="comment">// Init patch function with chosen modules</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/class'</span>).default, <span class="comment">// makes it easy to toggle classes</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/props'</span>).default, <span class="comment">// for setting properties on DOM elements</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/style'</span>).default, <span class="comment">// handles styling on elements with support for animations</span></span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'snabbdom/modules/eventlisteners'</span>).default, <span class="comment">// attaches event listeners</span></span><br><span class="line">]);</span><br><span class="line"><span class="keyword">var</span> h = <span class="built_in">require</span>(<span class="string">'snabbdom/h'</span>).default; <span class="comment">// helper function for creating vnodes</span></span><br><span class="line"><span class="keyword">var</span> toVNode = <span class="built_in">require</span>(<span class="string">'snabbdom/tovnode'</span>).default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newVNode = h(<span class="string">'div'</span>, &#123;<span class="attr">style</span>: &#123;<span class="attr">color</span>: <span class="string">'#000'</span>&#125;&#125;, [</span><br><span class="line">  h(<span class="string">'h1'</span>, <span class="string">'Headline'</span>),</span><br><span class="line">  h(<span class="string">'p'</span>, <span class="string">'A paragraph'</span>),</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">patch(toVNode(<span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>)), newVNode)</span><br></pre></td></tr></table></figure></p><p>这个<code>tovnode</code>的源码里面有这么一段：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (api.isComment(node)) &#123;</span><br><span class="line">   text = api.getTextContent(node) <span class="keyword">as</span> string;</span><br><span class="line">   <span class="keyword">return</span> vnode(<span class="string">'!'</span>, &#123;&#125;, [], text, node <span class="keyword">as</span> any);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> vnode(<span class="string">''</span>, &#123;&#125;, [], <span class="literal">undefined</span>, node <span class="keyword">as</span> any);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>那么我们再找一下<code>isComment</code>方法做了什么：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isComment</span>(<span class="params">node: Node</span>): <span class="title">node</span> <span class="title">is</span> <span class="title">Comment</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> node.nodeType === <span class="number">8</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>节点类型常量里面type 8就是<code>Node.COMMENT_NODE</code>也就是注释节点</p><p>然后顺着源码我们这里主要看带选择器节点的创建，首先得到<code>tagname</code>、<code>class</code>、<code>id</code>，然后在根据是否有<code>ns</code>属性来决定通过<code>createElement</code>还是<code>createElementNS</code>来创建节点，紧接着如果存在<code>children</code>，循环遍历调用<code>createElm</code>方法创建子节点并挂载到父节点上面，<code>DOM</code>节点创建完毕之后调用相应的<code>hookl</code>即可。</p><h4 id="patchVnode"><a href="#patchVnode" class="headerlink" title="patchVnode"></a>patchVnode</h4><p><code>patchVnode</code>方法会对传入的两个<code>vnode</code>节点进行对比，最终对比的结果会体现在<code>DOM</code>上，这便是<code>diff</code>算法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">patchVnode</span>(<span class="params">oldVnode: VNode, vnode: VNode, insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i: any, <span class="attr">hook</span>: any;</span><br><span class="line">  <span class="comment">// 调用prepatch hook</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(i = vnode.data) &amp;&amp; isDef(hook = i.hook) &amp;&amp; isDef(i = hook.prepatch)) &#123;</span><br><span class="line">    i(oldVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> elm = vnode.elm = (oldVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">  <span class="keyword">let</span> oldCh = oldVnode.children;</span><br><span class="line">  <span class="keyword">let</span> ch = vnode.children;</span><br><span class="line">  <span class="comment">// 如果两个vnode完全相同，直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (oldVnode === vnode) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (vnode.data !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">// 调用 module 上的 update hook</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.update.length; ++i) cbs.update[i](oldVnode, vnode);</span><br><span class="line">    i = vnode.data.hook;</span><br><span class="line">    <span class="comment">// 调用vnode的update方法</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(i) &amp;&amp; isDef(i = i.update)) i(oldVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (isUndef(vnode.text)) &#123;</span><br><span class="line">    <span class="comment">// 新节点存在children</span></span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh) &amp;&amp; isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 新旧节点均存在 children，且不一样时，对 children 进行 diff</span></span><br><span class="line">      <span class="keyword">if</span> (oldCh !== ch) updateChildren(elm, oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, ch <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, insertedVnodeQueue);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(ch)) &#123;</span><br><span class="line">      <span class="comment">// 旧节点不存在 children 新节点有 children</span></span><br><span class="line">      <span class="comment">// 旧节点存在 text 置空</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(oldVnode.text)) api.setTextContent(elm, <span class="string">''</span>);</span><br><span class="line">      addVnodes(elm, <span class="literal">null</span>, ch <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, <span class="number">0</span>, (ch <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;).length - <span class="number">1</span>, insertedVnodeQueue);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 新节点不存在 children 旧节点存在 children 移除旧节点的 children</span></span><br><span class="line">      removeVnodes(elm, oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, <span class="number">0</span>, (oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;).length - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDef(oldVnode.text)) &#123;</span><br><span class="line">      api.setTextContent(elm, <span class="string">''</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldVnode.text !== vnode.text) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDef(oldCh)) &#123;</span><br><span class="line">      <span class="comment">// 如果旧的vnode有children则移除</span></span><br><span class="line">      removeVnodes(elm, oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;, <span class="number">0</span>, (oldCh <span class="keyword">as</span> <span class="built_in">Array</span>&lt;VNode&gt;).length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 更新text</span></span><br><span class="line">    api.setTextContent(elm, vnode.text <span class="keyword">as</span> string);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 调用 postpatch hook</span></span><br><span class="line">  <span class="keyword">if</span> (isDef(hook) &amp;&amp; isDef(i = hook.postpatch)) &#123;</span><br><span class="line">    i(oldVnode, vnode);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先调用<code>vnode</code>上的<code>prepatch hook</code>，然后判断两个<code>vnode</code>节点是否完全相同，如果完全相同则直接返回，紧接着遍历调用<code>module</code>的<code>update hook</code>和<code>vnode</code>的<code>update hook</code>，然后分别处理如下几种情况：</p><ul><li>如果新节点不存在<code>children</code>而旧节点存在，那么使用<code>removeVnodes</code>方法移除旧节点的<code>children</code>并且设置文本内容</li><li>如果新节点存在<code>children</code>且旧节点没有，然后移除旧节点的文本内容(如果有的话)，最后通过<code>addVnodes</code>方法挂载子节点</li><li>如果新旧节点均存在<code>children</code>，调用<code>updateChildren</code>方法对<code>children</code>进行<code>diff</code></li><li>如果新旧节点文本内容不相同，移除旧节点的<code>children</code>(如果有的话)，然后更新文本内容<br>最后当上述步骤都完成之后，调用<code>vnode</code>的<code>postpatch hook</code>钩子，所以接下来我们需要关注<code>updateChildren</code>、<code>addVnodes</code>和<code>removeVnodes</code>都分别干了什么。</li></ul><h4 id="addVnodes"><a href="#addVnodes" class="headerlink" title="addVnodes"></a>addVnodes</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addVnodes</span>(<span class="params">parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">                   before: Node | null,</span></span></span><br><span class="line"><span class="function"><span class="params">                   vnodes: Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">                   startIdx: number,</span></span></span><br><span class="line"><span class="function"><span class="params">                   endIdx: number,</span></span></span><br><span class="line"><span class="function"><span class="params">                   insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class="line">    <span class="keyword">const</span> ch = vnodes[startIdx];</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 循环遍历插入dom节点</span></span><br><span class="line">      api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要就是通过遍历<code>children</code>数组并且调用<code>createElm</code>方法生成<code>DOM</code>插入到父元素子节点末尾来达到添加节点的目的</p><h4 id="removeVnodes"><a href="#removeVnodes" class="headerlink" title="removeVnodes"></a>removeVnodes</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeVnodes</span>(<span class="params">parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">                      vnodes: Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">                      startIdx: number,</span></span></span><br><span class="line"><span class="function"><span class="params">                      endIdx: number</span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (; startIdx &lt;= endIdx; ++startIdx) &#123;</span><br><span class="line">    <span class="keyword">let</span> i: any, <span class="attr">listeners</span>: number, <span class="attr">rm</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>, ch = vnodes[startIdx];</span><br><span class="line">    <span class="keyword">if</span> (ch != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 非文本节点</span></span><br><span class="line">      <span class="keyword">if</span> (isDef(ch.sel)) &#123;</span><br><span class="line">        <span class="comment">// 调用destroy hook</span></span><br><span class="line">        invokeDestroyHook(ch);</span><br><span class="line">        <span class="comment">// 当所有的remove hook都调用了才会真正调用移除dom的方法</span></span><br><span class="line">        listeners = cbs.remove.length + <span class="number">1</span>;</span><br><span class="line">        rm = createRmCb(ch.elm <span class="keyword">as</span> Node, listeners);</span><br><span class="line">        <span class="comment">// 调用module的remove hook</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; cbs.remove.length; ++i) cbs.remove[i](ch, rm);</span><br><span class="line">        <span class="keyword">if</span> (isDef(i = ch.data) &amp;&amp; isDef(i = i.hook) &amp;&amp; isDef(i = i.remove)) &#123;</span><br><span class="line">          <span class="comment">// 调用vnode的remove hook</span></span><br><span class="line">          i(ch, rm);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          rm();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// Text node</span></span><br><span class="line">        api.removeChild(parentElm, ch.elm <span class="keyword">as</span> Node);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRmCb</span>(<span class="params">childElm: Node, listeners: number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">rmCb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (--listeners === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> parent = api.parentNode(childElm);</span><br><span class="line">      api.removeChild(parent, childElm);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样是遍历，只不过这里是移除节点</p><h4 id="updateChildren"><a href="#updateChildren" class="headerlink" title="updateChildren"></a>updateChildren</h4><p>我们知道当新旧节点均有<code>children</code>并且互不相同的时候会调用<code>updateChildren</code>方法来对<code>children</code>进行<code>diff</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateChildren</span>(<span class="params">parentElm: Node,</span></span></span><br><span class="line"><span class="function"><span class="params">                        oldCh: Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">                        newCh: Array&lt;VNode&gt;,</span></span></span><br><span class="line"><span class="function"><span class="params">                        insertedVnodeQueue: VNodeQueue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> oldStartIdx = <span class="number">0</span>, newStartIdx = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> oldEndIdx = oldCh.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> oldStartVnode = oldCh[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> oldEndVnode = oldCh[oldEndIdx];</span><br><span class="line">  <span class="keyword">let</span> newEndIdx = newCh.length - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> newStartVnode = newCh[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">let</span> newEndVnode = newCh[newEndIdx];</span><br><span class="line">  <span class="keyword">let</span> oldKeyToIdx: any;</span><br><span class="line">  <span class="keyword">let</span> idxInOld: number;</span><br><span class="line">  <span class="keyword">let</span> elmToMove: VNode;</span><br><span class="line">  <span class="keyword">let</span> before: any;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍历 oldCh newCh，对节点进行比较和更新</span></span><br><span class="line">  <span class="comment">// 每轮比较最多处理一个节点，算法复杂度 O(n)</span></span><br><span class="line">  <span class="keyword">while</span> (oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldStartVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 当前节点可能已经被处理过</span></span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx]; <span class="comment">// Vnode might have been moved left</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (oldEndVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newStartVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (newEndVnode == <span class="literal">null</span>) &#123;</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newStartVnode)) &#123;</span><br><span class="line">      <span class="comment">// 新旧开始节点相同，直接调用 patchVnode 进行更新，下标向中间推进</span></span><br><span class="line">      patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newEndVnode)) &#123;</span><br><span class="line">      <span class="comment">// 新旧结束节点相同，直接调用 patchVnode 进行更新，下标向中间推进</span></span><br><span class="line">      patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldStartVnode, newEndVnode)) &#123; <span class="comment">// Vnode moved right</span></span><br><span class="line">      <span class="comment">// 旧的开始节点等于新的结束节点，两个节点进行patch</span></span><br><span class="line">      patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);</span><br><span class="line">      <span class="comment">// 把旧的开始节点插入到末尾</span></span><br><span class="line">      api.insertBefore(parentElm, oldStartVnode.elm <span class="keyword">as</span> Node, api.nextSibling(oldEndVnode.elm <span class="keyword">as</span> Node));</span><br><span class="line">      oldStartVnode = oldCh[++oldStartIdx];</span><br><span class="line">      newEndVnode = newCh[--newEndIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sameVnode(oldEndVnode, newStartVnode)) &#123; <span class="comment">// Vnode moved left</span></span><br><span class="line">      <span class="comment">// 旧的结束节点等于新的开始节点，两个节点进行patch</span></span><br><span class="line">      patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);</span><br><span class="line">      <span class="comment">// 把旧的就结束节点插入到开头</span></span><br><span class="line">      api.insertBefore(parentElm, oldEndVnode.elm <span class="keyword">as</span> Node, oldStartVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">      oldEndVnode = oldCh[--oldEndIdx];</span><br><span class="line">      newStartVnode = newCh[++newStartIdx];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果上述情况都不符合，那么只有可能是以下两种情况</span></span><br><span class="line">      <span class="comment">// 1. 这个节点是新创建的</span></span><br><span class="line">      <span class="comment">// 2. 这个节点在原来的位置是处于中间的（oldStartIdx 和 endStartIdx之间）</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果 oldKeyToIdx 不存在，创建 key 到 index 的映射</span></span><br><span class="line">      <span class="comment">// 而且也存在各种细微的优化，只会创建一次，并且已经完成的部分不需要映射</span></span><br><span class="line">      <span class="keyword">if</span> (oldKeyToIdx === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">      &#125;</span><br><span class="line">      idxInOld = oldKeyToIdx[newStartVnode.key <span class="keyword">as</span> string];</span><br><span class="line">      <span class="keyword">if</span> (isUndef(idxInOld)) &#123; <span class="comment">// New element</span></span><br><span class="line">        <span class="comment">// 将新节点插入到开头</span></span><br><span class="line">        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">        newStartVnode = newCh[++newStartIdx];</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果不是新节点，说明该节点之前存在，找到该节点</span></span><br><span class="line">        elmToMove = oldCh[idxInOld];</span><br><span class="line">        <span class="comment">// 如果两个节点key相同但是sel不同，那就通过createElm创建新的dom节点然后插入到开头</span></span><br><span class="line">        <span class="keyword">if</span> (elmToMove.sel !== newStartVnode.sel) &#123;</span><br><span class="line">          api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 将oldCh中已存在的节点和新的开始节点进行patch</span></span><br><span class="line">          patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);</span><br><span class="line">          <span class="comment">// 将oldCh中处理过的节点置空，等循环处理到这个地方的时候方便直接跳过</span></span><br><span class="line">          oldCh[idxInOld] = <span class="literal">undefined</span> <span class="keyword">as</span> any;</span><br><span class="line">          <span class="comment">// 将处理过后的节点插入到旧的开始节点之前</span></span><br><span class="line">          api.insertBefore(parentElm, (elmToMove.elm <span class="keyword">as</span> Node), oldStartVnode.elm <span class="keyword">as</span> Node);</span><br><span class="line">        &#125;</span><br><span class="line">        newStartVnode = newCh[++newStartIdx];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// oldCh或newCh中有一方先循环结束</span></span><br><span class="line">  <span class="keyword">if</span> (oldStartIdx &lt;= oldEndIdx || newStartIdx &lt;= newEndIdx) &#123;</span><br><span class="line">    <span class="keyword">if</span> (oldStartIdx &gt; oldEndIdx) &#123;</span><br><span class="line">      <span class="comment">// oldCh 已经全部处理完成，而 newCh 还有新的节点，需要对剩下的每个项都创建新的 dom</span></span><br><span class="line">      before = newCh[newEndIdx+<span class="number">1</span>] == <span class="literal">null</span> ? <span class="literal">null</span> : newCh[newEndIdx+<span class="number">1</span>].elm;</span><br><span class="line">      addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// newCh 已经全部处理完成，而 oldCh 还有旧的节点，需要将多余的节点移除</span></span><br><span class="line">      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接看整个过程会有点懵，可以结合例子理解一下，我们拿两个数组进行演示：</p><ul><li>假设旧节点顺序为[A, B, C, D]，新节点为[B, A, C, D, E]<br><img src="https://user-images.githubusercontent.com/11991572/52620314-37302e80-2edf-11e9-956d-57b77b95a2d0.png" alt="image"></li><li>第一轮比较：开始结束节点两两并不相等，于是看<code>newStartVnode</code>在旧节点中是否存在，最后找到了在第二个位置，调用<code>patchVnode</code>进行更新，将 oldCh[1] 至空，将 dom 插入到<code>oldStartVnode</code>前面，<code>newStartIdx</code>向中间移动，状态更新如下<br><img src="https://user-images.githubusercontent.com/11991572/52620414-7bbbca00-2edf-11e9-9afd-2b4618e5425b.png" alt="image"></li><li>第二轮比较：<code>oldStartVnode</code>和<code>newStartVnode</code>相等，直接 <code>patchVnode</code>，<code>newStartIdx</code>和 <code>oldStartIdx</code>向中间移动，状态更新如下<br><img src="https://user-images.githubusercontent.com/11991572/52620536-c9383700-2edf-11e9-8370-2b6293130df1.png" alt="image"></li><li>第三轮比较：<code>oldStartVnode</code>为空，<code>oldStartIdx</code>向中间移动，进入下轮比较，状态更新如下<br><img src="https://user-images.githubusercontent.com/11991572/52620572-e3721500-2edf-11e9-8fa8-137e36b0a163.png" alt="image"></li><li>第四轮比较：<code>oldStartVnode</code>和 <code>newStartVnode</code>相等，直接<code>patchVnode</code>，<code>newStartIdx</code>和 <code>oldStartIdx</code>向中间移动，状态更新如下<br><img src="https://user-images.githubusercontent.com/11991572/52620944-fdf8be00-2ee0-11e9-86e4-689e960089c8.png" alt="image"></li><li>第五轮比较：<code>oldStartVnode</code>和 <code>newStartVnode</code>相等，直接<code>patchVnode</code>，<code>newStartIdx</code> 和 <code>oldStartIdx</code>向中间移动，状态更新如下<br><img src="https://user-images.githubusercontent.com/11991572/52621054-4d3eee80-2ee1-11e9-8935-377ade6c55da.png" alt="image"></li><li><code>oldStartIdx</code> 已经大于 <code>oldEndIdx</code>，循环结束，由于是旧节点先结束循环而且还有没处理的新节点，调用 <code>addVnodes</code>处理剩下的新节点</li></ul><p>到目前为止，整个snabbdom的核心流程已经梳理完毕</p><p><a href="https://juejin.im/post/5b9200865188255c672e8cfd#heading-8" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尤大在官宣Vue 2.0的时候这么说过：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;渲染层基于一个轻量级的 Virtual DOM 实现进行了重写，该 Virtual DOM 实现 fork 自 snabbdom。新的渲染层相比 v1 带来了巨大的性能提升，也让 Vue 2.0 成为了最快速的框架之一。&lt;br&gt;那么对于想要深入了解Vue源码的人来说先深入了解一下snabbdom的实现是有必要的&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://www.limuyang.cc/tags/javascript/"/>
    
      <category term="源码阅读" scheme="https://www.limuyang.cc/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="snabbdom" scheme="https://www.limuyang.cc/tags/snabbdom/"/>
    
  </entry>
  
  <entry>
    <title>阅读分析Redux源码</title>
    <link href="https://www.limuyang.cc/2019/01/12/%E9%98%85%E8%AF%BB%E5%88%86%E6%9E%90Redux%E6%BA%90%E7%A0%81/"/>
    <id>https://www.limuyang.cc/2019/01/12/阅读分析Redux源码/</id>
    <published>2019-01-12T16:55:21.000Z</published>
    <updated>2019-08-16T09:03:51.843Z</updated>
    
    <content type="html"><![CDATA[<p>之前在<code>Medium</code>上看过一篇很有意思的文章： <a href="https://medium.com/dailyjs/the-deepest-reason-why-modern-javascript-frameworks-exist-933b86ebc445" target="_blank" rel="noopener">The deepest reason why modern JavaScript frameworks exist</a> 文章里面大概描述了这么一个事实：我们用着一系列现代开发框架(Vue、React、Angular)，但是我们却忽略了他们之所以存在的最重要的意义：</p><blockquote><p>管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。<br><a id="more"></a><br><img src="https://user-images.githubusercontent.com/11991572/59352947-7cad1d00-8d54-11e9-965d-c8095161d8aa.png" alt="why modern javascript frameworks exist"></p></blockquote><p>无论是<code>Vuex</code>还是<code>Redux</code>，其实都是为了解决我们<code>state</code>的管理的一系列问题而产生的，这里主要分析<code>Redux</code>的原理。</p><p>先看一眼<code>Redux</code>源码的文件结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── applyMiddleware.js</span><br><span class="line">├── bindActionCreators.js</span><br><span class="line">├── combineReducers.js</span><br><span class="line">├── compose.js</span><br><span class="line">├── createStore.js</span><br><span class="line">├── index.js</span><br><span class="line">└── utils</span><br><span class="line">    ├── actionTypes.js</span><br><span class="line">    ├── isPlainObject.js</span><br><span class="line">    └── warning.js</span><br></pre></td></tr></table></figure></p><p>基本都包含了我们常用的一些<code>API</code>外加一些工具类方法，那就先从入口文件开始看起。</p><h4 id="index"><a href="#index" class="headerlink" title="index"></a>index</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">'./createStore'</span></span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./combineReducers'</span></span><br><span class="line"><span class="keyword">import</span> bindActionCreators <span class="keyword">from</span> <span class="string">'./bindActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> applyMiddleware <span class="keyword">from</span> <span class="string">'./applyMiddleware'</span></span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span></span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">'./utils/warning'</span></span><br><span class="line"><span class="keyword">import</span> __DO_NOT_USE__ActionTypes <span class="keyword">from</span> <span class="string">'./utils/actionTypes'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is a dummy function to check if the function name has been altered by minification.</span></span><br><span class="line"><span class="comment"> * If the function has been minified and NODE_ENV !== 'production', warn the user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCrushed</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">  <span class="keyword">typeof</span> isCrushed.name === <span class="string">'string'</span> &amp;&amp;</span><br><span class="line">  isCrushed.name !== <span class="string">'isCrushed'</span></span><br><span class="line">) &#123;</span><br><span class="line">  warning(</span><br><span class="line">    <span class="string">'You are currently using minified code outside of NODE_ENV === "production". '</span> +</span><br><span class="line">      <span class="string">'This means that you are running a slower development build of Redux. '</span> +</span><br><span class="line">      <span class="string">'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify '</span> +</span><br><span class="line">      <span class="string">'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) '</span> +</span><br><span class="line">      <span class="string">'to ensure you have the correct code for your production build.'</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators,</span><br><span class="line">  applyMiddleware,</span><br><span class="line">  compose,</span><br><span class="line">  __DO_NOT_USE__ActionTypes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index</code>入口文件对外释放了我们常用的一些<code>API</code>，这个文件本身自带一个<code>isCrushed</code>方法，通过注释可以了解到这个被<code>Redux</code>开发者称为<code>dummy function</code>的方法用于判断<code>Redux</code>代码是否被压缩，在开发环境会给出警告，其实是一个压缩检验函数。</p><h4 id="createStore"><a href="#createStore" class="headerlink" title="createStore"></a>createStore</h4><p>通常我们创建一个<code>store</code>一般会这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> store</span><br><span class="line">store = createStore(rootReducer，initState，compose(applyMiddleware(sagaMiddleware)))</span><br></pre></td></tr></table></figure><p>第一个参数是返回下一组状态树的函数，通常我们会使用<code>combineReducers</code>方法来生成，紧接着我们需要传入初始化的<code>state</code>，最后一个参数是<code>enhancer</code>，它可以让我们用一些中间件来增强<code>Store</code>，比如提供<code>time travel/persistence</code>，下面通过整体代码来看一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> $$observable <span class="keyword">from</span> <span class="string">'symbol-observable'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ActionTypes <span class="keyword">from</span> <span class="string">'./utils/actionTypes'</span></span><br><span class="line"><span class="keyword">import</span> isPlainObject <span class="keyword">from</span> <span class="string">'./utils/isPlainObject'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a Redux store that holds the state tree.</span></span><br><span class="line"><span class="comment"> * The only way to change the data in the store is to call `dispatch()` on it.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * There should only be a single store in your app. To specify how different</span></span><br><span class="line"><span class="comment"> * parts of the state tree respond to actions, you may combine several reducers</span></span><br><span class="line"><span class="comment"> * into a single reducer function by using `combineReducers`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; reducer A function that returns the next state tree, given</span></span><br><span class="line"><span class="comment"> * the current state tree and the action to handle.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; [preloadedState] The initial state. You may optionally specify it</span></span><br><span class="line"><span class="comment"> * to hydrate the state from the server in universal apps, or to restore a</span></span><br><span class="line"><span class="comment"> * previously serialized user session.</span></span><br><span class="line"><span class="comment"> * If you use `combineReducers` to produce the root reducer function, this must be</span></span><br><span class="line"><span class="comment"> * an object with the same shape as `combineReducers` keys.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;Function&#125; [enhancer] The store enhancer. You may optionally specify it</span></span><br><span class="line"><span class="comment"> * to enhance the store with third-party capabilities such as middleware,</span></span><br><span class="line"><span class="comment"> * time travel, persistence, etc. The only store enhancer that ships with Redux</span></span><br><span class="line"><span class="comment"> * is `applyMiddleware()`.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @returns &#123;Store&#125; A Redux store that lets you read the state, dispatch actions</span></span><br><span class="line"><span class="comment"> * and subscribe to changes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">createStore</span>(<span class="params">reducer, preloadedState, enhancer</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 传参判断</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'function'</span>) ||</span><br><span class="line">    (<span class="keyword">typeof</span> enhancer === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">arguments</span>[<span class="number">3</span>] === <span class="string">'function'</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'It looks like you are passing several store enhancers to '</span> +</span><br><span class="line">        <span class="string">'createStore(). This is not supported. Instead, compose them '</span> +</span><br><span class="line">        <span class="string">'together to a single function.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// preloadedState默认是undefined</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> preloadedState === <span class="string">'function'</span> &amp;&amp; <span class="keyword">typeof</span> enhancer === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    enhancer = preloadedState</span><br><span class="line">    preloadedState = <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> enhancer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the enhancer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/// 函数柯里化 传入createStore作为参数</span></span><br><span class="line">    <span class="keyword">return</span> enhancer(createStore)(reducer, preloadedState)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> reducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the reducer to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 存储当前的reducer</span></span><br><span class="line">  <span class="keyword">let</span> currentReducer = reducer</span><br><span class="line">  <span class="comment">// 存储当前的state</span></span><br><span class="line">  <span class="keyword">let</span> currentState = preloadedState</span><br><span class="line">  <span class="keyword">let</span> currentListeners = []</span><br><span class="line">  <span class="keyword">let</span> nextListeners = currentListeners</span><br><span class="line">  <span class="comment">// 判断是否正在分发事件</span></span><br><span class="line">  <span class="keyword">let</span> isDispatching = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * This makes a shallow copy of currentListeners so we can use</span></span><br><span class="line"><span class="comment">   * nextListeners as a temporary list while dispatching.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * This prevents any bugs around consumers calling</span></span><br><span class="line"><span class="comment">   * subscribe/unsubscribe in the middle of a dispatch.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">ensureCanMutateNextListeners</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (nextListeners === currentListeners) &#123;</span><br><span class="line">      nextListeners = currentListeners.slice()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Reads the state tree managed by the store.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @returns &#123;any&#125; The current state tree of your application.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 返回当前的state</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class="line">          <span class="string">'The reducer has already received the state as an argument. '</span> +</span><br><span class="line">          <span class="string">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> currentState</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Adds a change listener. It will be called any time an action is dispatched,</span></span><br><span class="line"><span class="comment">   * and some part of the state tree may potentially have changed. You may then</span></span><br><span class="line"><span class="comment">   * call `getState()` to read the current state tree inside the callback.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * You may call `dispatch()` from a change listener, with the following</span></span><br><span class="line"><span class="comment">   * caveats:</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 1. The subscriptions are snapshotted just before every `dispatch()` call.</span></span><br><span class="line"><span class="comment">   * If you subscribe or unsubscribe while the listeners are being invoked, this</span></span><br><span class="line"><span class="comment">   * will not have any effect on the `dispatch()` that is currently in progress.</span></span><br><span class="line"><span class="comment">   * However, the next `dispatch()` call, whether nested or not, will use a more</span></span><br><span class="line"><span class="comment">   * recent snapshot of the subscription list.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * 2. The listener should not expect to see all state changes, as the state</span></span><br><span class="line"><span class="comment">   * might have been updated multiple times during a nested `dispatch()` before</span></span><br><span class="line"><span class="comment">   * the listener is called. It is, however, guaranteed that all subscribers</span></span><br><span class="line"><span class="comment">   * registered before the `dispatch()` started will be called with the latest</span></span><br><span class="line"><span class="comment">   * state by the time it exits.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; listener A callback to be invoked on every dispatch.</span></span><br><span class="line"><span class="comment">   * @returns &#123;Function&#125; A function to remove this change listener.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the listener to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class="line">          <span class="string">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class="line">          <span class="string">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class="line">          <span class="string">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 浅拷贝一份当前的listener</span></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    nextListeners.push(listener)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">          <span class="string">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class="line">            <span class="string">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      ensureCanMutateNextListeners()</span><br><span class="line">      <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">      nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Dispatches an action. It is the only way to trigger a state change.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The `reducer` function, used to create the store, will be called with the</span></span><br><span class="line"><span class="comment">   * current state tree and the given `action`. Its return value will</span></span><br><span class="line"><span class="comment">   * be considered the **next** state of the tree, and the change listeners</span></span><br><span class="line"><span class="comment">   * will be notified.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * The base implementation only supports plain object actions. If you want to</span></span><br><span class="line"><span class="comment">   * dispatch a Promise, an Observable, a thunk, or something else, you need to</span></span><br><span class="line"><span class="comment">   * wrap your store creating function into the corresponding middleware. For</span></span><br><span class="line"><span class="comment">   * example, see the documentation for the `redux-thunk` package. Even the</span></span><br><span class="line"><span class="comment">   * middleware will eventually dispatch plain object actions using this method.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Object&#125; action A plain object representing “what changed”. It is</span></span><br><span class="line"><span class="comment">   * a good idea to keep actions serializable so you can record and replay user</span></span><br><span class="line"><span class="comment">   * sessions, or use the time travelling `redux-devtools`. An action must have</span></span><br><span class="line"><span class="comment">   * a `type` property which may not be `undefined`. It is a good idea to use</span></span><br><span class="line"><span class="comment">   * string constants for action types.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @returns &#123;Object&#125; For convenience, the same action object you dispatched.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * Note that, if you use a custom middleware, it may wrap `dispatch()` to</span></span><br><span class="line"><span class="comment">   * return something else (for example, a Promise you can await).</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions must be plain objects. '</span> +</span><br><span class="line">          <span class="string">'Use custom middleware for async actions.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Actions may not have an undefined "type" property. '</span> +</span><br><span class="line">          <span class="string">'Have you misspelled a constant?'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">true</span></span><br><span class="line">      currentState = currentReducer(currentState, action)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      isDispatching = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">      listener()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> action</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Replaces the reducer currently used by the store to calculate the state.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * You might need this if your app implements code splitting and you want to</span></span><br><span class="line"><span class="comment">   * load some of the reducers dynamically. You might also need this if you</span></span><br><span class="line"><span class="comment">   * implement a hot reloading mechanism for Redux.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param &#123;Function&#125; nextReducer The reducer for the store to use instead.</span></span><br><span class="line"><span class="comment">   * @returns &#123;void&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="comment">// 用作code splitting 或者 dynamical load reducer</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the nextReducer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentReducer = nextReducer</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This action has a similiar effect to ActionTypes.INIT.</span></span><br><span class="line">    <span class="comment">// Any reducers that existed in both the new and old rootReducer</span></span><br><span class="line">    <span class="comment">// will receive the previous state. This effectively populates</span></span><br><span class="line">    <span class="comment">// the new state tree with any relevant data from the old one.</span></span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.REPLACE &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Interoperability point for observable/reactive libraries.</span></span><br><span class="line"><span class="comment">   * @returns &#123;observable&#125; A minimal observable of state changes.</span></span><br><span class="line"><span class="comment">   * For more information, see the observable proposal:</span></span><br><span class="line"><span class="comment">   * https://github.com/tc39/proposal-observable</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">observable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> outerSubscribe = subscribe</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * The minimal observable subscription method.</span></span><br><span class="line"><span class="comment">       * @param &#123;Object&#125; observer Any object that can be used as an observer.</span></span><br><span class="line"><span class="comment">       * The observer object should have a `next` method.</span></span><br><span class="line"><span class="comment">       * @returns &#123;subscription&#125; An object with an `unsubscribe` method that can</span></span><br><span class="line"><span class="comment">       * be used to unsubscribe the observable from the store, and prevent further</span></span><br><span class="line"><span class="comment">       * emission of values from the observable.</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      subscribe(observer) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> observer !== <span class="string">'object'</span> || observer === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Expected the observer to be an object.'</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">observeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">if</span> (observer.next) &#123;</span><br><span class="line">            observer.next(getState())</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        observeState()</span><br><span class="line">        <span class="keyword">const</span> unsubscribe = outerSubscribe(observeState)</span><br><span class="line">        <span class="keyword">return</span> &#123; unsubscribe &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line">      [$$observable]() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// When a store is created, an "INIT" action is dispatched so that every</span></span><br><span class="line">  <span class="comment">// reducer returns their initial state. This effectively populates</span></span><br><span class="line">  <span class="comment">// the initial state tree.</span></span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    dispatch,</span><br><span class="line">    subscribe,</span><br><span class="line">    getState,</span><br><span class="line">    replaceReducer,</span><br><span class="line">    [$$observable]: observable</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Store</code>对外提供了4个<code>API</code>：</p><ul><li>getState()</li><li>dispatch(action)</li><li>subscribe(listener)</li><li>replaceReducer(nextReducer)</li></ul><p>这些<code>API</code>在上面都有一一呈现，从上往下看，首先<code>createStore.js</code>会对传参进行处理，根据参数类型来判断是否传入了过多的<code>enhancer</code>，同时会给出提示我们可以用<code>compose</code>来组合多个<code>enhancer</code>，然后判断是否传入了<code>preloadedState</code>，没有的话默认赋值为<code>undefined</code>，最后判断传入的<code>enhancer</code>，当传入的类型不是<code>function</code>类型直接抛异常，如果传参类型无误，将<code>createStore</code>传入<code>enhancer</code>作为参数，这里其实是一个函数柯里化，<code>enhancer</code>会返回一个函数，然后将<code>reducer</code>和<code>preloadedState</code>作为下一级入参。</p><p>接下来看一下主要<code>API</code>部分的实现，<code>getState</code>其实就是返回当前的<code>state</code>，如果判断正在调用<code>dispatch</code>会报错：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'You may not call store.getState() while the reducer is executing. '</span> +</span><br><span class="line">        <span class="string">'The reducer has already received the state as an argument. '</span> +</span><br><span class="line">        <span class="string">'Pass it down from the top reducer instead of reading it from the store.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> currentState</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是我们常用的<code>dispatch</code>方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(action)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'Actions must be plain objects. '</span> +</span><br><span class="line">        <span class="string">'Use custom middleware for async actions.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> action.type === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'Actions may not have an undefined "type" property. '</span> +</span><br><span class="line">        <span class="string">'Have you misspelled a constant?'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Reducers may not dispatch actions.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    isDispatching = <span class="literal">true</span></span><br><span class="line">    currentState = currentReducer(currentState, action)</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    isDispatching = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> listeners = (currentListeners = nextListeners)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; listeners.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> listener = listeners[i]</span><br><span class="line">    listener()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> action</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>dispatch</code>时候方法内部会先判断传入的<code>action</code>是否是<code>plain objects</code>，这个方法也很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;any&#125; obj The object to inspect.</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125; True if the argument appears to be a plain object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">isPlainObject</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">'object'</span> || obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> proto = obj</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">Object</span>.getPrototypeOf(proto) !== <span class="literal">null</span>) &#123;</span><br><span class="line">    proto = <span class="built_in">Object</span>.getPrototypeOf(proto)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.getPrototypeOf(obj) === proto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后判断<code>action</code>是否含有<code>type</code>属性，没有的话会报错，当<code>isDispatching</code>标志位为<code>false</code>的时候，将这个标志位设为<code>true</code>，然后将传入的<code>action</code>和<code>currentState</code>传入<code>currentReducer</code>得到当前的状态快照，完成这件事之后又重置<code>isDispatching</code>为<code>false</code>，以便执行下一轮的<code>dispatch</code>，最后依次执行通过<code>subscribe</code>方法订阅的回调。</p><p>上面提到的<code>subscribe</code>方法平常开发比较少用到，你可以在订阅的回调里面通过<code>getState</code>方法获取当前的<code>state</code>，看一下相关实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">subscribe</span>(<span class="params">listener</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> listener !== <span class="string">'function'</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the listener to be a function.'</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">      <span class="string">'You may not call store.subscribe() while the reducer is executing. '</span> +</span><br><span class="line">        <span class="string">'If you would like to be notified after the store has been updated, subscribe from a '</span> +</span><br><span class="line">        <span class="string">'component and invoke store.getState() in the callback to access the latest state. '</span> +</span><br><span class="line">        <span class="string">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> isSubscribed = <span class="literal">true</span></span><br><span class="line">  <span class="comment">// 浅拷贝一份当前的listener</span></span><br><span class="line">  ensureCanMutateNextListeners()</span><br><span class="line">  nextListeners.push(listener)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">unsubscribe</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!isSubscribed) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isDispatching) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'You may not unsubscribe from a store listener while the reducer is executing. '</span> +</span><br><span class="line">          <span class="string">'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isSubscribed = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    ensureCanMutateNextListeners()</span><br><span class="line">    <span class="keyword">const</span> index = nextListeners.indexOf(listener)</span><br><span class="line">    nextListeners.splice(index, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是简单地浅拷贝一份当前的回调<code>List</code>，将订阅的回调加入<code>nextListeners</code>，返回一个取消订阅的函数，调用这个函数会将该订阅从<code>nextListeners</code>里面删除，可以看一个官方的使用示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">select</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> state.some.deep.property</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> currentValue</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleChange</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> previousValue = currentValue</span><br><span class="line">  currentValue = select(store.getState())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (previousValue !== currentValue) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      <span class="string">'Some deep nested property changed from'</span>,</span><br><span class="line">      previousValue,</span><br><span class="line">      <span class="string">'to'</span>,</span><br><span class="line">      currentValue</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> unsubscribe = store.subscribe(handleChange)</span><br><span class="line">unsubscribe()</span><br></pre></td></tr></table></figure><p>最后一个，也是不常用的方法<code>replaceReducer</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceReducer</span>(<span class="params">nextReducer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> nextReducer !== <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Expected the nextReducer to be a function.'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentReducer = nextReducer</span><br><span class="line"></span><br><span class="line">    <span class="comment">// This action has a similiar effect to ActionTypes.INIT.</span></span><br><span class="line">    <span class="comment">// Any reducers that existed in both the new and old rootReducer</span></span><br><span class="line">    <span class="comment">// will receive the previous state. This effectively populates</span></span><br><span class="line">    <span class="comment">// the new state tree with any relevant data from the old one.</span></span><br><span class="line">    dispatch(&#123; <span class="attr">type</span>: ActionTypes.REPLACE &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这个方法一般用作<code>code splitting</code>或者 <code>dynamical load reducer</code>，成功替换<code>reducer</code>之后会发出一个<code>type</code>为<code>ActionTypes.REPLACE</code>的<code>action</code>。</p><h4 id="combineReducers"><a href="#combineReducers" class="headerlink" title="combineReducers"></a>combineReducers</h4><p>基于 Redux 的应用程序中最常见的 state 结构是一个简单的 JavaScript 对象，它最外层的每个 key 中拥有特定域的数据。类似地，给这种 state 结构写 reducer 的方式是分拆成多个 reducer，拆分之后的 reducer 都是相同的结构（state, action），并且每个函数独立负责管理该特定切片 state 的更新。多个拆分之后的 reducer 可以响应一个 action，在需要的情况下独立的更新他们自己的切片 state，最后组合成新的 state。</p><p>这个模式是如此的通用，Redux 提供了 combineReducers 去实现这个模式。这是一个高阶 Reducer 的示例，他接收一个拆分后 reducer 函数组成的对象，返回一个新的 Reducer 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">combineReducers</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> reducerKeys = <span class="built_in">Object</span>.keys(reducers)</span><br><span class="line">  <span class="keyword">const</span> finalReducers = &#123;&#125;</span><br><span class="line">  <span class="comment">// 过滤一些不存在的reducer</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; reducerKeys.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = reducerKeys[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        warning(<span class="string">`No reducer provided for key "<span class="subst">$&#123;key&#125;</span>"`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> reducers[key] === <span class="string">'function'</span>) &#123;</span><br><span class="line">      finalReducers[key] = reducers[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> finalReducerKeys = <span class="built_in">Object</span>.keys(finalReducers)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This is used to make sure we don't warn about the same</span></span><br><span class="line">  <span class="comment">// keys multiple times.</span></span><br><span class="line">  <span class="keyword">let</span> unexpectedKeyCache</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">    unexpectedKeyCache = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> shapeAssertionError</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    assertReducerShape(finalReducers)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    shapeAssertionError = e</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">combination</span>(<span class="params">state = &#123;&#125;, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shapeAssertionError) &#123;</span><br><span class="line">      <span class="keyword">throw</span> shapeAssertionError</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">'production'</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> warningMessage = getUnexpectedStateShapeWarningMessage(</span><br><span class="line">        state,</span><br><span class="line">        finalReducers,</span><br><span class="line">        action,</span><br><span class="line">        unexpectedKeyCache</span><br><span class="line">      )</span><br><span class="line">      <span class="keyword">if</span> (warningMessage) &#123;</span><br><span class="line">        warning(warningMessage)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> hasChanged = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> nextState = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; finalReducerKeys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = finalReducerKeys[i]</span><br><span class="line">      <span class="keyword">const</span> reducer = finalReducers[key]</span><br><span class="line">      <span class="keyword">const</span> previousStateForKey = state[key]</span><br><span class="line">      <span class="keyword">const</span> nextStateForKey = reducer(previousStateForKey, action)</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> nextStateForKey === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> errorMessage = getUndefinedStateErrorMessage(key, action)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(errorMessage)</span><br><span class="line">      &#125;</span><br><span class="line">      nextState[key] = nextStateForKey</span><br><span class="line">      hasChanged = hasChanged || nextStateForKey !== previousStateForKey</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hasChanged ? nextState : state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>combineReducers</code>接受一个对象作为参数，这个参数里面每一个<code>key</code>都对应着一个值为<code>reducer function</code>的函数，在这个方法里面首先会对传入的<code>reducers</code>进行过滤，去掉一些不存在的<code>reducer</code>，把过滤后的结果存入<code>finalReducers</code>，然后通过<code>assertReducerShape</code>规范我们写的<code>reducer</code>函数，看一眼这个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">assertReducerShape</span>(<span class="params">reducers</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(reducers).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reducer = reducers[key]</span><br><span class="line">    <span class="keyword">const</span> initialState = reducer(<span class="literal">undefined</span>, &#123; <span class="attr">type</span>: ActionTypes.INIT &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initialState === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined during initialization. `</span> +</span><br><span class="line">          <span class="string">`If the state passed to the reducer is undefined, you must `</span> +</span><br><span class="line">          <span class="string">`explicitly return the initial state. The initial state may `</span> +</span><br><span class="line">          <span class="string">`not be undefined. If you don't want to set a value for this reducer, `</span> +</span><br><span class="line">          <span class="string">`you can use null instead of undefined.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      <span class="keyword">typeof</span> reducer(<span class="literal">undefined</span>, &#123;</span><br><span class="line">        type: ActionTypes.PROBE_UNKNOWN_ACTION()</span><br><span class="line">      &#125;) === <span class="string">'undefined'</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">`Reducer "<span class="subst">$&#123;key&#125;</span>" returned undefined when probed with a random type. `</span> +</span><br><span class="line">          <span class="string">`Don't try to handle <span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">            ActionTypes.INIT</span></span></span><br><span class="line"><span class="string"><span class="subst">          &#125;</span> or other actions in "redux/*" `</span> +</span><br><span class="line">          <span class="string">`namespace. They are considered private. Instead, you must return the `</span> +</span><br><span class="line">          <span class="string">`current state for any unknown actions, unless it is undefined, `</span> +</span><br><span class="line">          <span class="string">`in which case you must return the initial state, regardless of the `</span> +</span><br><span class="line">          <span class="string">`action type. The initial state may not be undefined, but can be null.`</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里给每个<code>reducer</code>函数传入了一个<code>type</code>为<code>ActionTypes.INIT</code>的<code>action</code>，按理说正常情况我们的<code>reducer</code>在接受到未定义<code>type</code>的<code>action</code>时候应该返回默认<code>state</code>，所以这里判断如果返回了<code>undefined</code>那么说明这个<code>reducer</code>写的不够规范。</p><p>最后返回一个名为<code>combination</code>的函数，这个函数其实在<code>createStore.js</code>的<code>dispatch</code>方法里面有体现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ... 省略无关代码</span></span><br><span class="line">  currentState = currentReducer(currentState, action)</span><br><span class="line"><span class="comment">// ...省略无关代码</span></span><br></pre></td></tr></table></figure><p>这个函数就是把所有的<code>reducer</code>循环执行，然后根据传参前后的<code>state</code>判断是否改变来决定返回下一组状态还是当前状态。</p><h4 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h4><p><code>createStore</code>的第三个函数就是<code>store enhancer</code>用于增强<code>Store</code>，当你需要传入多个<code>store enhancer</code>的时候就需要通过<code>compose</code>方法将其进行组合，看一下组合的逻辑：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Composes single-argument functions from right to left. The rightmost</span></span><br><span class="line"><span class="comment"> * function can take multiple arguments as it provides the signature for</span></span><br><span class="line"><span class="comment"> * the resulting composite function.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;...Function&#125; funcs The functions to compose.</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125; A function obtained by composing the argument functions</span></span><br><span class="line"><span class="comment"> * from right to left. For example, compose(f, g, h) is identical to doing</span></span><br><span class="line"><span class="comment"> * (...args) =&gt; f(g(h(...args))).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">compose</span>(<span class="params">...funcs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> a(b(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数会将传入的参数进行组合从右到左进行执行，所有传递给<code>compose</code>方法的参数都必须是函数，通过<code>reduce</code>方法组合，给用<code>compose</code>方法组合后的函数传入的第一个参数会作为<code>compose</code>函数最后一个函数参数的参数，联想到我们使用<code>createStore</code>方法的时候：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">enhancer(createStore)(reducer, preloadedState)</span><br></pre></td></tr></table></figure><p>如果有多个<code>store enhancer</code>这里的<code>enhancer</code>就是<code>compose</code>，<code>createStore</code>将作为最后一个<code>store enhancer</code>函数的参数，然后按照洋葱圈模型从右向左执行，下面我们可以聊一聊<code>store enhancer</code>。</p><h4 id="store-enhancer"><a href="#store-enhancer" class="headerlink" title="store enhancer"></a>store enhancer</h4><blockquote><p>store enhancer，可以翻译成store的增强器，顾名思义，就是增强store的功能。一个store enhancer，实际上就是一个高阶函数，它的参数是创建store的函数（store creator），返回值是一个可以创建功能更加强大的store的函数(enhanced store creator)，这和React中的高阶组件的概念很相似。</p></blockquote><p>一般来说一个<code>store enhancer</code>的代码结构如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">enhancerCreator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something based old store</span></span><br><span class="line">    <span class="comment">// return a new enhanced store</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以找一个<code>store enhancer</code>，刚好<code>redux</code>内部就有一个用于增强作用于<code>dispatch</code>方法的中间件的<code>store enhancer</code>生成器，也就是<code>applyMiddleware</code>，这里有一点要注意的是，因为<code>middleware</code>都是异步的，所以通过这个方法生成的<code>store enhancer</code>必须放在第一位，看一下相关实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Creates a store enhancer that applies middleware to the dispatch method</span></span><br><span class="line"><span class="comment"> * of the Redux store. This is handy for a variety of tasks, such as expressing</span></span><br><span class="line"><span class="comment"> * asynchronous actions in a concise manner, or logging every action payload.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See `redux-thunk` package as an example of the Redux middleware.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Because middleware is potentially asynchronous, this should be the first</span></span><br><span class="line"><span class="comment"> * store enhancer in the composition chain.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Note that each middleware will be given the `dispatch` and `getState` functions</span></span><br><span class="line"><span class="comment"> * as named arguments.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;...Function&#125; middlewares The middleware chain to be applied.</span></span><br><span class="line"><span class="comment"> * @returns &#123;Function&#125; A store enhancer applying the middleware.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params">...middlewares</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">createStore</span> =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个新的store</span></span><br><span class="line">    <span class="keyword">const</span> store = createStore(...args)</span><br><span class="line">    <span class="keyword">let</span> dispatch = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(</span><br><span class="line">        <span class="string">'Dispatching while constructing your middleware is not allowed. '</span> +</span><br><span class="line">          <span class="string">'Other middleware would not be applied to this dispatch.'</span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: <span class="function">(<span class="params">...args</span>) =&gt;</span> dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 传入getState和dispatch，返回以next为参数的匿名函数</span></span><br><span class="line">    <span class="keyword">const</span> chain = middlewares.map(<span class="function"><span class="params">middleware</span> =&gt;</span> middleware(middlewareAPI))</span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过传入的<code>createStore</code>以及<code>reducer</code>和<code>state</code>创建一个新的<code>Store</code>，然后定义一个临时<code>dispatch</code>方法，在通过<code>applyMiddleWare</code>处理之前调用<code>dispatch</code>会报错，然后会调用<code>middlewares</code>数组中每一个中间件函数，我们可以找一个中间件函数看一下内部的处理过程，这里看一下<code>redux-thunk</code>的处理方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure><p>每一个<code>middleware</code>都会接受<code>Store</code>的<code>dispatch</code>和<code>getState</code>方法作为参数，<code>redux-thunk</code>的增强型作用是可以让你<code>dispatch</code>一个函数，这样就知道了我们的<code>chain</code>里面的函数都是类似于这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略代码</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">next</span> =&gt;</span> <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 省略代码</span></span><br></pre></td></tr></table></figure><p>变相的去掉了一层，然后通过<code>compose</code>方法组合出来一个增强后的<code>dispatch</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch = compose(...chain)(store.dispatch)</span><br></pre></td></tr></table></figure><p>将<code>store</code>原生的<code>dispatch</code>作为参数，后续的每一个<code>middleware</code>都对这个<code>dispatch</code>进行增强，当遇到<code>redux-thunk</code>的时候，他会检测当前的<code>action</code>是否是一个函数，是的话就执行这个函数，同理其他的<code>middleware</code>也是依次执行的。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>虽然<code>Redux</code>是一个体小精悍的库，但它相关的内容和<code>API</code>都是精挑细选的，足以衍生出丰富的工具集和可扩展的生态系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在&lt;code&gt;Medium&lt;/code&gt;上看过一篇很有意思的文章： &lt;a href=&quot;https://medium.com/dailyjs/the-deepest-reason-why-modern-javascript-frameworks-exist-933b86ebc445&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The deepest reason why modern JavaScript frameworks exist&lt;/a&gt; 文章里面大概描述了这么一个事实：我们用着一系列现代开发框架(Vue、React、Angular)，但是我们却忽略了他们之所以存在的最重要的意义：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;管理不断变化的 state 非常困难。如果一个 model 的变化会引起另一个 model 变化，那么当 view 变化时，就可能引起对应 model 以及另一个 model 的变化，依次地，可能会引起另一个 view 的变化。直至你搞不清楚到底发生了什么。state 在什么时候，由于什么原因，如何变化已然不受控制。 当系统变得错综复杂的时候，想重现问题或者添加新功能就会变得举步维艰。&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://www.limuyang.cc/tags/javascript/"/>
    
      <category term="源码阅读" scheme="https://www.limuyang.cc/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="redux" scheme="https://www.limuyang.cc/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>京晚8点--H5单页面手势滑屏效果实践</title>
    <link href="https://www.limuyang.cc/2018/08/27/%E4%BA%AC%E6%99%9A8%E7%82%B9-H5%E5%8D%95%E9%A1%B5%E9%9D%A2%E6%89%8B%E5%8A%BF%E6%BB%91%E5%B1%8F%E6%95%88%E6%9E%9C%E5%AE%9E%E8%B7%B5/"/>
    <id>https://www.limuyang.cc/2018/08/27/京晚8点-H5单页面手势滑屏效果实践/</id>
    <published>2018-08-27T23:11:04.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>京晚8点作为内容平台重点打造的内容IP，通过优质的内容形式，潜移默化中让用户了解产品，建立对京东开始玩内容的心智和认知，目前这个项目已经迭代到第5期，最开始的时候我们的首页效果是一个卡片形式的时间轴，首页的背景大图会随着时间轴拖动到不同的卡片而进行切换：<br>从第5期开始，我们采用了一种全新的交互方式来给用户更好的体验反馈，那就是滑屏，可以先看一下效果：<br><a id="more"></a></p><p><img src="https://user-images.githubusercontent.com/11991572/44400727-d3a3f480-a57e-11e8-86a8-d7dbfcbb43f4.gif" alt="卡片时间轴效果"></p><p><img src="https://user-images.githubusercontent.com/11991572/44401139-3e096480-a580-11e8-9a89-196d520725dc.gif" alt="滑屏效果"></p><h2 id="要实现的滑屏效果"><a href="#要实现的滑屏效果" class="headerlink" title="要实现的滑屏效果"></a>要实现的滑屏效果</h2><p>1、左右滑动可以切换背景图，同时在临界状态做出相应处理(滑动到第一张图片不能左滑，最后一张图片不能右滑)<br>2、滑动切换图片的时候带有覆盖的动效</p><p>为了实现上述需求，需要考虑三个问题：</p><ul><li>对图片组应该采用何种形式的布局？</li><li>滑动切换时候如何实现覆盖动效？</li><li>如何处理临界状态以及临界延伸状态？</li></ul><h2 id="对图片组应该采用何种形式的布局"><a href="#对图片组应该采用何种形式的布局" class="headerlink" title="对图片组应该采用何种形式的布局"></a>对图片组应该采用何种形式的布局</h2><p><img src="https://user-images.githubusercontent.com/11991572/44625865-ef274a80-a944-11e8-9a68-cc2c78fca4e5.png" alt="z-index"></p><p>首先假设我们有一堆这样的背景图，要实现这种层叠的效果最简单的方式莫过于设置    <code>z-index</code> ，从右向左滑动的过程就像从一个卡牌组的最上方不断的抽取最上面那一张卡牌的过程，这样我们就可以使用<code>position: absolute</code> 结合<code>z-index</code>得到最基本的布局：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-list"</span>&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-wrapper"</span></span><br><span class="line">      v-<span class="keyword">for</span>=<span class="string">"(item, index) in cardsList"</span></span><br><span class="line">      :style=<span class="string">"&#123;zIndex: cardsList.length - index&#125;"</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;div</span><br><span class="line">        <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-img"</span></span><br><span class="line">        :style=<span class="string">"&#123;backgroundImage: 'url('+ item +')'&#125;"</span></span><br><span class="line">      &gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">  import bg1 from '../img</span><span class="regexp">/bg1.jpg'</span></span><br><span class="line"><span class="regexp">  import bg2 from '../img</span><span class="regexp">/bg2.jpg'</span></span><br><span class="line"><span class="regexp">  import bg3 from '../img</span><span class="regexp">/bg3.jpg'</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  export default &#123;</span></span><br><span class="line"><span class="regexp">    data() &#123;</span></span><br><span class="line"><span class="regexp">      return &#123;</span></span><br><span class="line"><span class="regexp">        cardsList: [</span></span><br><span class="line"><span class="regexp">          bg1,</span></span><br><span class="line"><span class="regexp">          bg2,</span></span><br><span class="line"><span class="regexp">          bg3</span></span><br><span class="line"><span class="regexp">        ]</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><h2 id="滑动切换时候如何实现覆盖动效"><a href="#滑动切换时候如何实现覆盖动效" class="headerlink" title="滑动切换时候如何实现覆盖动效"></a>滑动切换时候如何实现覆盖动效</h2><p>滑动切换我们可以通过监听touch事件，计算手指滑动的位移，通过<code>translate3d(x, y, z)</code>去控制当前卡片在x轴上的位移，当从右向左滑的时候当前卡片向左移出屏幕，设置一个滑动的临界点，超出该临界点则判定滑动到下一张图，否则回到初始位置：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-list"</span>&gt;</span><br><span class="line">    &lt;div</span><br><span class="line">      <span class="class"><span class="keyword">class</span></span>=<span class="string">"card-wrapper"</span></span><br><span class="line">      v-<span class="keyword">for</span>=<span class="string">"(item, index) in cardsList"</span></span><br><span class="line">      :style=<span class="string">"&#123;zIndex: cardsList.length - index&#125;"</span></span><br><span class="line">      @touchstart=<span class="string">"cardTouchStart"</span></span><br><span class="line">      @touchmove=<span class="string">"cardTouchMove"</span></span><br><span class="line">      @touchend=<span class="string">"cardTouchEnd"</span></span><br><span class="line">    &gt;</span><br><span class="line">     <span class="comment">// 省略部分dom布局</span></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> bg1 <span class="keyword">from</span> <span class="string">'../img/bg1.jpg'</span></span><br><span class="line">  <span class="keyword">import</span> bg2 <span class="keyword">from</span> <span class="string">'../img/bg2.jpg'</span></span><br><span class="line">  <span class="keyword">import</span> bg3 <span class="keyword">from</span> <span class="string">'../img/bg3.jpg'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        cardsList: [</span><br><span class="line">          bg1,</span><br><span class="line">          bg2,</span><br><span class="line">          bg3</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 使用一个touch对象存储一些属性，方便后续操作</span></span><br><span class="line">        touch: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      cardTouchStart(e) &#123;</span><br><span class="line">        <span class="comment">// touch事件初始化标志位</span></span><br><span class="line">        <span class="keyword">this</span>.touch.initiated = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 开始滑动的x轴坐标</span></span><br><span class="line">        <span class="keyword">this</span>.touch.startX = e.touches[<span class="number">0</span>].pageX</span><br><span class="line">        <span class="comment">// x轴方向上的滑动偏移量</span></span><br><span class="line">        <span class="keyword">this</span>.touch.deltaX = <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      cardTouchMove(e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.touch.initiated) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 滑动操作</span></span><br><span class="line">      &#125;,</span><br><span class="line">      cardTouchEnd(e) &#123;</span><br><span class="line">        <span class="comment">// 重置标志位</span></span><br><span class="line">        <span class="keyword">this</span>.touch.initiated = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>既然是通过<code>translate3d</code>进行位移变幻，我们还需要在恰当的时候初始化所有卡片的位置，这里默认初始化位置都是<code>translate3d(0, 0, 0)</code>，同时当前卡片滑出屏幕外的最大位移应该刚好是屏幕宽度，这样当反向滑动的时候卡片也能立即回到屏幕可见区域，所以我们代码可以这么处理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> bg1 <span class="keyword">from</span> <span class="string">'../img/bg1.jpg'</span></span><br><span class="line">  <span class="keyword">import</span> bg2 <span class="keyword">from</span> <span class="string">'../img/bg2.jpg'</span></span><br><span class="line">  <span class="keyword">import</span> bg3 <span class="keyword">from</span> <span class="string">'../img/bg3.jpg'</span></span><br><span class="line">  <span class="keyword">const</span> transform = <span class="string">'transform'</span></span><br><span class="line">  <span class="comment">// 屏幕宽度</span></span><br><span class="line">  <span class="keyword">let</span> clientWidth</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        cardsList: [</span><br><span class="line">          bg1,</span><br><span class="line">          bg2,</span><br><span class="line">          bg3</span><br><span class="line">        ],</span><br><span class="line">        touch: &#123;&#125;,</span><br><span class="line">        nodeList: [],</span><br><span class="line">        imgNodeList: [],</span><br><span class="line">        selectIndex: <span class="number">0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    created() &#123;</span><br><span class="line">      <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        clientWidth = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">        <span class="comment">// array-like-object转换成array</span></span><br><span class="line">        <span class="keyword">this</span>.nodeList = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'card-wrapper'</span>))</span><br><span class="line">        <span class="keyword">this</span>.imgNodeList = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.getElementsByClassName(<span class="string">'card-img'</span>))</span><br><span class="line">        <span class="comment">// 初始化卡片位置</span></span><br><span class="line">        <span class="keyword">this</span>.initCards()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      cardTouchStart(e) &#123;</span><br><span class="line">        <span class="comment">// touch事件初始化标志位</span></span><br><span class="line">        <span class="keyword">this</span>.touch.initiated = <span class="literal">true</span></span><br><span class="line">        <span class="comment">// 开始滑动的x轴坐标</span></span><br><span class="line">        <span class="keyword">this</span>.touch.startX = e.touches[<span class="number">0</span>].pageX</span><br><span class="line">        <span class="comment">// x轴方向上的滑动偏移量</span></span><br><span class="line">        <span class="keyword">this</span>.touch.deltaX = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 确保卡片从初始化位置开始位移</span></span><br><span class="line">        <span class="keyword">this</span>.initCards()</span><br><span class="line">      &#125;,</span><br><span class="line">      cardTouchMove(e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.touch.initiated) &#123;</span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 滑动操作</span></span><br><span class="line">      &#125;,</span><br><span class="line">      cardTouchEnd(e) &#123;</span><br><span class="line">        <span class="comment">// 重置标志位</span></span><br><span class="line">        <span class="keyword">this</span>.touch.initiated = <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      initCards() &#123;</span><br><span class="line">        <span class="keyword">this</span>.nodeList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (index &gt;= <span class="keyword">this</span>.selectIndex) &#123;</span><br><span class="line">            item.style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line">            <span class="keyword">this</span>.imgNodeList[index].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            item.style[transform] = <span class="string">`translate3d(-<span class="subst">$&#123;clientWidth&#125;</span>px, 0, 0)`</span></span><br><span class="line">            <span class="keyword">this</span>.imgNodeList[index].style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;clientWidth&#125;</span>px, 0, 0)`</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>关于    <code>initCards</code>方法这里有几点需要解释一下，首次京晚8点这个项目每一期都有好几个视频，同时每一天晚上8点都会准时更新一只视频，所以这里用一个变量<code>selectIndex</code>去标识今天应该切到哪一只视频，<code>index</code>小于<code>selectIndex</code> 的卡片就会移出到屏幕外，而<code>index</code>大于<code>selectIndex</code>的卡片则会由于我们设置了<code>z-index</code>的关系而不可见，其次，为了达到滑动时候下一张卡片覆盖当前卡片的效果，我们这里用了一个很巧妙的方式：错位，也就是说当包裹卡片的div由于手指滑动而向左滑动出屏幕外的时候，我们控制卡片自身产生一个向右滑动同样距离的位移，这样就能给人看起来卡片没在动的假象，向右移动同理，上一个图直观的看一下：</p><p><img src="https://user-images.githubusercontent.com/11991572/44625900-89878e00-a945-11e8-909f-2c43165b9e1a.gif" alt="错位示意"></p><p>通过代码来呈现这个效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略不相干代码</span></span><br><span class="line"> cardTouchMove(e) &#123;</span><br><span class="line">   <span class="keyword">if</span> (!<span class="keyword">this</span>.touch.initiated) &#123;</span><br><span class="line">     <span class="keyword">return</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 动态偏移量</span></span><br><span class="line">   <span class="keyword">this</span>.touch.deltaX = e.touches[<span class="number">0</span>].pageX - <span class="keyword">this</span>.touch.startX</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.touch.deltaX &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">     <span class="comment">// 向右滑动</span></span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     <span class="comment">// 向左滑动</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"><span class="comment">// 省略不想干代码</span></span><br></pre></td></tr></table></figure><p>以右滑为例给出大致处理过程：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">cardTouchMove(e) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.touch.initiated) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 滑动操作</span></span><br><span class="line">  <span class="comment">// 动态偏移量</span></span><br><span class="line">  <span class="keyword">this</span>.touch.deltaX = e.touches[<span class="number">0</span>].pageX - <span class="keyword">this</span>.touch.startX</span><br><span class="line">  <span class="keyword">this</span>.touch.offset = -clientWidth + <span class="keyword">this</span>.touch.deltaX</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.touch.deltaX &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.selectIndex === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 第一张，无法右滑</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 向右滑动</span></span><br><span class="line">      <span class="keyword">this</span>.nodeList[<span class="keyword">this</span>.selectIndex].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line">      <span class="keyword">this</span>.imgNodeList[<span class="keyword">this</span>.selectIndex].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line">      <span class="comment">// 上一张进入视野</span></span><br><span class="line">      <span class="keyword">this</span>.nodeList[<span class="keyword">this</span>.selectIndex - <span class="number">1</span>].style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;<span class="keyword">this</span>.touch.offset&#125;</span>px, 0, 0)`</span></span><br><span class="line">      <span class="keyword">this</span>.imgNodeList[<span class="keyword">this</span>.selectIndex - <span class="number">1</span>].style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;-<span class="keyword">this</span>.touch.offset&#125;</span>px, 0, 0)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 向左滑动</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">cardTouchEnd(e) &#123;</span><br><span class="line">  <span class="comment">// 重置标志位</span></span><br><span class="line">  <span class="keyword">this</span>.touch.initiated = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.touch.deltaX &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 右滑</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.selectIndex === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 第一张，无法右滑</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.nodeList[<span class="keyword">this</span>.selectIndex - <span class="number">1</span>].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line">      <span class="keyword">this</span>.imgNodeList[<span class="keyword">this</span>.selectIndex - <span class="number">1</span>].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下初步效果已经出来了</p><p><img src="https://user-images.githubusercontent.com/11991572/44626213-46c8b480-a94b-11e8-85b0-13d795e2f9a7.gif" alt="初步效果"></p><h2 id="如何处理临界状态以及临界延伸状态"><a href="#如何处理临界状态以及临界延伸状态" class="headerlink" title="如何处理临界状态以及临界延伸状态"></a>如何处理临界状态以及临界延伸状态</h2><p>上面其实处理过一种临界状态，就是当滑动到第一张或者最后一张的时候不做处理，还有一种临界延伸状态，假设我们这个时候手指从左向右滑动，并且我们此时滑过的宽度已经超过了屏幕的宽度，这个时候对用户来说体验最好的处理是继续拉出下一张卡片，同样用向右滑动给出处理的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向右滑动</span></span><br><span class="line"><span class="keyword">this</span>.nodeList[<span class="keyword">this</span>.selectIndex].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line"><span class="keyword">this</span>.imgNodeList[<span class="keyword">this</span>.selectIndex].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.touch.offset &lt; <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="comment">// 右滑位移还未超出一个屏幕宽度</span></span><br><span class="line">  <span class="keyword">this</span>.nodeList[<span class="keyword">this</span>.selectIndex - <span class="number">1</span>].style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;<span class="keyword">this</span>.touch.offset&#125;</span>px, 0, 0)`</span></span><br><span class="line">  <span class="keyword">this</span>.imgNodeList[<span class="keyword">this</span>.selectIndex - <span class="number">1</span>].style[transform] = <span class="string">`translate3d(<span class="subst">$&#123;-<span class="keyword">this</span>.touch.offset&#125;</span>px, 0, 0)`</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="comment">// 右滑位移超出了一个屏幕的宽度</span></span><br><span class="line">  <span class="keyword">this</span>.nodeList[<span class="keyword">this</span>.selectIndex - <span class="number">1</span>].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line">  <span class="keyword">this</span>.imgNodeList[<span class="keyword">this</span>.selectIndex - <span class="number">1</span>].style[transform] = <span class="string">`translate3d(0, 0, 0)`</span></span><br><span class="line">  <span class="keyword">this</span>.selectIndex -= <span class="number">1</span></span><br><span class="line">  <span class="keyword">this</span>.touch.startX = e.touches[<span class="number">0</span>].pageX</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://user-images.githubusercontent.com/11991572/44626345-3285b700-a94d-11e8-986b-5acf9cdaecc4.gif" alt="临界处理"></p><p>可以看到无缝连续过渡的效果，还有一种需要处理的情况也是出于用户体验考虑，我们应该设置一个阈值，我这里设置的是屏幕宽度的20%，当用户滑动没有超过这个阈值的时候卡片回到原来位置，超过则滑动到下一张：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.touch.deltaX &lt; <span class="keyword">this</span>.touch.threshold) &#123;</span><br><span class="line">   <span class="comment">// 回到原点</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="comment">// 执行滑动逻辑</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h2><p>到目前为止上面的代码示例只是给出了最基本的效果，实际项目中卡片还用到了平滑过渡，这里推荐使用<code>tween.js</code>的ES6实现版本<a href="https://github.com/tweenjs/es6-tween" target="_blank" rel="noopener">es6-tween</a>，另外，实际我们项目中处理触摸事件的时候有一点很重要的是处理多指滑动，这里提供一个比较靠谱的思路：通过官方<code>TouchEvent</code> API里面提供的<code>changedTouches</code>对象查找发生了变化的触点，通过对比这些触点的<code>identifier</code>属性去找到最开始触摸屏幕的那个触点，忽略其他触点的事件即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目背景&quot;&gt;&lt;a href=&quot;#项目背景&quot; class=&quot;headerlink&quot; title=&quot;项目背景&quot;&gt;&lt;/a&gt;项目背景&lt;/h2&gt;&lt;p&gt;京晚8点作为内容平台重点打造的内容IP，通过优质的内容形式，潜移默化中让用户了解产品，建立对京东开始玩内容的心智和认知，目前这个项目已经迭代到第5期，最开始的时候我们的首页效果是一个卡片形式的时间轴，首页的背景大图会随着时间轴拖动到不同的卡片而进行切换：&lt;br&gt;从第5期开始，我们采用了一种全新的交互方式来给用户更好的体验反馈，那就是滑屏，可以先看一下效果：&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="滑屏效果" scheme="https://www.limuyang.cc/tags/%E6%BB%91%E5%B1%8F%E6%95%88%E6%9E%9C/"/>
    
      <category term="京晚8点" scheme="https://www.limuyang.cc/tags/%E4%BA%AC%E6%99%9A8%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>京晚8点-H5视频沉浸式播放解决方案</title>
    <link href="https://www.limuyang.cc/2018/07/22/%E4%BA%AC%E6%99%9A8%E7%82%B9-H5%E8%A7%86%E9%A2%91%E6%B2%89%E6%B5%B8%E5%BC%8F%E6%92%AD%E6%94%BE%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://www.limuyang.cc/2018/07/22/京晚8点-H5视频沉浸式播放解决方案/</id>
    <published>2018-07-22T23:46:19.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<p>“沉浸播放式”这个概念是我从Android开发里面的沉浸式引申过来的一个概念，沉浸式其实就是隐藏页面顶部的status bar和底部的navigation bar之后呈现出来的页面，一般用户很容易把沉浸式状态栏和透明化状态栏混为一谈，他们的区别如下：</p><a id="more"></a><ul><li><p>沉浸式状态栏<br><img src="https://user-images.githubusercontent.com/11991572/43042061-6fc8a4d8-8da5-11e8-9a70-47c8d1b14ead.jpg" alt="Immersive Mode"></p></li><li><p>透明化状态栏<br><img src="https://user-images.githubusercontent.com/11991572/43042064-a03001e8-8da5-11e8-91c3-3a9083f94aee.jpg" alt="Translucent Bar"></p></li></ul><p>那么回到前端开发，让我们看一下如何让video标签呈现这种沉浸式的播放效果，平常我们使用video标签都是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;video</span><br><span class="line">    id=<span class="string">"videos"</span></span><br><span class="line">    playsinline=<span class="string">"true"</span></span><br><span class="line">    webkit-playsinline=<span class="string">"true"</span> <span class="comment">/*IOS播放视频会自动调用原生播放器全屏播放，这里使用这个属性让IOS内播放视频的时候使用inline模式，同时我们设置宽高等于屏幕宽高来实现IOS下的全屏播放*/</span></span><br><span class="line">    x5-video-orientation=<span class="string">"portraint"</span></span><br><span class="line">    preload=<span class="string">"auto"</span></span><br><span class="line">    style=<span class="string">"width: 100%;height: 100%"</span></span><br><span class="line">  &gt;</span><br><span class="line">    &lt;source src=<span class="string">"//gw.alicdn.com/bao/uploaded/TB1YKBlb_ZRMeJjSsppXXXrEpXa.mp4"</span> type=<span class="string">"video/mp4"</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/video&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>正常情况下我们要做竖版视频，视频的比例都是16:9，也就是高/宽约等于1.78，这里用到的测试视频也是16:9的，而且默认情况下video的object-fit属性的值是contain，也就是保持长宽比，我们先看下不做处理在iphone6/7/8下的表现情况：</p><p><img src="https://user-images.githubusercontent.com/11991572/43042594-1539fb4c-8db5-11e8-8d82-79c5a39a40f0.png" alt="在iphone6/7/8下的表现情况"></p><p>看起来比较完美，因为这几款手机分辨率都是16:9的，视频维持屏幕大小完全没有问题，接下来看一下分辨率不是16:9的机型，比较典型的就是iphoneX，面向老板开发的同学可能对适配这款机型颇有怨言：</p><p><img src="https://user-images.githubusercontent.com/11991572/43042602-3a3f9668-8db5-11e8-88b7-971b9106637d.png" alt="iphoneX下的表现情况"></p><p>有人会觉得奇怪为什么我们设置了video的宽高都是百分百上下还漏出了两个白条，这里其实是object-fit这个属性在作怪，既然默认的是contain，我们就改为fill吧，再看一下效果:</p><p><img src="https://user-images.githubusercontent.com/11991572/43042622-a8534d7a-8db5-11e8-96e5-80a7ed1c7c5c.png" alt="object-fit:fill"></p><p>这样看起来没问题，但是你觉得产品小姐姐会这么轻易放过你吗？too navie，你看我们正常16:9的视频在iphoneX这种18:9的屏幕上是有形变的，而且市面上这么多分辨率不同的设备，如果要追求不同的手机上有最接近的用户体验这么做肯定是不行的，有人可能会提到object-fit中的cover属性，没错，这个属性可以让我们的视频等比例缩放，如果宽高不匹配会对处理对象做裁剪操作，来我们看一下现在在微信里面的效果：</p><p><img src="https://user-images.githubusercontent.com/11991572/43046765-6d572bba-8e00-11e8-9949-7150b64edc43.png" alt="微信里的效果"></p><p>其他效果都蛮好，你会发现右上角有个可恶的全屏，这个全屏按钮是微信的x5内核自带的，没法去除，这个有很多人给腾讯x5开发团队那边提过issue，但是暂时没有办法处理，我后续会提到一个另辟蹊径的方案，先回到这里，点了这个全屏按钮之后会进入微信的全屏播放模式，而且放完之后会出现一堆广告列表，这都是我们不想看到了，其次如果我们的产品需求不单单是全屏播放，还想在视频上面放一些交互按钮之类的，这种方式就做不到，因为video是在最上一级的，但是两种方式例外，一个是微信把你们的域名加入白名单，这种可以在Android手机的video上随意放置dom元素，IOS本身没有这个限制，另一种更为通用的方式是用微信x5内核的同层播放模式，这种模式有两种好处：</p><ul><li>去除了右上角讨厌的”全屏”按钮</li><li>真正实现了x5内核下的沉浸式播放，我们看到目前的实现在微信上还是带有浏览器的titleBar的<br>在x5内核的环境下实现同层播放很简单，只需要在video上添加这么两行属性：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x5-video-player-type=<span class="string">"h5"</span></span><br><span class="line">x5-video-player-fullscreen=<span class="string">"true"</span></span><br></pre></td></tr></table></figure><p>再看一下这个时候的效果：</p><p><img src="https://user-images.githubusercontent.com/11991572/43047055-a4593190-8e04-11e8-800f-eb7021755f14.png" alt="同层播放模式下的效果"></p><p>确实是真正意义上的沉浸式播放，如果你的app里面webview用的也是x5内核那么这个页面也能在app上达到同样的效果，但是这种同层播放依然有无法解决的问题，首先这个全屏模式会重新计算宽高，触发视口大小变化，也就是说用户视觉上会有一个视口变化的过程，其次，同层播放模式虽然没有了”全屏”按钮，但是左上角的按钮用于退出沉浸式全屏，右上角的按钮点开是分享，分享的内容不可定制，固定位当前页面的title+url的组合，如果你对页面的定制化要求比较高的话，我这里有一个备选的方案，那就是放弃同层播放模式，当然这个前提是你不需要在video页面上做一些交互操作，或者说你的域名处于微信白名单下，当我们在非沉浸式下又想要打到等比例缩放视频的效果，同时我们还要去除x5自带的”全屏”按钮，最好的方式就是动态去计算视频的宽高，把视频撑大，把”全屏”按钮撑出浏览器页面，这样基本就能达到我们的目的了，这里以16:9的标准为例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 动态处理video标签宽高适配</span></span><br><span class="line">      <span class="keyword">const</span> video = <span class="keyword">this</span>.$refs.video</span><br><span class="line">      <span class="keyword">const</span> ratio = <span class="built_in">Math</span>.fround(<span class="built_in">document</span>.documentElement.clientHeight / <span class="built_in">document</span>.documentElement.clientWidth)</span><br><span class="line">      <span class="keyword">if</span> (ratio &gt;= <span class="number">1.78</span>) &#123;</span><br><span class="line">        <span class="comment">// 竖屏</span></span><br><span class="line">        video.height = <span class="built_in">document</span>.documentElement.clientHeight + <span class="number">100</span></span><br><span class="line">        video.width = <span class="built_in">Math</span>.floor(video.clientHeight * <span class="number">0.572</span>)</span><br><span class="line">        <span class="keyword">const</span> winW = <span class="built_in">document</span>.documentElement.clientWidth</span><br><span class="line">        video.style.left = (winW - video.width) / <span class="number">2</span> + <span class="string">'px'</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 宽屏</span></span><br><span class="line">        video.width = <span class="built_in">document</span>.documentElement.clientWidth + <span class="number">100</span></span><br><span class="line">        video.height = <span class="built_in">Math</span>.floor(video.width * <span class="number">1.78</span>)</span><br><span class="line">        <span class="keyword">const</span> winH = <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">        video.style.top = (winH - video.height) / <span class="number">2</span> + <span class="string">'px'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>讲解下思路，16:9的视频也就是高宽比差不多是1.78，那么大于这个比例的就是类似于iphoneX的长屏幕类型的手机，对于这种手机我们要做等比缩放适配的话就以手机的长为标准，先让视频的长度等于手机的长度，这里我加上的100px可以理解为上下在加上50px，目的就是为了把视频长度拉大，让”全屏”按钮消失在视线内，实际这个值可以自己尝试修改，让后宽就是此时高的1/78倍，然后使用绝对布局去设置视频的左边距，就可以达到等比缩放的效果，同理可以理解处理宽屏手机的代码部分，当然，应该还有更完美的方案，可以在评论区留言探讨~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“沉浸播放式”这个概念是我从Android开发里面的沉浸式引申过来的一个概念，沉浸式其实就是隐藏页面顶部的status bar和底部的navigation bar之后呈现出来的页面，一般用户很容易把沉浸式状态栏和透明化状态栏混为一谈，他们的区别如下：&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="video" scheme="https://www.limuyang.cc/tags/video/"/>
    
      <category term="沉浸式" scheme="https://www.limuyang.cc/tags/%E6%B2%89%E6%B5%B8%E5%BC%8F/"/>
    
      <category term="x5内核同层播放器" scheme="https://www.limuyang.cc/tags/x5%E5%86%85%E6%A0%B8%E5%90%8C%E5%B1%82%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>webpack从0到1使用指南</title>
    <link href="https://www.limuyang.cc/2018/05/19/webpack%E4%BB%8E0%E5%88%B01%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://www.limuyang.cc/2018/05/19/webpack从0到1使用指南/</id>
    <published>2018-05-19T16:02:23.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么要用webpack"><a href="#为什么要用webpack" class="headerlink" title="为什么要用webpack"></a>为什么要用webpack</h4><p>关于为什么要使用webpack，我比较认同的一种说法是：</p><blockquote><p>webpack可以很好地管理你开发中遇到的各种HTML、JS、CSS以及各种图片资源文件，同时对应不同的资源，webpack还提供了对应的Loaders将其进行转化为适用于浏览器使用的格式</p></blockquote><h4 id="如何从0开始上手webpack"><a href="#如何从0开始上手webpack" class="headerlink" title="如何从0开始上手webpack"></a>如何从0开始上手webpack</h4><p>后会无期里面，阿吕说过这么一句话：”你连世界都没有观过，哪里来的世界观”，在我们实际的项目开发中，比如你用的是vue，那么vue已经有很好的脚手架工具(vue-cli)供你使用了，或者有的开发团队，会有技术Leader专门预先做好相关的模板，方便后来新加入的成员尽快上手项目，但是随着你开发的项目越多，你可能会越不注意到那些最基本的东西，比如说这个模板到底是如何搭建的，或者说让你自己来搭建一个模板给其他人用，是否也能做到如此的简单易上手，我想这是每一个想要在前端路上进阶的人需要考虑的问题。</p><p>最好的方式就是自己试着去搭一个最简单的模板，从0到1的过程是最痛苦的，但是1到2或者说2到3都是水到渠成的事，下面就看看怎么开始从0搭建一个基于webpack的vue的开发环境</p><h4 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h4><p><strong>注：使用的webpack版本为^3.10.0</strong><br>首先通过webstorm或者你手上的其他IDE创建一个空的项目，我这里暂且叫proWebpack，创建好后是这个样子的：</p><p><img src="https://user-images.githubusercontent.com/11991572/40214592-3caf2c6a-5a8e-11e8-8b62-fceca0fe7f72.png" alt="文件目录"></p><p>因为我们通过npm来管理包，然后每个项目的根目录下都会有一个<code>package.json</code>文件来管理项目的配置信息，包括名称、版本、许可证等元数据以及记录所需的各种模块，包括 执行依赖，和开发依赖，我们可以通过在命令控制台用<code>npm init</code>命令创建一个<code>package.json</code>文件，但是这样很麻烦，因为这样<code>npm</code>会通过命令行问答的方式来初始化并创建<code>package.json</code>文件，为了方便起见我们使用<code>npm init -y</code>，这样<code>npm</code>就会使用一些默认值进行初始化：</p><p><img src="https://user-images.githubusercontent.com/11991572/40214608-4f2b84e2-5a8e-11e8-8475-79d9d265800e.png" alt="运行结果"></p><p>ok现在我们得到一个package.json文件，包含了一些简单的信息比如name、version等字段，接下来，因为我们是想搭建一个用于vue开发环境的webpack目录结构，到目前为止还没看到vue的影子，依然是在命令行使用<code>npm install vue --save</code>，这里注意<code>package.json</code>中的依赖包有<code>dependencies</code>和<code>devDependencies</code>两种，这两种的区别：<code>dependencies</code> 表示我们要在生产环境下使用该依赖，<code>devDependencies</code> 则表示我们仅在开发环境使用该依赖，我们install时候使用–save会把包安装在dependencies 下面，所以执行完上面的命令你可以看到这样的目录结构：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"proWebpack"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.5.16"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在<code>devDependencies</code>下面安装webpack，再次提醒，由于webpack4变化较大，这里使用^3.10.0版本的webpack： <code>npm install -D webpack@3.10.0</code>，此时目录结构如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"proWebpack"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"vue"</span>: <span class="string">"^2.5.16"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.10.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="创建入口文件"><a href="#创建入口文件" class="headerlink" title="创建入口文件"></a>创建入口文件</h4><p>接下来创建入口文件，在根目录下创建一个index.html作为启动页面，一个webpack.config.js作为webpack配置文件(实际项目中这里会有webpack配置文件，分别用于开发环境和生产环境，这里简便起见就用一个配置文件)，新建一个src目录，在该目录下新建一个index.js作为打包入口文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">proWebpack</span><br><span class="line">├─ index.html 启动页面</span><br><span class="line">├─ package-lock.json</span><br><span class="line">├─ package.json 包管理</span><br><span class="line">├─ src</span><br><span class="line">│    └─ index.js 入口文件</span><br><span class="line">└─ webpack.config.js  webpack配置文件</span><br></pre></td></tr></table></figure></p><p>为了更接近vue-cli创建出来的模板，我们还需要创建一个Vue实例提供给入口文件的el挂载，这个Vue文件很简单长这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;proWebpack&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></p><p>然后写好入口文件：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../App.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>同时别忘记在Index.html里面要提供一个供vue实例挂载的HTMLElement实例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>proWebpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span>proWebpack<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样准备工作做得差不多了，下面做最核心的部分</p><h4 id="webpack-config-js的编写"><a href="#webpack-config-js的编写" class="headerlink" title="webpack.config.js的编写"></a>webpack.config.js的编写</h4><p>webpack有这么几个核心的概念：</p><ul><li>entry 入口起点，webpack会找出入口起点的直接或间接依赖项，将他们进行处理输出为我们称之为bundle的文件中</li><li>output 输出路径，告诉 webpack 在哪里输出它所创建的 bundles以及如何给这些buldles命名</li><li>loader 因为webpack本身只能理解javascript文件，所以当我们要用vue或者React的时候可以使用相关的loader(比如我们熟知的vue-loader)来将其转换成webpack 能够处理的有效模块</li><li>plugins 扩展插件，可以用于打包的优化和压缩，这个可能要结合实际使用更好理解</li><li>module 模块 webpack中的一切你都可以理解为模块</li><li>chunk 代码块，一个 chunk 由多个模块组合而成，用于代码合并与分割。</li></ul><p>下面开始配置，因为所有输出文件的目标路径必须是绝对路径，所以这里要用到使Node.js 的 path 模块<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 引入webpack和path模块</span><br><span class="line">const path = require('path')</span><br><span class="line">const webpck = require('webpack')</span><br></pre></td></tr></table></figure></p><p>简单配置文件的entry和output<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> webpck = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">const</span> productionPath = <span class="built_in">require</span>(<span class="string">'./package.json'</span>).name</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: <span class="string">'./src/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>, productionPath),</span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里代码应该不难理解，就是从<code>index.js</code>这个入口进去，把直接或间接依赖项打包输出dist文件夹目录下,<br>怎么运行呢，我们需要在<code>package.json</code>的scripts对象里面添加我们自己的build命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//  这里用最简单的命令</span><br><span class="line">&quot;build&quot;: &quot;webpack -w&quot;,</span><br></pre></td></tr></table></figure></p><blockquote><p>因为我们的webpack配置文件就叫webpack.config.js，默认情况下，webpack在执行的时候会搜索当前目录webpack.config.js 文件执行，实际开发中我们会使用 –config 选项来指定配置文件来对开发环境和生产环境的配置做出区分</p></blockquote><p>直接在控制台<code>npm run build</code>，果不其然报错了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> ./App.vue</span><br><span class="line">Module parse failed: Unexpected token (<span class="number">1</span>:<span class="number">0</span>)</span><br><span class="line">You may need an appropriate loader to handle <span class="keyword">this</span> file type.</span><br><span class="line">| <span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">|   <span class="tag">&lt;<span class="name">div</span>&gt;</span>proWebpack<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">| <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"> @ ./src/index.js <span class="number">2</span>:<span class="number">0</span><span class="number">-28</span></span><br></pre></td></tr></table></figure></p><p>很明显，webpack告诉我们他没法识别vue文件，需要我们提供一个相关的loader来处理成webpack可以识别的文件，这里先<code>npm install vue-loader -D</code>，然后回到<code>webpack.config.json</code>配置loader：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const webpck = require(&apos;webpack&apos;)</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    index: &apos;./src/index.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;bundle.js&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  module: &#123;</span><br><span class="line">    // 模块配置</span><br><span class="line">    rules: [</span><br><span class="line">      //模块规则(配置 loader、解析器等选项)</span><br><span class="line">      &#123;</span><br><span class="line">        // 这里是匹配条件，每个选项都接收一个正则表达式或字符串</span><br><span class="line">        // test是必须匹配选项</span><br><span class="line">        // exclude 是必不匹配选项(优先于 test 和 include)</span><br><span class="line">        // 对选中后的文件通过 use 配置项来应用 Loader，可以只应用一个 Loader 或者按照从后往前的顺序应用一组 Loader，同时还可以分别给 Loader 传入参数。</span><br><span class="line">        test: /\.vue$/,</span><br><span class="line">        exclude: /node_modules/,</span><br><span class="line">        use: &#123;loader: &quot;vue-loader&quot;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置好之后再run一遍，咦，又报错，我们看下主要的报错信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR in ./App.vue</span><br><span class="line">Module build failed: Error: Cannot find module &apos;vue-template-compiler&apos;</span><br><span class="line">    at Function.Module._resolveFilename (module.js:527:15)</span><br><span class="line">    at Function.Module._load (module.js:476:23)</span><br></pre></td></tr></table></figure></p><p>cannot fount那就是需要我们去install呗，但是为什么要下这个模块，我找到一个比较靠谱的说法：</p><blockquote><p>其中 vue-template-compiler 是 vue-loader 的 peerDependencies，npm3 不会自动安装 peerDependencies，然而 vue-template-compiler 又是必备的，那为什么作者不将其放到 dependencies 中呢？有人在 github 上提过这个问题，我大致翻译一下作者的回答（仅供参考）：这样做的原因是因为没有可靠的方式来固定嵌套依赖的关系，怎么理解这句话？首先 vue-template-compiler 和 vue 的版本号是一致的（目前是同步更新），将 vue-template-compiler 指定为 vue-loader 的 dependencies 并不能保证 vue-template-compiler 和 vue 的版本号是相同的，让用户自己指定版本才能保证这一点。<a href="https://github.com/vuejs/vue-loader/issues/560" target="_blank" rel="noopener">查看作者的回答（英文）</a> 。如果两者版本不一致，运行时就不会错误提示。</p></blockquote><p>那只需要我们<code>npm i vue-template-compiler -D</code>一下，然后在跑一遍build脚本，不出意外你应该能在项目根目录看到一个dist文件夹，把这个文件夹里面的js文件引入启动页面：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>proWebpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span>proWebpack<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/dist/bundle.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>接下来我们要访问这个页面，这里用到webpack提供的devsever来调试我们的页面， DevServer 会启动一个 HTTP 服务器用于服务网页请求，同时会帮助启动 Webpack ，并接收 Webpack 发出的文件更变信号，通过 WebSocket 协议自动刷新网页做到实时预览。这就是为什么你用vue-cli搭建出来的脚手架可以做到页面实时渲染，配置这个也很简单，在<code>webpack.config.js</code>里面添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    port: 3000, // 端口号</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>其实webpack-dev-server可以配置很多参数，这里不过多展开，接下来需要修改下我们的build脚本：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"build": "webpack-dev-server"</span><br></pre></td></tr></table></figure></p><p>别忘了<code>npm install</code>一下<code>webpack-dev-server</code>，最后执行npm run build看到控制台报出成功信息并告诉你你的项目正运行在localhost:3000：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br><span class="line"></span><br><span class="line">&gt; proWebpack@1.0.0 build D:\proWebpack</span><br><span class="line">&gt; webpack-dev-server --open</span><br><span class="line"></span><br><span class="line">Project is running at http://localhost:3000/</span><br><span class="line">webpack output is served from /</span><br></pre></td></tr></table></figure></p><p>访问localhost:3000看到如下显示的话，恭喜你，webpack配置如何从0到1你应该已经清楚了：</p><p><img src="https://user-images.githubusercontent.com/11991572/40214626-60d44eb8-5a8e-11e8-92a4-a91cb08c0b5e.png" alt="渲染结果"></p><h4 id="更进一步"><a href="#更进一步" class="headerlink" title="更进一步"></a>更进一步</h4><p>我们知道了怎么初步配置webpack还远远不够，实际开发中我们会遇到更多样的情况，比如说<br>当我们只有一个输出文件的时候我们可以在output写死，就像我们上面写的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.join(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;bundle.js&apos;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>但是当我们有多个文件输出的时候，一个个去写是一个费力不讨好的做法，这个时候就要用到webpack内置的变量了，我们可以这么写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.join(__dirname, &apos;dist&apos;),</span><br><span class="line">    filename: &apos;[name].[hash].js&apos;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这样会赋予每一个bundle唯一的名称，并且在每次构建过程中，生成唯一的 hash ，这时候稍微改动一下脚本文件：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "start": "webpack-dev-server",</span><br><span class="line">    "build": "webpack -w",</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1"</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure></p><p>之前写一起是为了方便理解， 现在我把跑本地服务器和打包的脚本拆开写，更语义化，一般正常开发也是这么做的，先跑一下build，你会发现此时dist文件夹下面生成了新的打包文件<code>index.8ad46f4fb5c8385db614.js</code>，然后把这个文件同样引入<code>index.html</code>，跑start脚本发现结果也是照常输出，但是又有了新的问题，如果我们每次build之后都要手动引入带着一长串hash的js文件也是很蠢的事情，所以这里我们可以用上一个plugin叫做<code>html-webpack-plugin</code>，这个插件主要有两个作用：<br>1、在每次编译完成之后动态为html文件引入外部资源(script、link)，对于我me你这种带hash的文件名来说无疑是极为方便的<br>2、可以制定一个模板的html文件，html-webpack-plugin可以根据这个模板来生成html入口文件</p><p>下面看下如何使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入</span></span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line">    <span class="comment">//省略若干代码</span></span><br><span class="line"> plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'./index.html'</span>, <span class="comment">// 生成的入口文件的名字，默认就是index.html</span></span><br><span class="line">      template: <span class="string">'./index.tpl.html'</span>,<span class="comment">// 有时候，插件自动生成的html文件，并不是我们需要结构，我们需要给它指定一个模板，让插件根据我们给的模板生成html</span></span><br><span class="line">      inject: <span class="string">'body'</span>,<span class="comment">// 有四个选项值 true, body, head, false----true:默认值，script标签位于html文件的 body 底部 body:同true head:插入的js文件位于head标签内 false:不插入生成的js文件，只生成一个纯html</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure></p><p>用到的<code>index.tpl.html</code>只是和之前的<code>index.html</code>作了一点小小的区分，让人知道这是模板生成的：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// index.tpl.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>这是模板生成的<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"app"</span>&gt;</span>proWebpack<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>方便起见我们在<code>package.json</code>在添加一个clean的脚本，每次build之前先删除之前生成的dist文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack-dev-server&quot;,</span><br><span class="line">    &quot;build&quot;: &quot;npm run clean &amp;&amp; webpack -w&quot;,</span><br><span class="line">    &quot;clean&quot;: &quot;rimraf dist&quot;, // 添加clean脚本</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>然后run build一下：<br><img src="https://user-images.githubusercontent.com/11991572/40266366-85f26740-5b7c-11e8-9476-adb1539ca6a0.png" alt="模板生成的结果"><br>我们发现这个时候的入口文件已经是根据模板自动生成的了，而且自动把生成的js文件添加到了入口文件里面，同时npm run start命令看到的界面也是使用模板生成的页面，这就大功告成了。</p><h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>其实这里还有一点没有提到的就是css的处理，除了css-loader我们平常开发还会用到一些css预处理器如scss，还有postcss等样式处理工具，这里的处理其实也不难，感兴趣的朋友可以自己尝试一下，这里由于篇幅原因(我想偷懒)就不过多展开了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;为什么要用webpack&quot;&gt;&lt;a href=&quot;#为什么要用webpack&quot; class=&quot;headerlink&quot; title=&quot;为什么要用webpack&quot;&gt;&lt;/a&gt;为什么要用webpack&lt;/h4&gt;&lt;p&gt;关于为什么要使用webpack，我比较认同的一种说法是：&lt;/
      
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="webpack" scheme="https://www.limuyang.cc/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>未知旅程 合影留念</title>
    <link href="https://www.limuyang.cc/2018/04/29/%E6%9C%AA%E7%9F%A5%E6%97%85%E7%A8%8B-%E5%90%88%E5%BD%B1%E7%95%99%E5%BF%B5/"/>
    <id>https://www.limuyang.cc/2018/04/29/未知旅程-合影留念/</id>
    <published>2018-04-29T10:07:17.000Z</published>
    <updated>2019-08-16T09:03:51.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.tuchuang001.com/images/2018/04/29/cbb1h-1xpym.jpg" alt></p><a id="more"></a><p>从1994年的17号台风，父亲出海时浩汉10岁，莺莺口中的19年前，旅行者1号飞出太阳系，周沫所在的某中国南部影视城的黄叶满，苏米口中的天气马上变暖地这些线索基本可推知：三兄弟出发的时间大概是2013年冬天，浩汉2013年29岁左右。此行的出发点是东极岛，根据发射地点在印度，江河口中的3980公里(图上直线距离，因为浩汉偷蛋的情节里江河拿出地图说到了比例尺)，基本可推至目的地在中印边境的西藏南部。</p><p>   人物分析。电影里，所有人都是骗子，也都被别人骗了。高明之处就在于，他们说的假话，骗了电影里的人，也骗了电影外的人。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28793502&auto=0&height=66"></iframe><h4 id="胡生"><a href="#胡生" class="headerlink" title="胡生"></a>胡生</h4><p>胡生这站，叫乡情。</p><p>   如果你以为傻子就只是傻子，那你就错了。</p><p>   胡生其实很明白，自己根本不适合外面的世界。在周沫工作的那个影视基地，你可以看出他对外面世界的巨大陌生与疏离。所以他骗了江河浩汉，说是去抽烟，个人觉得更有可能是他自己思考了许久，见江河浩汉已走，便自己回了东极岛。</p><p>   依据是，浩汉打电话问宾馆前台，宾馆前台就没看到过“抽烟”的这个人。当然你会反驳，前台根本懒得理他们。但是按出发前江河给胡生的指示，“无论你在哪公里走丢，只要回到原地等就可以，至于其他的，我都安排好了”。所以如果胡生在原地等，宾馆、电台是一定会找到他的。</p><p>   比较有意思的是这样一句话，“大家都说我脑子有问题，他们(江河浩汉)说我是正常的。”原因很简单。江河没观过世界，有着老师一样平等待人的善良。而浩汉则是因为，胡生是东极岛上唯一说他“很坚强”并且“很欣赏”他的人，所以作为本能回馈，说他脑子没问题。</p><p>   然而事实是，当胡生丢了的时候，江河浩汉根本就没回头找他。只是在电台广播登了一条寻人启事。然而事实是，当寻人电台反问浩汉所寻之人是智障否的时候，浩汉没怎么犹豫就回复了“啊，对”。然而事实是，甚至在江河的幻想中，邻居周沫姐姐成名了，兄弟出书衣锦还乡了，根本就忘了有他胡生这么个人。至于为什么是江河的幻想，后面说江河的时候再解释。</p><p>   胡生跑回岛上，等了他们所有人3年。从岛歌时的破败荒芜到最后的开满烟花，都没能再见到家乡曾经的朋友。胡生自离开东极岛的第一天晚上私自跑回家乡，他熟悉的，没有第二个人的东极岛，找回属于自己的平凡之路，和所有人，后会无期。</p><p>   或许胡生的结局，是所有人里最好的。</p><h4 id="周沫"><a href="#周沫" class="headerlink" title="周沫"></a>周沫</h4><p>周沫这站，叫友情。她有点像《1988》里的孟孟，但却不是。</p><p>   你身边一定有一个叫周沫的人，她儿时同你一起成长。后来，你们分开，但是，你们都没忘了彼此，偶尔联系一定会说，有机会一定一起吃个饭，或者是，要常聚常联系啊。</p><p>   而她却已不是当年的她：“大城市就跟这个片场差不多，没什么意思”，“往上爬，得靠人际关系，家庭势力”。虽然自己只是个替身，不过依然乐观。因为她坚信，“背井离乡就得要出人头地”。</p><p>   其实哪有公平呢，当他们走在影视基地里时，一旁的群演三五成群的聚成一堆，替身从空中吊着威亚落地，蓝色衣服的八路、绿色衣服的伪军、黑色衣服的国军打成一片，或许在镜头之外，许多正演在那边补妆吃饭，而很多想演群众演员的路人正在门外等待。他们之中有多少人只是为了混口饭吃，而又有多少人是真的有怀有一个演员梦。片场里，一行人穿过影视基地，其实是穿过了太多人的人生和喜怒哀乐。（楼主乱入一下，这里楼主认为还含有对目前泛滥的抗日神剧的一个讽刺）</p><p>   在江河意淫的结局里，她红了，结尾船上的电视里，她成为万千人的偶像。或许她真的红了，因为她有一天摸透了这个行业真正的规则；或许她依旧只是个小演员，在为自己的前途努力打拼。</p><p>   然而在真实的场景里，周沫骗了浩汉。</p><p>   她先是试探的问了浩汉关于莺莺的情况。浩汉说自己“混得一般，留个念想”。看到浩汉依然对莺莺念念不忘，她自己找了个台阶：“幸亏我10岁的时候，就及时不喜欢你了”。或许周沫10岁那年，浩汉的父亲离开了浩汉，或许周沫10岁那年，浩汉开始与莺莺通信，从此心中只有莺莺。</p><p>   然而喜欢就是喜欢。不然怎么会那么努力，去找浩汉喜欢的明星要签名照？不然在分别时，怎么有那么深情的一个回眸？</p><p>   然而，粉转路人，以及，浩汉心不在焉，这才是事实。</p><p>   浩汉说粉转路人的时候，周沫的脸上，先是笑脸，然后僵住疑惑，接着是自嘲似的淡笑，最后是巨大的失落。自信满满希望能让对方喜欢，却换来一个残损的回应，浩汉啊浩汉，你哪怕是安慰我一下也好，为什么就那么忍心伤害一个喜欢着你的人？</p><p>   因为对恋人，我们习惯说假话，对朋友，我们习惯说真话。所以周沫和浩汉，只能是朋友。</p><p>   然后浩汉继续补刀，说周沫“这身衣服没刚才那件好看”，周沫终于从对浩汉的幻想中走出，“这衣服也不合身，头发还是假的，你以为我有的选啊”。</p><p>   你。以。为。我。有。的。选。啊。周沫的悲剧就在，她没得选。喜欢的角色没得选，喜欢的人也没得选，一切都是因为，走上的路让她没得选。</p><p>   完美时不真实，真实时不完美。你看我完美时，我不过是替身。你看我不是替身时，我却只能穿上不合身的衣服，带上假的头发。</p><p>   浩汉说两人从小一起长大，但却说不算青梅竹马，希望两人时常见面。周沫此时的脸上，洋溢着巨大的喜悦。没关系，你记得我们一起长大就好，没关系，你希望时常见我就好。</p><p>   她希望自己有一天可以用真实的完美的站在儿时喜欢的浩汉面前。就像是他们在电影里第一次相见时那样，浩汉和他就这么互相凝望对方到出神。</p><p>   她不想去接浩汉送她的花，我猜不是因为“不好拿”，而是她怕那束花侵占了拥抱浩汉的空间。她是多么希望和自己哪怕是曾经喜欢的人在可能是诀别的那次分别前互相拥抱。</p><p>   然而只能是，朋友。所以，什么都没发生。周沫说去下一部戏，浩汉说去下一个地方。周沫的下一部戏，是被枪杀，是终结，是死亡，或许，也是释然。浩汉的下一个地方，据胡生的交待，是莺莺，是浩汉从未见过的lover，是希望，是新生，是浩汉在外10年的支柱和动力。然而事实是，殊途同归。</p><p>   “幸亏我10岁的时候，就及时不喜欢你了”。在说这话之前，周沫用手把浩汉英俊的脸扭向自己。这个小动作像极了情侣之间信誓旦旦前的准备活动，然而周沫说出口的不是“你知道吗，从10岁那年我就一直喜欢你”，而是她知道，只能是朋友，不然连这样轻松逗弄你的机会，都没有了。</p><p>   “记得啊，要是你们以后还混得不好，可以来找我”，“混得好，你们就不会来找我了”。这话虽说是“你们”，但却是对浩汉一个人说的。潜台词是“浩汉，如果你落魄，我会一直等你”“浩汉，如果你成功，就去给你爱的人幸福，那个人，一定不是我”。周沫说这话时云淡风轻，就像是对自己说一样。</p><p>   我没有一个字说我爱你，但我的每一句话，每一个表情，每一个动作都在说我爱你。因为你粉转路人，因为你心不在我。所以，你。以。为。我。有。的。选。啊？我能做什么？我只能默默地，凝望你，祝福你。</p><p>   这份情感，像极了莺莺口中的“但爱，就是克制”。这克制，在片场你望我的时候，在路上我逗你的时候，在桥头你伤我的时候，在路上我离开的时候。</p><p>   周沫留下的那个美极了的回眸消失在浩汉继续前行的路上，眼神里，是对浩汉单纯而炽烈的情感，或许你的视线里早已没有我，但我知道，你肯定会在那个方向，转身离开。所以在你消失的那一刻，我依然可以，挂着幸福的笑。</p><p>   一声枪响，在替身小演员的平凡之路上，周沫和所有人，后会无期。</p><p>   然而你是这世界上最好看的姑娘。</p><h4 id="苏米"><a href="#苏米" class="headerlink" title="苏米"></a>苏米</h4><p>苏米这站，叫爱情。他有点像《1988》里的娜娜，但也不是。</p><p>   苏米也是个骗子，不折不扣的，正义的，组团来的，骗子。</p><p>   同江河的相遇，就像是江河给那个宾馆下的定义一样：“顺路又便宜，缘分吧”，于是此等便宜且顺路的“好事”，摊给了江河。</p><p>   仙人跳的过程从一开始就埋好了伏笔，此时故事双线开展。浩汉注意到的那辆满身泥点的黑色轿车，这便是三叔团伙的线索。</p><p>   然后电影是一段复制《1988》的开房经历：保安裹着军大衣背对着路睡在迎客松的招牌下的沙发上？前台的服务员不知去向。我叫了一声服务员，保安缓缓伸出手，把军大衣往空中一撩，放下的时候那里已经半坐着一个女服务员。服务员边整理头发边梦游一样到了前台后面。</p><p>   于是转角遇到爱。苏米出场。</p><p>   苏米接到了三叔发来的暗号，就是那首《Que Sera Sera》。江河当着苏米朗诵歌词中文版的时候，我想不只是苏米动了心。一个满脸沧桑，一本正经却浪漫文艺的“大叔”放在任何女生面前，都具有足够的杀伤力。就着辣酱面包的文艺大叔，让苏米认识到，这世上竟有在如此诱惑下依然淡然于此享受音乐美食的特立独行的可爱之人。江河顺手递给苏米他的黑暗料理，打断了苏米想要说的话。这时舒缓的钢琴曲盖过《QSS》，江河的单纯引发了苏米对儿时美好的思索，侧脸上，浮现了与行骗相悖的美好的笑。</p><p>   这一刻，不管你时妓女也好，骗子也罢。都会疯狂对这个厨师产生莫大的好感，因为他烹饪出了，你心里怀念的味道。</p><p>   他们的相爱。一个是装狠，一个是真纯。</p><p>   然后是分属不同次元的二人光怪陆离的对话。</p><p>——老师，你喜欢脚啊？<br>——当你赤脚踩在地板上时，就不会有静电了。</p><p>   这样的对话一出，便预示着二人便再无可能在一起了。最后船上的镜头，不过是《旅行者》里的镜像罢了。</p><p>   “江老师，我不是你的学生，你不用对每个过客负责，也别去教路人该走那条路。”，“从小到大我都是优，你叫我怎么从良？”潜台词是：我怎么生活你管不着，你我不过路人。苏米是个有故事的人，这样的姑娘其实很难找到能说话的人。因为说出口的每句话都话中有话，可到最后你发现她通通是说给自己在听。好像肯跟着你去到天涯海角，真要离开的时候无所牵挂。</p><p>   苏米虽然是个骗子，但本性依然有善的一方面。比如对肚子里孩子的绝对呵护。她关心面包里是否有防腐剂，她要赚钱在国外生孩子。她的价值观是：嫖客是错的，去赚犯错人的钱就是没错。看上去似乎有那么一点“以邪制邪”的正义。然而在三叔眼里，她和江河浩汉还都是孩子，因为“小朋友爱分对错”。</p><p>   她想把自己的故事都将给江河听，这故事一定很坎坷，但无非如此：当我还是一个小女孩的时候，我问我的妈妈，我将来会成什么样呢？我会变美丽吗？我会变富有吗？她是这么的告诉我的——568包钟，868包夜。</p><p>   于是在犹豫之后，她还是离开了江河。江河是男人，是男人就有成为负心汉王八蛋的可能。所以她最后还是踏上了三叔的车，带着江河给予她泯然前的挣扎，走上平凡之路，与所有人，后会无期。</p><p>莺莺</p><p>莺莺这站，叫亲情。</p><p>   同样的，也是骗子，骗了浩汉19年。</p><p>   在一开始，她是我们生命中最爱的那个姑娘，而她所在的地方，叫做远方。莺莺对于浩汉，在胡生一开始介绍形成的英文字幕里，就是“dream lover”。</p><p>   浩汉紧张而又专注的望着莺莺老练的换着电灯泡，而后刘莺莺回头，浩汉挤出了一丝微笑，而刘莺莺却像见一个老朋友般，大大方方伸出了自己的手，自信的说出来自己的名字，浩汉伸手，却被两人中间硬隔着一个台球桌阻挡了。</p><p>   横在两个人中间的，是隐藏了19年的巨大骗局。</p><p>   浩汉为了掩饰尴尬提出了来一局台球，自信满满的浩汉认为拿下莺莺志在必得，不仅是球桌上的拿下。于是开球的他上来没有什么策略，就是“大力出奇迹”，即使莺莺把巧克粉放在浩汉旁边，示意让他做好准备在出杆，浩汉也丝毫不为所动。</p><p>   结果自然是换莺莺上手。“你先听我说完，别问问题”第一颗球打进。<br>    现在告诉你可能不早不晚，虽然我们认识时间久，但见面时间短。第二、三颗球打进。<br>    19年前，9417号台风，你父亲离开了你。第四颗球打进。<br>    你视父亲为偶像，你认为他死得其所。第五颗球打进。<br>    其实他没死，而是来找了我和我妈。第六颗球打进。<br>    他来换欠我们母女的债，而你也长大了。第七颗球打进。<br>    天底下不是所有债都能还，而他对你则欠下了新债，他很想知道你的消息。第八颗球打进。<br>   于是我们就“偶然的”认识了，我们通信，是你父亲想知道你的消息。台面上只剩最后一颗球。<br>    然而莺莺打不下去了，收杆。因为，父亲死了，真的是真死了。莺莺一直都在说，你父亲。却从没说，咱爸。</p><p>   当一场浩大的骗局在你面前被坦白的时候，你会怎么做呢。愤怒，失落，委屈，还是悲伤。浩汉拿着台球杆在一旁听完了整个事情的来龙去脉，他一言不发看着莺莺一个一个打进台面上的球，就像一层一层揭开少年时的疤。</p><p>   莺莺把球半轻半重地塞入球网，一切尘埃落定，开门离开，“你消化一下吧”。</p><p>   讽刺的是，浩汉眼中神话一般的父亲，不是死在搏击风浪中，而是喝了酒，抽了烟，点了房子，烧死了。</p><p>   “每一封信都是我写的，”所以莺莺在乎浩汉；“只不过后来，只剩我一个人读了。”所以莺莺在乎父亲。</p><p>   然而2013年，莺莺只在这个小镇，开了一家小台球厅。所以她留不住弟弟浩汉。浩汉在外打拼了10年，却只有一部车，又要送江河入职。所以浩汉载不走爱人莺莺。</p><p>   “喜欢就会放肆，但爱就是克制”，浩汉临走前刘莺莺沙哑着喉咙告诉他这个道理。我想，浩汉对莺莺是放肆，而莺莺对浩汉，则是深沉的爱。既有男女之爱，也有姐弟之爱。</p><p>   骗一个人19年，浩汉难过，莺莺又何尝好受。骗人的人永远比被骗的人痛苦，在她根本不想欺骗的前提下。命运可笑地将他们联系在了一起，用一种以为是偶然，但是其实是必然的方式。</p><p>   “你有我的一切联系方式，走吧。”。潜台词是，“我等着你回来，在任何你想回来的时候。”。</p><p>   于是浩汉上路，他甚至还没决定选择哪种情绪接受这个现实。那个注定要错过的好姑娘，转身离开，在新的一桌台球里，踏上释怀之后的平凡之路，同所有人，后会无期。</p><h4 id="阿吕"><a href="#阿吕" class="headerlink" title="阿吕"></a>阿吕</h4><p>阿吕这站，叫无情。</p><p>   他用高超的骗术，印证了歌词里那句“当一部车消失天际，当一个人成了谜，你不知道，他们为何离去，就像你不知道这竟是结局。”。回头再看，你仍然不知道他那句是真，那句是假。</p><p>   我宁愿相信，他说的话都是真的。</p><p>   你永远猜不到自己会在什么时候遇见阿吕。一个计划之中的转弯，一次计划之外的停泊，每一个转角都有可能遇见未知的旅人，但又未必就是他。<br> 　　<br>  阿吕，是我们每个人生命中或早或晚，迟早要出现的那个人。<br>　　<br>   他幽默，豁达，身上背负着千山万水的情怀。他行程十几万公里，心中有着不为外人所知的遗憾。他生里来，死里去，看着最亲爱的人离开自己，又用自我的方式将她铭记——即便那不是真的。 </p><p>   阿吕像一个悖论，你希望成为他，但又抗拒成为他。他说，小伙子，你应该多出来走走的。江河下意识地反抗，可是我的世界观和你的不一样。于是他笑了，你连世界都没有观过，哪儿来的世界观。江河无从反驳。</p><p>   终究无法抗拒阿吕的魅力，于是你信任了这样的一个人。你觉得他可交，甚至愿意和他一起上路。你满心期待，准备转身告诉他这可能是你一生中最重大的决定——接着你看到了他的背影。你不确定这是真的还是假的，只能站在原地傻傻等待，心中怀有最后的欢喜。直到他放下了所有你的行李，也卸下了你所有的期望，你到那时才相信，他给你上了一课，却无情地收了高额学费。<br>　　<br>   或许他死了，和可笑的nt3m5p卫星一样没升空就炸了，因为在高温环境下，汽油车是吃不起柴油的。或许他没死，和旅行者1号一样冲破太阳系，运气好驾着骗来的车，回到东莞卖车买摩托娶个懂他的新老婆。</p><p>   他到底叫吕洞宾，还是叫吕行者？总之，在放下马达的那一刻他驱车飞驰消失，走上荒凉的平凡之路，同所有人，后会无期。</p><h4 id="江河"><a href="#江河" class="headerlink" title="江河"></a>江河</h4><p> 江河这站，叫兄弟情。</p><p>   胡生对江河老师的评价是：“他人很怪”。连胡生都觉得他怪，东极岛民自然觉得他更怪。</p><p>   自带“说教”光环和“全知”光环。书本上的东西，他全都懂，而且有个“我教你”的口头禅——“这是比例尺，我教你啊”，“我教你啊，面包和辣酱……” 面包夹辣椒，工作靠分配，不喜往上爬，从事小教12年。周沫说他不思进取。如果你跳出电影看这么个男人，估计哪个女的都不愿意跟他，窝囊。</p><p>   然而就像阿吕说的，“有时你想证明给一万个人看，最后发现，只有一个人懂，这就够了”，对于浩汉，那个人是胡生，而对于江河，那个人是苏米。</p><p>   三叔那条线，原计划该是“警察”查房，然后捉奸，敲一笔竹杠。一向正气浩然的江河表现出了一种少有的霸气，锁上门，踹开窗，带着苏米和浩汉开溜。这一切都是为了苏米那句“你要保我”，然而在全过程中，这种霸气只是一种看似冷静的霸气。因为他完全可以让警察进来，说这是我朋友和我妻子，这样或许胡生也就不会消失。在苏米“你要保我”的催化下，江河激发出的是强烈的个人英雄主义情怀，为了这个一见钟情的女子，一改以往“动口不动手”的儒士风范，做了带她一起上路的冲动决定。于是根本来不及思索，夺窗而逃。但这逃也是非常有趣的，来看看在“身败名裂”的危机关头江河的整套下意识动作：先送苏米出，再给苏米鞋，指了奶色的车，扔出行李，再掩护队友离开，随后自己跳窗，拉上心爱的女生，冲上车，并一度在惊吓中驾驶不肯让出方向盘。这套动作考虑全面几近完美，如果不是逃跑这个目的，那简直可算作《如何成为一个女生心中的男神》的教科书范例。在这样有情有义的男子面前，我想没有哪个女生不会对他产生好感。</p><p>   此时镜头不断切换优雅的苏米，紧张的江河，腿麻而龟爬的浩汉，背景音乐重复苏米敲门进入时的诱惑音乐——于苏米这只是一个排演了不知多少遍的局，于江河浩汉则关乎“身败名裂”。这样的对比冲突加上背景音乐的烘托正搔到观众的G点，舒服的不行。</p><p>   “我决定的事，不会被改变。”。江河认真了，或者，还没回过神。但无论如何，他单纯的可爱。</p><p>   谈谈即将分别的时候。阿吕开走了浩汉的车，两兄弟在经历了一路和谐之后，终于在最后抑制不住自己内心的情绪，产生了强烈的矛盾。江河觉得他一定有苦衷，情有可原。浩汉觉得事实放在眼前，何必用那种话安慰自己。转而产生了彼此价值观的矛盾和冲突，谁都劝说不了谁，于是一场没有结果的争斗在一望无垠的道路上展开了。这场闹剧越发强烈——直到nt3m5p轰然升空，缓缓上扬，又忽然爆炸。</p><p>   在江河心中，他被阿吕“你连世界都没观过”的话刺痛，因为说到自己痛处，所以他相信阿吕没有说谎，有苦衷。然而看到连阿吕的梦“破碎”了，还没迈出第一步的自己，又去和浩汉争论什么呢？</p><p>   在这一刻，我相信不止我一个人想到《秒速5厘米》的那个片段。吐个槽，两人打得很出戏，即视感全无，根本不像是动手打人，这是我唯一找出的两个男主演的不好的地方。</p><p>   在火箭残骸旁，两人最终告别。此时江河已经发生改变，他从一开始关注“入职”到关注“横穿整个中国”。改变他的，是阿吕，而浩汉与之刚刚相反，他的回复是“那有什么意义呢？”。此时浩汉也已发生改变，他从关注“横穿整个中国”到关注“意义”。改变他的，也是阿吕。</p><p>   马达一定会选择江河，因为狗比人清楚，在没水，没车，没朋友的境况下，浩汉原路折返，能不能活着走出这戈壁，都是问题。这是马达设定的第一个必要。</p><p>   马达设定的第二个必要，就是印证江河之死。一会再说这个问题。</p><p>   说说让人觉得甚至有些生硬的“后来”。</p><p>   一周目的时候，觉得这结局简直草率。直到四周目的时候，我似乎看明白了点。</p><p>   江河回到东极岛时，下着大雨。然而东极岛的柴伯公雕像，就是那个自由男神，居然举着燃烧的火炬！</p><p>   大雨和火，在东极岛之歌的尾声出现过短短一瞬，毫无疑问，火燃烧了一刹那，就熄灭了。然而在结尾，大雨之中火炬居然熊熊燃烧在天际。</p><p>   然后是幽灵导游的出现。全场景，只有江河一个人在山上走。</p><p>   接着是无厘头的“80集电视剧”和“观影狂潮”，以及超越《继承者》。这里又有个很大的矛盾，电视连续剧怎么能用“观影”呢？而且，这样天马行空的介绍甚至扯到韩国收视，未免也太天马行空了吧？最后导游的话是，“要买纪念品的朋友请往这边走”，整组画面依然是江河和山头。莫非是平行时空里天上的街市？<br>是否能这样大胆猜测，唯一解释的是，“后来”不过是江河《旅行者》里的镜像。也就是把小说里的象征性描写语言以画面的形式展示。柴伯公的火代表理想自由与探索之火，在现实的滂沱大雨面前依然熊熊燃烧。幽灵导游则是反映了东极岛被建设的十分繁华。</p><p>   于是后面的情节也顺畅了起来。在《旅行者》这部书里，江河依旧没忘记自己钟爱的教育事业，东极岛又有了学校，于是你看到了孩子们满街跑。船上电视里放着火了的周沫，那个理解他，告诉他人各有志的女子(浩汉则一直对江河小教12年表示不屑)。跟他之前向浩汉所承诺过的那样(当时两个人在没有挡风玻璃的车里，最后还飘来一张报纸砸在浩汉头上)，他没有给浩汉一个结局，而是把最后留给了苏米。船上，苏米依偎在他的肩头。</p><p>   这是《旅行者》的结局，不是《后会无期》的结局。苏米要出国生孩子，江河在西藏支教，同时丢失了苏米的卡片。如果最后的“后来”是真正的结局，那么两人相遇的概率是多少？这部电影还会叫《后会无期》么？</p><p>   这或许就是江河的一场梦吧，《旅行者》中，江河的幻想的镜像。</p><p>   江河篇的最后，说说江河之死。</p><p>   一开始，我以为江河不会死，他会安静的在西藏写字，教书。然后一个细节让我改变了这个想法。</p><p>   没错，就是【猫狗人】。电影里一个出现了2次的npc。摘录猫狗人原话如下：</p><p>   “我在这个城市生活6年了，可是一直没什么朋友。我养了4只猫，可是大家都说应该养狗诶，男的嘛，我觉得狗啊，是一种需要陪伴的动物，我是很喜欢狗的，但是我没有勇气养，可是在夜晚来临的时候，我就看着窗外的车流，我觉得这个世上这么多人，可是没有人想听我说话。”<br>   然后节目到点，猫狗人的话被停掉。<br>   “你好主持人，我今天终于迈出了这一步，我把那4只猫送给朋友了。我养了1条狗。”<br>   “那我可以再迈出一步吗？我们现在在天台上。”</p><p>   这就是两个故事：4猫换1狗+抱狗自杀。</p><p>   这说的不就是江河么：怪，所以没朋友。4只猫，苏米、胡生、浩汉、阿吕，换1只狗，马达。这不就是这条无期之路么？到了西藏，他算是迈出了一步，那我可以再迈出一步么？那个地方，除了马达，以他的怪异，似乎叫不到朋友，而且那个地方，有几个人能通他在一个水平线上交流？写完了《旅行者》，他便没有什么期望了，苏米不知何处，而他又是个“等着分配”“不会争取”“不喜欢往上爬”的人，在没有什么动机，让他上路。</p><p>   于是这个不喜欢往上爬的人选择下落。</p><p>   “那我可以再迈出一步么？”“当然可以。”“我们现在在天台上。”</p><p>   我们是江河、马达，当然，还有他紧握着的《旅行者》里的浩汉、阿吕、胡生、周沫、莺莺。以及靠在他肩头的，他再也找不到的，苏米。</p><h4 id="浩汉"><a href="#浩汉" class="headerlink" title="浩汉"></a>浩汉</h4><p>浩汉哥。整部电影的灵魂和泪点，他是很多台词的注解。是“像你像他像那野草野花”的最好注解。有时候你真觉得，自己或是身边的人，像极了浩汉。</p><p>   浩汉这站，叫绝情。</p><p>   他也是骗子，不过他自以为是的觉得能骗了所有人，其实，他只是骗了自己。</p><p>   在胡生眼里，“浩汉哥是个在外面闯荡过的男人。”——幼年丧父，“出海捕鱼4年、出租车司机开了3年，跑运输2年，幼儿园保安干了1年。”。于是他买了一辆米色的车(但所有女人都会叫：哇，奶色《1988》乱入)，“想回家乡大干一场”。</p><p>   然后就发生了开始的那一幕。东极岛最后的岛民们开了一场演唱会，估计是庆祝“大岛建小岛迁”的政策，主题是离乡歌唱晚会，晚会上，还很可能演唱了岛民们为了歌颂小岛而创作的《东极岛之歌》。就如同电影里播放《东极岛之歌》时的画面一样一样的，目的很简单，反讽。</p><p>   浩汉哥在胡生的叙述中出场，他在台上的神演讲一语成谶：“我今天上了这个台，就不怕自己下不了台，现在我要说，我们要……”</p><p>   回头再看，发现几乎所有的关于浩汉的剧情似乎都在讲，他怎么威风凛凛的上台，又是怎么“不怕让自己下不了台”的。</p><p>   然后话筒扩音断了。这是必然的。电影场景里里，舞台上的工作人员已经把音箱都拉走了。</p><p>   介绍一下这几组镜头的电影场景，台上是话筒和乐谱架，台下是小板凳。浩汉哥登台时，台下观众坐着塑料小板凳鼓掌，从下台演员的装束可推知，节目不是大合唱就是诗朗诵。胡生说了，他和他的两个兄弟，也就是江河浩汉是最后离开东极岛的。所以基本可推知晚会主题可能与迁居离乡有关。</p><p>   至于浩汉上台没说完的那句，从他和江河胡生的对话和遇到阿吕之后那天晚上的对话可基本补全：“现在我要说，我们要齐心协力，把我们的东极岛建设成海上丽江，那片海岸上的沙滩，可以建成阳光沙滩(Sun of beach)……”。</p><p>   然而，没人鸟他。除了胡生：“他很坚强，我很欣赏”。</p><p>   胡生的欣赏不是没有道理的。在整个家乡都已经破落到无力回天的时候，在家乡的一条路还没有一辆车宽的时候，浩汉是整个东极岛唯一有勇气重建家乡的人，他的梦想是【振兴家乡的旅游业】。所以，【浩汉是一个有乡土情结的人，他爱自己的家乡】。也可以把这当做歌词里“当每个繁星抛弃银河的夜里”的注解，浩汉，就是那个繁星。</p><p>   然而事实是：虽然浩汉满地都是“朋友”，他自己还是被家乡轰走。以送江河之名上路，顺路拜访周沫、莺莺。</p><p>   这还不是浩汉上路的全部原因。在振兴家乡旅游业这个梦想受阻之后，他希望通过这一路的冒险，让自己有所收获，有所历练。希望可以遇上一些人和事让自己强大，甚至可以帮助自己，振兴家乡旅游业。而且，他的新车需要上路，不然不是白买了。这辆车在他眼里，是他可以对江河、胡生臭屁的资本。你看，江老师，我至少现在能用这交通工具送你上路，我还在外面认识不少人，满地都是我朋友，哪儿拉屎都有人给我送纸。</p><p>   至少在出发时，他是这么想的。</p><p>   当然，也有一丝悲壮。“带的走的留不下，留不下的别牵挂”，或许你没看懂他决定烧掉自己的房子的意义。这个行动的台词是：混不好，就别回来了，要像出海搏击风浪的父亲一样，要么衣锦还乡，要么客死他乡。从后来莺莺谈到信件中的内容可推知，浩汉有轻微的恋父倾向，或者说，崇拜父亲。</p><p>   戏剧的是，爆炸过后，浩汉的房子没有倒。反倒是胡生和周沫的房子倒下了，从《后会无期》曲子放出是浩汉安慰胡生的动作可佐证胡生的房子倒了，后面和周沫的对话可佐证周沫的房子也倒了，所以剩下没倒的，是浩汉的房子。然而房子倒了的，周沫和胡生，安然无恙。房子没倒的浩汉，却真的客死他乡。这房子能留下，也算是一个念想。供若干年后，胡生、莺莺、周沫凭吊故人罢。这或许可以微微算作为浩汉之死埋下的第一条线。</p><p>   然后三人上路。</p><p>   周沫篇已经分析了二人的感情，周沫其实是喜欢浩汉的。然而此时浩汉心里只有莺莺，他来找周沫的原因，一是单纯看周沫，因为两人儿时感情好，二是看周沫混得好不好，能否成为他振兴家乡旅游业的合作伙伴。然而周沫只是个替身小演员。在影视基地的路上，浩汉似乎有种撮合周沫和江河的意思，仔细看会发现，江河一直和周沫谈论人生，浩汉一直在和胡生嘻嘻哈哈，而除非周沫主动询问，浩汉不会主动挑起话题。原因可能有二，一是心怀愧疚，二是避嫌不想让周沫旧情重燃。</p><p>   在江河苏米线里，浩汉则继续扮演撮合的月老角色。因为他知道江河木讷怪异，满口说教惹人厌烦，能让江河产生爱意并且也对他产生爱意的女生不多。浩汉处处为兄弟江河打圆场：“但我要跟你说的是，我们两个都在帮你，尤其是我旁边这位。”，“从来不知道替自己争取一下”(为兄弟鸣不平，同时恨铁不成钢)，在白客过来寻事时“休想动我朋友”，小声提醒江河“昨天晚上这是个局”，拉开白客“让他们聊”，在宾馆发现的可疑车辆追来时快步赶回加油站，在江河加了柴油后也没怎么发火，甚至快步走上三叔面前“你这样不对啊”要给“三叔一个忠告”，只为了给江河与苏米博取一点机会，那半句被三叔忠告打断的话非常直白“你怎么说我都可以，但我朋友……”……在与自己无关的这条线里浩汉从没酱油，而区别于浩汉莺莺线里，江河的酱油。因为浩汉知道，江河这傻小子，根本不懂女人。然而浩汉这样淡淡的关怀以及包容，却丝毫没有，充斥着现下主流价值观的基情四射。而就是让你简单的感觉，来自兄弟的那一点支持。这在于二人的演技和语言动作的设定。你单纯分析两人的人设，一个臭屁，一个闷骚，这特么不就是标准的攻受二人组么，但你代入电影去看，你就不得不佩服台词、动作、演员对角色的拿捏的功力，因为这么攻受的人设，你却能看出微微的兄弟情。然而兄弟情不就是这样的么，不需要太浓，我懂你就好。</p><p>   三叔这个人非常经典，可谓句句成谶。明天单独拿来分析。他那句“我一早知道你不是好人，没想到连坏人都不是，你这样怎么在社会上混啊。”和“汽油车不能加柴油。”绝对是对这一路旅程的注解。</p><p>   然后是浩汉的失误，在回答电台主持人“是智障吗？”这个问题时，给出了“啊，是。”的回复。导致胡生因不愿意接受这个称呼而放弃与电台取得联系，从而回到东极岛的结局。</p><p>   接下来是浩汉满地捡钱的情节，这就是转折的分界点。掏手机的一个意外，导致钱掉，导致晒钱晒卡片，导致车挡风玻璃被偷和卡片丢失，导致两人耽误行程遇上阿吕，导致车被偷，导致浩汉锐变，导致二人分别，导致浩汉之死。卡片丢失，导致江河与苏米失联，间接导致江河之死。这么一看，这个小细节的设计，关系到后面一系列的大事件发生。可怕的蝴蝶效应。</p><p>   两人带上头盔继续上路。江河提出写《旅行者》的想法。这时有一段很关键的对话。浩汉：“记得结尾的地方把我美化一下。”江河：“不，浩汉，那个位子不是留给你的，有很多话我们在生活里说不出口，所以在书的结尾，我要对苏米说：”然后是尼玛一张报纸。这里通过《旅行者》的暗示，表明在最后，也就是结局，浩汉不会出现。结合最后一幕，那段“最后一面”“最后一句”，可基本推知，浩汉死了。佐证见下文。</p><p>   夹蛋那段又很有寓意。我们用自己习惯的方式去达成目标，发现结果是各种失败。当成功近在咫尺，却功亏一篑。你换一种方式达到目标，然而这时候你才发现，这目标早已不是你想要的了。这概括这段旅程的意义。三人以习惯的方式上路，却一路囧途，各种失败。在离目的地不远的地方，功亏一篑车被开走了。换作步行走到目的地的时候两人发现，和当初各自想要的相去甚远。江河想去入职，可却受阿吕影响，产生了“横穿整个中国”的豪迈。浩汉想去探寻冒险的意义和情义的价值，一路走来，他发出了“那也比情义这两个字寿命长”的感叹。不过，这都是后话了。</p><p>   接着是让浩汉三观第一次崩坍的19年欺骗，在莺莺篇里基本分析清楚了。浩汉的对莺莺的所有情感，都被莺莺一句“喜欢就是放肆”概括了，而莺莺对浩汉的所有情感，都被莺莺一句“带爱就是克制”概括了。浩汉还能说什么，只能将放肆克制，然后选择一个新的环境，新的心情。离开。莺莺的离去，浩汉的第一根支柱倒塌。</p><p>   在这里顺路提一下浩汉的父亲，“带的走的留不下，留不下的别牵挂”，这正是浩汉父亲的写照，他带浩汉来到了东极岛，却没能把浩汉留在身边，所以浩汉父亲离开的时候，起初的打算一定是不再牵挂浩汉。然而那是他亲生的儿子，怎么能不牵挂。子如父，两人虽然表面看似洒脱，但却都不能做到真正洒脱，因为此时浩汉心中，尚有【情义】二字牵绊。</p><p>   当浩汉知道父亲居然是这样一个人的时候，第二根支柱倒塌。儿时坚持的，崇拜的都是假的虚无的，没有搏击风浪，只有死的窝囊。</p><p>   之后浩汉心情低落，在浩汉计划的行程里，在他没把握的周沫和有把握的莺莺那里，他都没有找的他想要的—【事业】和【情义】。不过想到未知的远方，他又悄悄鼓起勇气，因为他除了相信一定有让他为这段旅途的意义作注解的人和事出现，对江河的询问，他只是搪塞了一句“没事，还是送你去入职要紧”。这和之前“你就等着看好戏吧”的胸有成竹形成巨大反差。意在点名经过此事，浩汉元气大伤，你看，这时的他早没有我的朋友满地是的臭屁得意了。</p><p>   所以这时候他帮江河想了一个结尾，就是电影最后的那段结尾，浩汉用来用以自我安慰，却没想到让所有人为这句话做了注解。电影此时的场景，和电影结尾的场景完全一致。可断定故事结尾是从这里剪出去的。（楼主乱入一下，其实两幕场景并不相同，最后的时候车外飘着小雪，而此时的场景没有，所以必然其中一个是现实，另一个是小说中）还有一个证据就是《女儿情》这首歌的生硬插入，就像是打断场景一样。这是电影叙事的有意为之。</p><p>《女儿情》这首歌的插入其实也是有深意的，在人物分析篇之后的bgm和歌曲分析篇里，我将一一驳斥所谓的“bgm乱入说”和“抄袭音乐裁缝郭敬明MV说”。</p><p>在《女儿情》的进程中，司机换成了江河。而后浩汉为了给自己打气唱起了歌，结果马达出场。</p><p>至于马达的意义，已在江河篇做了说明，不再赘述。从二人收留马达时，马达就注定选江河，因为你想想看，马达是怎么醒来的？浩汉一巴掌扇醒的。我不知道狗记不记仇，反正如果黑这部电影的人被醍醐灌顶的扇了一巴掌，他们肯定记仇。</p><p>带马达上路的时候，你已经能明显感觉到浩汉的无力感：“连家乡都没了，哪来的什么家门，我们跟野人有什么区别。”之后是更大的迷茫，他们进了迷宫，“你确定是这条路吗？”，“我们是不是来过这里啊？”。这里江河问浩汉，其实都是在打自己的脸。大家还记得江河出发前对胡生说过什么吗？“至于其他的，我都安排好了。”你看江河是地理老师，他能准确的说出nt3m5p的含义，然而让他真正走在路上，他却只能不断询问浩汉路走对了没。然而浩汉嘴上一直说“确定”，但二人始终在迷宫里打转。其实就是在说明，在人生旅途中，江河浩汉迷失了，江河的百科全书在现实面前毫无用场，浩汉开着车原地打圈圈，还不承认自己迷失。情节这个时候就是在攒大招，让二人一直掉血、掉血、掉血，只为了槽满憋一个人的上线，带二人走出迷茫。</p><p>于是阿吕应运而生。这个人就是为了让江河浩汉从“失落失望失掉所有方向”中挣扎出来的神一般的“骗子”。这个角色设定的恐怖就在于，他让二人没有看到“看见平凡才是唯一的路”，而是把二人带到巨大的精神狂热中，然后一骑绝尘。你看，走向平凡之路的人都会活得好好的：周沫、胡生、苏米、莺莺。阿吕带着江河浩汉非要在这么一条平凡之路上另辟蹊径，什么卫星啊，一号啊环中国啊之类虚无缥缈的，结果这三个人，少说生死未卜，按我的看法，导演编辑就是把他们往死里写的。</p><p>为什么。你们说，这个世界，需要阿吕这样理想主义和浪漫主义么？阿吕就是带他们上路，可惜却把他们丢在半路，于是江河浩汉陷入了更大的危机之中，就是所谓的信仰缺失。这部电影本身就是在自嘲。</p><p>好了关于主题的讨论日后分析。今天这章的重点在人物，我们继续。</p><p>很明显，浩汉是不喜欢让阿吕同行的。但队友送人头，没办法，阿吕上车了。浩汉开始开始瞧不起阿吕的，因为我有车你没有，所以他说“14万公里算不了什么。”随后，的这个回答，让阿吕一度成为旅途的掌控者：“我为的是自由，而你却是为了生活。”这一句，让阿吕逼格或者情怀立马爆棚。吐个槽，这句话的句式怎么那么像苍老师的某句名言啊。此时浩汉依旧不依不饶，逼问之下，阿吕说出了摩托车被偷的窘境。说的时候阿吕迟疑了一下，不知道是不好意思，还是有所隐瞒。估计两种解释都有道理。对阿吕的解读一直是双线并且互不冲突的，你可以认为阿吕一直说真话，也可以认为他一直说假话，也可以认为他一会说真话一会说假话。在没有肯定证据和完善想法前，个人倾向是阿吕一直说真话，半夜在行程上与江河产生矛盾，然后决定偷车完成所谓的理想。</p><p>这里有个地方其实在印证其实阿吕说的不全是真话。过隧道的时候，高呼“我不在乎”，然而他根本不知道这个隧道有多长。于是越过隧道后，缺氧的他说了句：“这隧道怎么这么长。”<br>说明，对这段跑了6遍的路，他确实不太熟悉。之后只听到浩汉的一句英文，就自信断定浩汉是教书的，“我悬崖都摔过好几次，一般人的职业，我一眼就能看出来”，这句打脸也能看出他并不是那么的神。</p><p>但是这并不妨碍浩汉的改变。因为阿吕的出现，他开始对旅途重拾信心。原因是，他们在阿吕的带领下找到了路，注意路是双重含义，地理意义和人生意义上的。浩汉甚至在小解后对阿吕说出了要和他一起骑摩托车回到东极岛上的想法。“放心吧，明天等我把朋友送到目的地，我们就骑摩托车回去。”浩汉这么说，可推测，他的计划就该是送江河到站，卖车买摩托，和阿吕一起做一个“伟大的骑士”，拍照片，写稿件，让人们认识东极岛，这样家乡的旅游业就可以振兴了。</p><p>从此刻起，浩汉满血复活。但这次的复活，却是为殒命做铺垫。</p><p>在电台里，有个老女人问大夫男根固本丸的事，我曾经一度将之与阿吕的那句命根子肯定硬联系起来，认为这女的是阿吕的夫人。但阿吕帮二人走出了交警检查的困境，这说明阿吕跟这一带的交警很熟，于是我放弃了这样的分析。要知道，浩汉开的可是无照车，一路没走过车多的路。</p><p>接着阿吕给浩汉和江河讲述了同学会和老婆的故事。然后浩汉发现，这个人和自己是多么惊人的相似，阿吕的同学会和浩汉的上台下不了台不过是一个故事的两个讲法而已，你大声疾呼，结果是，根本没人鸟你。浩汉就是那个想证明给一万个人看的人，结果，真的只有一个人懂。而那个人是胡生。</p><p>接着是那段nt3m5p。这玩意我反正是没百度到，但是确实有点神，你想，芬兰卫星，印度发射，追赶旅行者1号。产地，发射地，目的地的联系太微弱了。或许历史上真的有，恕我孤陋寡闻。对这点，做个标记。留待之后查证。这个晚上对主线构成影响的是两件事，旧矛盾的解决和新矛盾的产生。旧矛盾是头盔事件，被nt3m5p解决。新矛盾是行程安排，江河高呼，“可是我明天要入职诶”，阿吕根本不鸟，“我老婆如果能看到nt3m5p发射，一定很高兴”。车主浩汉的回答其实很明确，不看卫星，送江河入职，“我恢复得很快，男人嘛，不要为儿女情长的事情所牵绊，最重要的是事业。”这就是在告诉阿吕，别想你老婆的事了，搭着我的车，要听我的话。这个矛盾直接导致了偷车事件。阿吕也给了二人答复：“今天是旅行者1号，冲破太阳系，进入浩瀚宇宙的日子。”“他这样在太空孤独的漂流，只为了这样一个简单的理由，就是要到外面的世界看一眼”所以，我，吕行者2号是一定要去看一看的，你们这些菜鸟，挡不住我的。这话里的深意，浩汉显然没听懂。</p><p>阿吕还有一句是说给江河的“有些人，一辈子只蜷在一个角落里，连窗户都懒得开，更别说踏出门”。此时音乐走起，天光微醒。这句话算是点醒了江河，这也可能是江河为什么江河一直替阿吕说好话的一个原因吧。</p><p>然后是猫狗人之死，已分析过不赘述。</p><p>如果你对半夜的矛盾有预设，阿吕接下来的偷车计划就特别明显了。先让二人休息一下，自己去试车，试了一下，浩汉没察觉，他就开走了。中途放下照片，马达和行李。他还不想害死两人。</p><p>于是浩汉当着江河的面，又一次重复了开头的打脸画面，威风凛凛的跑上台，高呼着自己不怕下不了台，说着路遥知马力日久见人心的豪言，看着话筒没声——车被开走，一句话都说不出来。</p><p>自此满血浩汉回到濒死状态。自己在旅途中建立起来的第三根支柱倒塌。车换摩托的骑士事业，和刚刚建立起信任的情义顷刻间化为乌有。要注意，浩汉一直在强调的两个东西，事业和情义。现在都没了。活着对他而言的意义，只剩下一个，送江河。</p><p>江河说阿吕有苦处，阿吕则说自己有痛处。当情义，事业都消失了。浩汉只剩下疼痛的自己，车没了，自己再没有臭屁的资格了。甚至一贯斯文的他在此时爆出了第一句粗。</p><p>江河依然对阿吕的话奉若神明，重复着“人真的不应该只蜷缩在一个角落的。”骗了自己那么久，浩汉也第一次承认自己“我是没什么事业的”。“但我不会出来作孽”，我着谁惹谁了？凭什么我的车被偷”。这句话更像是在帮导演说。韩寒既视感：我是没什么事业，但也没出来作孽，凭什么我就代笔了？于是我就拍了这部电影，然后告诉黑黑们，韩仁均先生就藏在片场工作台的抽屉里，我只要不知道该怎么拍了，就打开抽屉问韩仁均先生这是该用仰拍啊还是俯拍啊，韩仁均先生就会告诉我，世事难料啊，难料啊，难料啊——568包钟，868包夜。</p><p>好了，大半夜码字太困太热了，寝室没空调，只能自己编个冷笑话降降温解解乏，顺便调戏一下无脑黑黑们。继续。</p><p>江河继续为阿吕辩护，浩汉直接归因于两人世界观不同。江河那句没讲完的“可是”笔者估计是想说，“可是阿吕说的对，我连世界都没观过，根本没有世界观”</p><p>然后是呼应开头的桥段，照片洗出来了。上路时浩汉说“未知旅程，合影留念。”然而结果是——“好不容易拍张合影还没有脸……”。哎，没有脸。</p><p>然后是浩汉很没有理智的把责任推给江河，浩汉什么都没了，也只能在江河面前，当一回马后炮教训他一番了。“我好心送你，你乱勾搭女人，把胡生给丢了，乱信任男人，把车给丢了，还替别人说话”平心而论，这一系列的事情的发生，两人都有责任。</p><p>两人的争执非常合理，被真善美和阿吕洗脑的江河党们是阿吕的忠实粉丝，而车被偷了情义事业都没了一无所有就等着慷慨赴死的浩汉派是阿吕的铁杆黑黑。谈到妓女问题，两方动起手来。</p><p>这时秒速5厘米上映。然后炸了。这个炸不是两个王也不是四个二，是一定具有象征意义的。阿吕的理想破碎了，这就像是你拉着你老婆去看胸口碎大石，结果却看到了大石碎胸口一样。</p><p>这种失落，相信江河浩汉都感受到了。</p><p>于是打斗似乎都变得没有意义，跑到这大戈壁图的是什么，难道是和同行伙伴solo么？显然不是，这个爆炸，让二人重新回到，定义目的的问题上。</p><p>当然，江河的目的似乎是达到了，翻过山头就是入职地。但他却变得非常不安，你看江河不断重复的那句话：“人真的不应该只蜷缩在一个角落的。”完蛋，这荒凉戈壁我来教书，不就是有把我圈在一个角落么。所以在这个角度上，江河自杀的可能性非常大。</p><p>而浩汉的目的呢？周沫是个伪后没起来，莺莺打野打废了，本来以为有个很牛父亲光环居然是个毒buff。打钱不容易，半路鸟被杀了装备直接让敌人运回血池。先知江河跑去送人头，请问浩汉怎么打？谈个求目的。</p><p>温水煮青蛙，《1988》里的经典桥段，表达两人对现实和自身的不同看法，是个人就懂不解释。</p><p>结局很好理解。焦躁的江河和绝望的浩汉。一个从沉睡的世界观里决定苏醒却注定只能继续沉睡，另一个连世界观是什么都不知道了。马达注定选江河，因为浩汉没水没食物没交通工具，原路返回，基本就挂在戈壁里了。江河这个连世界都没观过的人，早忘记浩汉怎么回去这档子事了。他现在满脑子就是，完蛋了，我被圈住了，人不应该永远蜷在一个角落的，怎么办，完蛋了。</p><p>浩汉最后说的几句话很耐人寻味：“我要去忙我的失业了”然而他自己也说了“我是没什么事业”他还在不遗余力的骗自己，或许只不过是在赴死前保留他一贯臭屁的高姿态。“可那又有什么意义呢”，这时候的浩汉已经心力交瘁了，根本不再去想出发前“横穿整个国家”的豪言壮语，更别谈意义了，能当饭吃么，能当车开么。“你不适合在这个社会上混”，此时的浩汉依然懂江河内心真正的想法，浩汉知道江河陷入了温水煮青蛙的绝境中，被现实的锅盖死死盖在荒凉戈壁，却生出了一颗跳出蜷缩之地的心。所以狗给你吧，至少可以互相陪伴。于是他放下狗，头也不回就走了。他知道狗不会陪他一起赴死。所以一眼都没回头看过。</p><p>当然浩汉在死之前依然选择欺骗自己，我这种人，哪都是朋友，狗你留着吧，我走了。</p><p>浩汉真的就走了，他没有平凡之路可走，他无路可走，在一无所有的戈壁里，和所有人，后会无期。</p><p>五周目看到东极岛胡生目睹东极岛开出绚烂烟花的那一刻，我不知道是不是有人像我一样，觉得这就像是《飞屋》里，最后那个房子落在老人设计的那个地方。虽然江河浩汉都已长逝，东极岛这个在浩汉眼中“多好的概念”还是成为旅游胜地。浩汉【振兴家乡的旅游业】之梦，终于成为现实。我想胡生必是代替浩汉看到了东极岛的繁荣，如此九泉之下，浩汉也可瞑目了罢。然而胡生，却只能在东极岛上，等江河浩汉，一个又一个三年。</p><p>五周目看完，听《后会无期》《平凡之路》《女儿情》《QSS》，真的，可以飙泪。</p><p>首先我必须道歉。除了1周目是在电影院看的，2-5周目都是看的ts。请原谅一个学生党没收入的苦衷。电影院看完1周目，我真心觉得这片子没故事性，但是很轻松，很能逗乐。我想就算是一部喜剧片，他也至少可以及格了。在2014年，你或许还真找不出几部能让你从头会心笑到尾的电影。当然，这只是1周目的感受，当时我只对柴伯公雕像大雨中的玄冥火耿耿于怀。于是手贱想ts求证一下。但是看的时候就各种脊背发凉了。</p><p>昨天和今天凌晨更完的主线人物篇在【阿吕】【江河】】【浩汉】这三篇中有很多内容上的错综问题，结构和情感也没有【胡生】【周沫】【莺莺】这三篇拿捏的到位，而且因为热饿困的影响，很多时候写着写着就忘了之前的篇章里写没写了，造成了一定的问题，今天也是要把人物篇做一个整合。</p><p>在四、五周目的逐帧分析里，我的word里面是截图了的。鉴于电影上映问题，暂不发截图。等一切尘埃落定，我自会新开一贴，对所有细节一一分析。</p><p>或许这真的是一部第一遍笑，第二遍笑不粗感到沉重，到第三遍泪目的电影吧。也或许这就是导演想要达到的效果。</p><p>对于普通青年，它就是一部喜剧；对于文艺青年，它就是一部文艺片；对于喜欢作死磕细节的2B青年，它就是一部黑色幽默的公路片。对于不是青年的人，请出门左拐，《小3时代》等你。</p><p>然而那些自以为是文艺青年却没认真看几遍就瞎喷的，还是到幼儿园学学怎么刷牙和做眼保健操吧。</p><p>欢迎讨论。楼主要开始6刷了。ts清晰度太差，而且少了部分情节，有些地方写的不到位，还望各位吧友海涵。</p><p>（以上就是原作者截止到目前为止的全文，楼主尚有三个疑惑作者并未解答：1、浩然和阿力在哪？结尾演员表上有两个人的名字，而电影中始终没有出现。2、从莺莺那出来片中和结尾到底哪个是真实哪个是小说？3、男根固本丸的广告到底是纯粹为了搞笑还是另有寓意？）</p><p>—- 转自后会无期吧<br><a href="http://tieba.baidu.com/p/3188859331" target="_blank" rel="noopener">原文链接</a></p><p><img src="https://www.tuchuang001.com/images/2018/04/29/p2233828775.jpg" alt="后会无期"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/04/29/cbb1h-1xpym.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="旧事" scheme="https://www.limuyang.cc/categories/%E6%97%A7%E4%BA%8B/"/>
    
    
      <category term="后会无期" scheme="https://www.limuyang.cc/tags/%E5%90%8E%E4%BC%9A%E6%97%A0%E6%9C%9F/"/>
    
      <category term="影评" scheme="https://www.limuyang.cc/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>vue-router中使用EventBus传值需要注意到的问题</title>
    <link href="https://www.limuyang.cc/2018/03/31/vue-router%E4%B8%AD%E4%BD%BF%E7%94%A8EventBus%E4%BC%A0%E5%80%BC%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.limuyang.cc/2018/03/31/vue-router中使用EventBus传值需要注意到的问题/</id>
    <published>2018-03-31T22:26:58.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<p> 最近负责开发一个视频相关的项目，要用到vue-router，同时涉及到一些共有状态管理，但是少量的状态又不想用vuex，于是用到了EventBus，一般来说， 我们用EventBus的步骤如下：<br><a id="more"></a></p><ul><li><strong>首先新建一个js用来创建我们的EventBus，如Bus.js</strong> </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;  </span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure><ul><li><strong>接着，我们在需要的地方通过$emit触发自定义事件，比如我这个时候有一个视频当前播放时间的状态需要传递</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'../components/Bus.js'</span></span><br><span class="line">...</span><br><span class="line">Bus.$emit(<span class="string">'currentTime'</span>, <span class="string">'time'</span>)</span><br></pre></td></tr></table></figure><ul><li><p><strong>再然后就是我们在另一个路由页面(就分别叫页面A和B吧)通过$on监听自定义事件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'../components/Bus.js'</span></span><br><span class="line">...</span><br><span class="line">Bus.$on(<span class="string">'currentTime'</span>, (time) =&gt; <span class="built_in">console</span>.log(time))</span><br></pre></td></tr></table></figure><p>通常情况下这个是应该可以打印出我们想要的数据，但是经我实验发现，当第一次通过路由跳转页面的时候控制台是没有任何输出的，只有第二次跳转开始控制台才有输出，然后我就去查了下资料，发现有这么一种说法:</p><blockquote><p>vue-router切换的时候，会先加载新的组件，当新的组件渲染好但是还没mount的时候，销毁旧组件，然后再挂载新组件，也就是说当B页面的生命周期进行到beforeMount的时候，下一步走到的就是A页面的beforeDestory方法和接下去的destroyed方法</p></blockquote></li></ul><p>要知道我们一般都是在B页面的created方法里面去使用$on监听自定义事件，但是通过上面那段话我们知道，当我们在create方法里面监听事件的时候$emit事件已经发出去了，此时监听器还没有注册，那么要让$on监听到A页面的$emit发出的事件，可以在A页面的beforeDestory或destroyed去执行$emit，附上vue-router切换时候相关的生命周期顺序图： <img src="https://www.tuchuang001.com/images/2018/04/27/5763769-1c04ab921c3d4876.png" alt></p><p><strong><a href="https://www.jianshu.com/p/fde85549e3b0" target="_blank" rel="noopener">图片出自</a></strong></p><p>但是我这个项目和这个人有不一样的地方，因为我需要留存上一个路由页面的状态，所以我在<code>router-view</code>的外面用了<code>keep-alive</code>属性，所以也就不存在A页面会走到beforeDestory和destoryed的说法，那么这时候该怎么做，我一开始是做了实验，既然我直接$emit那边接收不到，那我就延迟去$emit，一开始我用了个2s的延迟:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'../components/Bus.js'</span></span><br><span class="line">...</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   Bus.$emit(<span class="string">'currentTime'</span>, <span class="string">'time'</span>)</span><br><span class="line">&#125;, <span class="number">2000</span>)</span><br></pre></td></tr></table></figure><p>目的就是让B页面$on执行开始监听事件的时候我再去$emit，发现是可以的，我又把时间减少到1s，依然正常运行，但是如果我们要去精确计算两个页面的切换时间岂不是太蠢，后来我就想到了vue自带的一个方法，敲黑板<strong>vm.$nextTick( [callback] )</strong>，这个方法的作用就是在dom更新之后异步执行回调方法，我在这个时候去$emit果然能够成功获取到数据，大功告成。</p><p>顺便说一句，如果路由外面没有使用keep-alive的话，你会发现随着切换次数增多$on监听事件执行的次数也越来越多，和你切换页面的次数成正比，尤大在issue里面说这是因为$on事件是不会自动清除的，也就是说你切换的次数越多$on监听也会越来越多，解决的方法是需要在B页面的beforeDestroy里面手动使用$off去关闭监听:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'../components/Bus.js'</span></span><br><span class="line">beforeDestory() &#123;</span><br><span class="line">  Bus.$off(<span class="string">'currentTime'</span>, (time) =&gt; <span class="built_in">console</span>.log(time))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上</p><p>参考链接<br><a href="https://segmentfault.com/q/1010000007879907" target="_blank" rel="noopener">vue2 eventbus 求解惑</a><br><a href="https://www.jianshu.com/p/fde85549e3b0" target="_blank" rel="noopener">vue中eventbus被多次触发（vue中使用eventbus踩过的坑）</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 最近负责开发一个视频相关的项目，要用到vue-router，同时涉及到一些共有状态管理，但是少量的状态又不想用vuex，于是用到了EventBus，一般来说， 我们用EventBus的步骤如下：&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="vue-router" scheme="https://www.limuyang.cc/tags/vue-router/"/>
    
      <category term="eventbus" scheme="https://www.limuyang.cc/tags/eventbus/"/>
    
  </entry>
  
  <entry>
    <title>不吹不黑聊聊前端框架--尤雨溪Live整理</title>
    <link href="https://www.limuyang.cc/2017/11/10/%E4%B8%8D%E5%90%B9%E4%B8%8D%E9%BB%91%E8%81%8A%E8%81%8A%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6-%E5%B0%A4%E9%9B%A8%E6%BA%AALive%E6%95%B4%E7%90%86/"/>
    <id>https://www.limuyang.cc/2017/11/10/不吹不黑聊聊前端框架-尤雨溪Live整理/</id>
    <published>2017-11-10T22:58:38.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<p>最近买了尤雨溪大大的Live：不吹不黑聊聊前端框架，这场Live让我的前端思维到了前所未有的高度：当我们身为前端开发萌新，在前端人才金字塔的浮动与挣扎中思考该学什么框架、该如何入门前端、又遇到学习瓶颈怎么办的时候，正是这些业界大牛们用自己的行动引导着我们，有如尤大所说：多思考场景需求，多看看技术到底做了怎样的取舍，现在把相关的东西作为笔记整理下来，希望对前端开发有兴趣的同学都可以去支持一下尤大</p><a id="more"></a><h4 id="组件可以是函数"><a href="#组件可以是函数" class="headerlink" title="组件可以是函数"></a>组件可以是函数</h4><p>想象一下整个应用是一个大的函数，函数里面可以调用别的函数，每一个组件是一个函数，一个组件可以调用其他的函数，整个一个树状结构</p><h4 id="组件是有分类的"><a href="#组件是有分类的" class="headerlink" title="组件是有分类的"></a>组件是有分类的</h4><ul><li>纯展示型的组件，数据进，DOM出，直观明了</li><li>接入型组件，在React场景下的container component，这种组件会跟数据层的service打交道，会包含一些跟服务器或者说数据源打交道的逻辑，container会把数据向下传递给展示型组件</li><li>交互型组件，典型的例子是对于表单组件的封装和加强，大部分的组件库都是以交互型组件为主，比如说Element UI，特点是有比较复杂的交互逻辑，但是是比较通用的逻辑，强调组件的复用</li><li>功能型组件，以Vue的应用场景举例，路由的router-view组件、transition组件，本身并不渲染任何内容，是一个逻辑型的东西，作为一种扩展或者是抽象机制存在</li></ul><h4 id="JSX和模版的对比"><a href="#JSX和模版的对比" class="headerlink" title="JSX和模版的对比"></a>JSX和模版的对比</h4><p>JSX本质就是Javascript，它完全获得了Javascript的灵活度，它最大的价值在于书写功能型组件的时候比纯模版更好，但是模版在展示型和其他的用例上也是不差的，模版会让你更少的把逻辑放在视图里面，展示型的组件虽然在逻辑上比较简单但是在样式上还是具有一定的复杂度</p><h4 id="代码的拆分-colocation"><a href="#代码的拆分-colocation" class="headerlink" title="代码的拆分(colocation)"></a>代码的拆分(colocation)</h4><p>把应该放一起的东西放一起，比如说在vue的单文件组件里面我们把模版、样式和javascript的逻辑都是放在一起的，目前主流框架都是这么做的，如果这概念扩展开来，组件的文档也是可以和组件的其他东西放一起的，组件化之后和传统的Separation of concern就有区别了，传统的Separation of concern是以语言为单位作切分，组件是以组件本身作为一个切分的抽象</p><h4 id="变化侦测和渲染机制"><a href="#变化侦测和渲染机制" class="headerlink" title="变化侦测和渲染机制"></a>变化侦测和渲染机制</h4><ul><li>渲染机制</li></ul><p>现代的前端框架里面渲染这块最重要的是声明式(Declarative)，相比较之下的概念是命令式(Imperative)，Imperative最直接的例子是我们使用Jquery时候拿到一个选择器”直接干”，使用命令去进行操作，直截了当，但是很快就会遇到维护性的问题，英文里面有个词叫做jQuery Spaghetti，Spaghetti的意思是意大利面，这个词的意思就是说你的代码写到后面会像一坨意大利面一样，维护起来很困难，声明式的好处就是说我们直接描述说数据和DOM结构之间的映射关系应该是怎么样的，不需要我们手动去做这些操作</p><p>React里面有一个等式 <code>view = render(state)</code> ，这里render就是我们在React里面写的render函数，vue的模版其实也是编译成渲染函数的，所以模版和JSX之间的本质是相似的，输入state，输出DOM，理想情况下我们就是描述了这样一种关系，那输入变了输出也会跟着变，我们不需要顾虑输入和输出之间发生了什么事情，具体到底层实现可以是Virtual DOM，但并不一定得是Virtual DOM，可以是细粒度的绑定</p><ul><li>变化侦测</li></ul><p>用过vue的朋友知道vue的数据是响应式的，vue会把你传递的数据进行转化，转化过后当你改变一些属性的值的时候，vue就会进行相应的更新，附上尤大相关的演讲PPT，里面有详细的过程：<br><a href="https://docs.google.com/presentation/d/1_BlJxudppfKmAtfbNIcqNwzrC5vLrR_h1e09apcpdNY/edit#slide=id.g19eebb1966_0_191" target="_blank" rel="noopener">ppt</a></p><blockquote><p>Live提问：<br>问：一直有一个疑问，以前<div onclick="clickHandler"></div> 被人诟病，为啥 vue  的声明式写法就是推崇的？<br>答：HTML里面这个onclick里面的Javascript的作用域是全局的，当你在vue里面这么写的时候是有很明确的Javascript作用域的，你的绑定以及你的method所能触及的影响范围是设定好的，这个跟全局的Javascript有本质的区别，另外当我们在vue或者Reac里面这么写的时候你的Javascript逻辑和你的模版或者说你的JSX是在一起的，可以联想我们之前提到的colocation的概念，所以并不会造成一个维护上的困难，但是如果你在全局的Html里面这样直接裸写，你完全不知道你这段Javascript可能会引用到哪里的变量或者是调用的哪里的方法</p></blockquote><p>简单的总结，变化侦测主要分为两种：</p><ul><li><p>pull<br>所谓pull，系统不知道数据什么时候变了，它需要一个信号去告诉它说数据有可能变了，在这个系统才会去进行一次比较暴力的比对，在React里面的表现是Virtual Dom Diff，在Angular里面就是整个脏检查的流程，能够这么做的前提是现在Javascript足够快，虽然有浪费但是性能上也可以接受</p></li><li><p>push<br>相比之下，vue的响应式数据或者RXJS的数据机制，在数据变动之后立刻就可以知道数据变动了，而且一定程序上我们会知道哪些数据变了，这样就可以进行相对更细粒度的更新，pull的这种更新是最粗粒度的，所以在大型应用里面我们要帮助系统来减少一些无用功，但是push的形式也有它的缺陷，粒度越细，你的每一个绑定都会需要一个observabel/watcher，这样会带来相应的内存以及依赖追踪的开销，所以在vue2里面选择的是一个比较中等粒度的方案，在组件级别是push，每一个组件是一个响应式的watcher，当数据变动时候我们可以对组件进行更新，在每个组件内部则是用Virtual Dom进行比对，push和pull之间的本质区别是在于用侦测成本换取一定程度的自动优化</p></li></ul><h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><p>状态管理这个概念其实也是在FB提出了Flux之后才搬到台面上来讲，Flux在经历了初期的混乱竞争之后慢慢的合流到了Redux上，vux在一定程度受到了Redux的影响，状态管理的本质是从源事件(source event)映射到状态的迁移和改变，然后在映射到UI的变化，声明式的渲染已经帮我们解决了从状态到UI的映射，这一块，所以状态管理这些库他们做的实际上是如何管理将事件源映射到状态变化的过程，如何将这个映射的过程从视图组件中剥离出来，如何组织这一部分代码来提高可维护性，是状态管理要解决的本质问题</p><p><a href="https://jsfiddle.net/yyx990803/0a22ojps/" target="_blank" rel="noopener">把 Vue 当 Redux 用</a><br><a href="https://jsfiddle.net/yyx990803/f5a24dk3/" target="_blank" rel="noopener">把 Vue 当 MobX 用</a></p><p>现在的状态管理方案还面临一些其他的共同的尴尬，一个是组件的局部状态和全局状态如何区分，现在是局部状态和全局状态并没有很明显的区分，另一个是全局状态和服务端数据之间，现有的方案是把服务端抓过来的数据塞到store里面去</p><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>路由是只有在大型的单页应用才会遇到的一个问题，传统的路由思想是比较有侵入式的，每个路由有自己的数据模型，有自己的模板等，但是当Reac和vue出现之后人们发现把路由和组件解耦是可行的并且还更加灵活，比如Reac直接用不带路由是完全没问题的，另一个启示是，如果从组件出发去思考路由，本质上就变成了把一个url映射到组件树结构的一个过程，url到组件的映射会有一些小的分歧，我们到底是应该从url出发，还是从这个状态出发，其实本质是一样的，因为url就是一个序列化的状态。</p><p>当实际在SPA中去做一个你会发现路由会涉及到许多其他问题，比如说hash模式和history模式如何兼容，重定向，别名，懒加载，然后最复杂的是跳转，路由之间的跳转需要提供各种”钩子”，然后这些”钩子”里面又可能做异步操作，”钩子”里面也有可能取消这次跳转，使得这次跳转无效等等。</p><p>整体来说现在主要的路由方案都有点相似，比较有意思的是最新的reat-router4，他推崇的是一种用组件本身来做路由的一种思路，这里很大程度上利用了上述第四大组件”功能型组件”，在父组件里面声明式的渲染其他组件，跟传统的路由组件方案的区别是”去中心化”，他不是把整个路由表写在一个地方，是分散的写在各个组件里头，这样做的好处是灵活性非常好，但是也有一些问题，首先，集中式的路由表对于理解整个应用的结构是有帮助的，另一方面，去中心化的路由对于跳转的管理会弱一些，他对于跳转的管理是直接用组件的生命周期去做的。</p><p><strong>web路由和app路由的区别：</strong><br>目前web路由整体思路上是一样的，将url映射到组件树，从一个url跳转到另一个url，我们把新的url push到历史的stack里面去了，但是stack前一个位置所对应的位置是被我们丢弃掉的，我们从一个状态迁移到另一个状态我们整个应用界面迁移到另一个状态了，原生应用上的跳转就像一叠卡片一样，新的界面会盖在现有的界面上，当你退回去的时候只是把当前的卡片拿掉，之前的卡片就会出现，web用的路由方案做app会比较别扭。</p><h4 id="CSS方案"><a href="#CSS方案" class="headerlink" title="CSS方案"></a>CSS方案</h4><p>主流的 CSS 方案</p><ul><li>跟 JS 完全解耦，靠预处理器和比如 BEM 这样的规范来保持可维护性，偏传统</li><li>CSS Modules，依然是 CSS，但是通过编译来避免 CSS 类名的全局冲突</li><li>各类 CSS-in-JS 方案，React 社区为代表，比较激进</li><li>Vue 的单文件组件 CSS，或是 Angular 的组件 CSS（写在装饰器里面），一种比较折中的方案</li></ul><p>比较 CSS 方案时首先要明确场景的问题，如果应用逻辑已经组件化了，是一个比较复杂应用的开发，传统的 CSS 方式可维护性就有问题了<br><a href="https://speakerdeck.com/vjeux/react-css-in-js" target="_blank" rel="noopener">react-css-in-js</a><br><a href="https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660" target="_blank" rel="noopener">反对css-in-js的文章</a></p><p>传统 css 的一些问题：</p><ol><li>作用域</li><li>Critical CSS</li><li>Atomic CSS</li><li>分发复用</li><li>跨平台复用</li></ol><p>css-in-js有很多不同的方案，这些方案各自解决了上述的一些问题，但是并不完美：</p><ol><li>CSS Modules，Inline-Styles，vue的单文件组件里面直接加一个scoped都可以解决这个问题</li><li>所谓的Critical ，比如说我们直出一个页面，可能我们整个应用有几十个页面，但是我们直出的永远是第一个页面，如果没一个页面都有一个对应的CSS的话，理论上渲染首屏我们只需要首屏的CSS就够了，这就是所谓的Critical  CSS，在服务端渲染尤为重要，解决的办法是在服务端渲染的时候侦测到渲染要用到哪些CSS，css-in-js和vue2.3+有一个运行时的功能，在编译过程里面可以把CSS的插入跟组件的生命周期挂钩，同样可以起到收集Critical CSS的效果</li></ol><blockquote><p>Live提问：<br>问：在vue里 使用CSS Modules 会不会比 使用 scoped 好？<br>答：我个人觉得没有什么本质的区别，scoped的成本会更低一点，CSS Modules会有一定的运行时的代价，因为需要用动态的class绑定</p></blockquote><ol start="3"><li>Atomic CSS的概念：比如说我们有两条CSS规则，一条是color：red，一条是color：green，我们写两个button的样式，一个按钮是红的，一个按钮是绿的，原子类的话就会把color：red单独拆成一个类：A，把color：green单独拆成一个类：B，然后所有button共享的再拆成一个类：C，然后红色的button可以说是AC，绿色的button是BC，总而言之就是把尽可能多的共享的一些单独的规则都拆成一个很小很小的类，这样出来的最后的结果是你的CSS可压缩性更好了，可以变得更小，对应于css-in-js里面的Style Chunk</li><li>分发复用的论点是说css-in-js都是Javascript，所以可以跟普通的Javascript模块一样直接发包到npm上去复用，确实Javascript比纯CSS更容易去组合复用，但是css你也可以发到npm上然后webpack直接引用，这一点上并不算完全的优势</li><li>跨平台复用：VueX里面就是把静态的css在parse之后编译成Javascript，就可以跨平台复用了</li></ol><h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><p>构建工具解决的其实是几方面的问题：</p><ul><li>任务的自动化</li><li>开发体验和效率（新的语言功能，语法糖，hot reload 等等）</li><li>部署相关的需求</li><li>编译时优化</li></ul><p><a href="https://www.zhihu.com/question/20790576" target="_blank" rel="noopener">大公司里怎样开发和部署前端代码</a></p><p><img src="https://www.tuchuang001.com/images/2018/04/27/32641449-f3738fba-c608-11e7-83f4-3bc598791876.png" alt><br>虽然 Vue 本身用 flow，但建议使用 TypeScript 的 flow，主要从开发体验、生态完善度上考虑</p><h4 id="服务端数据通信"><a href="#服务端数据通信" class="headerlink" title="服务端数据通信"></a>服务端数据通信</h4><p>长久以来我们传统的做法都是围绕Rest，服务端如果暴露的是一个比较标准的Rest API，那我们客户端就可以直接拿一个fetch直接去抓，或者围绕Rest来做一个资源的抽象/封装，特定的应用会遇到比较复杂的场景，一种是，数据直连，数据之间有大量的关联性，另一类是有实时推送同步的需求，这种情况下传统的Rest做法会比较痛苦。<br><a href="https://ssr.vuejs.org/zh/" target="_blank" rel="noopener">Vue.js 服务器端渲染指南</a></p><h4 id="跨平台渲染"><a href="#跨平台渲染" class="headerlink" title="跨平台渲染"></a>跨平台渲染</h4><p>从前端框架的角度去看，跨平台渲染的本质是在设计框架的时候要让框架的渲染机制和DOM解耦，这里面有很多种实现方式，并不一定需要Virtual Dom，本质上只要把框架更新时候的一些节点操作封装起来，你就可以做到跨平台，一个原生的渲染引擎，比如 React Native 和 VueX本质都是在底层针对每个平台有一个适配的渲染引擎，只要把渲染引擎暴露的结点操作的 API，跟框架运行时对接一下，就可以实现将框架里面的代码渲染到原生的目的。这里的解耦很清晰，这也是为什么能看到 NG 可以接 React Native，VueX 可以跑 Vue 文件，VueX 可以跑在 NativeScript 上等等。</p><h4 id="新规范"><a href="#新规范" class="headerlink" title="新规范"></a>新规范</h4><ul><li>Web Component<br><a href="https://www.zhihu.com/question/58731753" target="_blank" rel="noopener">Web Component 和类 React、Angular、Vue 组件化技术谁会成为未来？</a></li><li>WebAssembly<br>是面向 Web 的通用二进制和文本格式，可以跑在浏览器里面。但是在目前的形势下，WebAssembly 暂时还操作不了 DOM，对于框架的影响暂时比较有限，待观望</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下吧，我们聊了很多东西，可能比较杂，但我希望大家发现其中一些共性的东西：技术方案都是先有问题，再有思路，同时伴随着取舍。在选择衡量技术的时候，尽量去思考这个技术背后是在解决什么问题，它做了怎样的取舍。这样一方面可以帮助我们更好的理解和使用这些技术，也为以后哪天你遇到业务中的特殊情况，需要自己做方案的时候打好基础。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近买了尤雨溪大大的Live：不吹不黑聊聊前端框架，这场Live让我的前端思维到了前所未有的高度：当我们身为前端开发萌新，在前端人才金字塔的浮动与挣扎中思考该学什么框架、该如何入门前端、又遇到学习瓶颈怎么办的时候，正是这些业界大牛们用自己的行动引导着我们，有如尤大所说：多思考场景需求，多看看技术到底做了怎样的取舍，现在把相关的东西作为笔记整理下来，希望对前端开发有兴趣的同学都可以去支持一下尤大&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端框架" scheme="https://www.limuyang.cc/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="知乎Live" scheme="https://www.limuyang.cc/tags/%E7%9F%A5%E4%B9%8ELive/"/>
    
      <category term="尤雨溪" scheme="https://www.limuyang.cc/tags/%E5%B0%A4%E9%9B%A8%E6%BA%AA/"/>
    
  </entry>
  
  <entry>
    <title>javascript中call、apply、bind方法的使用</title>
    <link href="https://www.limuyang.cc/2017/11/08/javascript%E4%B8%ADcall%E3%80%81apply%E3%80%81bind%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.limuyang.cc/2017/11/08/javascript中call、apply、bind方法的使用/</id>
    <published>2017-11-08T20:50:19.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.tuchuang001.com/images/2018/04/27/maxresdefault.jpg" alt></p><a id="more"></a><h4 id="context的概念"><a href="#context的概念" class="headerlink" title="context的概念"></a>context的概念</h4><p>在知道我们为什么要使用call、apply、bind方法之前，我觉得有必要先了解一下context的相关概念，通常context的作用是取决于函数将如何被调用，当函数作为对象的方法调用时，this就会被设置为调用方法的对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;</span><br><span class="line">       foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span> === object);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   object.foo(); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>当通过new一个对象的实例的方式来调用一个函数的时候，this的值将被设置为新创建的实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  foo() <span class="comment">// window</span></span><br><span class="line">  <span class="keyword">new</span> foo() <span class="comment">// foo&#123;&#125;</span></span><br></pre></td></tr></table></figure></p><p>当作为未绑定对象被调用时，this默认指向全局上下文或者浏览器中的window对象。然而，如果函数在严格模式下被执行，上下文将被默认为undefined</p><h4 id="动态改变this的值"><a href="#动态改变this的值" class="headerlink" title="动态改变this的值"></a>动态改变this的值</h4><p><strong>然而call、apply、bind方法允许你在自定义的context中执行函数</strong>，什么意思呢，通俗的说就是可以不遵循上面给出的部分定义，可以动态的改变this，我们直接引出MDN关于call方法的定义：</p><blockquote><p>call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)</p></blockquote><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非严格模式下</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    add(); <span class="comment">// Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></span><br><span class="line">    sub(); <span class="comment">// Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></span><br></pre></td></tr></table></figure></p><p>结果是符合预期的：</p><blockquote><p>当作为未绑定对象被调用时，this默认指向全局上下文或者浏览器中的window对象</p></blockquote><p>我们给他加上call方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非严格模式下</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    add(); <span class="comment">// Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></span><br><span class="line">    sub(); <span class="comment">// Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></span><br><span class="line">    add.call(sub,<span class="number">1</span>); <span class="comment">// ƒ sub(args) &#123; ... &#125;</span></span><br><span class="line">    sub.call(add,<span class="number">1</span>); <span class="comment">// ƒ add(args) &#123; ... &#125;</span></span><br></pre></td></tr></table></figure></p><p>这时候this的值有点类似于第一种情况：</p><blockquote><p>当函数作为对象的方法调用时，this就会被设置为调用方法的对象</p></blockquote><p>看起来我们调用call方法的时候好像实际上是进行了对象方法的调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sub.call(add,<span class="number">1</span>);  <span class="comment">//sub</span></span><br><span class="line">=&gt;</span><br><span class="line"><span class="keyword">var</span> sub = &#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">sub.add(); <span class="comment">// sub</span></span><br></pre></td></tr></table></figure><p>这就是动态的改变了this<br>还有一点要注意的是，这里call和apply方法第一个参数的this值并不一定是该函数执行时真正的this值，比如在非严格模式下，我们传入<code>null</code>或<code>undefined</code>会自动指向全局对象，在浏览器环境中就是<code>window</code>，在node环境中就是<code>global</code>，另外我们还可以传入一些原始值(数字，字符串，布尔值)，这时候的this会指向这些原始值的包装对象，比如传入的是数字，会指向Number。</p><h4 id="call和apply的区别"><a href="#call和apply的区别" class="headerlink" title="call和apply的区别"></a>call和apply的区别</h4><p>既然call和apply方法能够动态的改变this的值，我们可以利用这个特性来实现简单的继承，比如此时我们有一个父构造函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">"is"</span>+<span class="keyword">this</span>.age+<span class="string">"years old"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>如果我们想写一个子构造函数，只需要在子构造函数里面调用父构造函数的call方法就可以实现继承：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Toy</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">        Product.call(<span class="keyword">this</span>, name, price);</span><br><span class="line">        <span class="keyword">this</span>.self = <span class="string">"single"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>实现继承的同时父子构造函数还都能分别有自己的属性，比如这里的self属性。<br>这里使用了call方法作为演示，其实apply方法的使用和call方法并无多大区别，重点在参数上，他们的第一个参数都是一个指定的this值，这个值可以是任意js对象，但是第二个参数有区别，call方法接受的是若干个参数的列表，而apply方法接受的是一个包含多个参数的数组，如果上面的例子用apply来写的话就是这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">"is"</span>+<span class="keyword">this</span>.age+<span class="string">"years old"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Toy</span>(<span class="params">name, price</span>) </span>&#123;</span><br><span class="line">        Product.apply(<span class="keyword">this</span>, [name, price]);</span><br><span class="line">        <span class="keyword">this</span>.self = <span class="string">"single"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h4 id="bind方法的特殊性"><a href="#bind方法的特殊性" class="headerlink" title="bind方法的特殊性"></a>bind方法的特殊性</h4><p>之所以把bind方法单独放出来是因为bind方法和前面两者还是有不小的区别的，虽然都是动态改变this的值，举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">     x: <span class="number">81</span>,</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> foo = &#123;</span><br><span class="line">     getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">console</span>.log(foo.getX.bind(obj)());  <span class="comment">//81</span></span><br><span class="line"> <span class="built_in">console</span>.log(foo.getX.call(obj));    <span class="comment">//81</span></span><br><span class="line"> <span class="built_in">console</span>.log(foo.getX.apply(obj));   <span class="comment">//81</span></span><br></pre></td></tr></table></figure></p><p>有没有注意到使用bind方法时候后面还要多加上一对括号，因为使用bind只是返回了对应函数并没有立即执行，而call和apply方法是立即执行的，并且MDN还提到，<strong>当使用new操作符调用绑定函数时指定的this参数会变无效：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">       x: <span class="number">81</span>,</span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> foo = &#123;</span><br><span class="line">       getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.x;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> result = foo.getX.bind(obj);</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="keyword">new</span> result());  <span class="comment">//getX</span></span><br></pre></td></tr></table></figure></p><p>bind方法的另一个应用是使一个函数拥有预设的初始函数，这些参数作为bind的第二个参数跟在this(或其他对象)后面，之后它们会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们的后面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list1 = list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a function with a preset leading argument</span></span><br><span class="line"><span class="keyword">var</span> leadingThirtysevenList = list.bind(<span class="literal">undefined</span>, <span class="number">37</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> list2 = leadingThirtysevenList(); <span class="comment">// [37]</span></span><br><span class="line"><span class="keyword">var</span> list3 = leadingThirtysevenList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [37, 1, 2, 3]</span></span><br></pre></td></tr></table></figure></p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://ryanmorr.com/understanding-scope-and-context-in-javascript/" target="_blank" rel="noopener">Understanding Scope and Context in JavaScript</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">Function.prototype.call()</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/04/27/maxresdefault.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://www.limuyang.cc/tags/javascript/"/>
    
      <category term="call" scheme="https://www.limuyang.cc/tags/call/"/>
    
      <category term="apply" scheme="https://www.limuyang.cc/tags/apply/"/>
    
      <category term="bind" scheme="https://www.limuyang.cc/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>javascript立即执行函数(IIFE)</title>
    <link href="https://www.limuyang.cc/2017/09/11/javascript%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0-IIFE/"/>
    <id>https://www.limuyang.cc/2017/09/11/javascript立即执行函数-IIFE/</id>
    <published>2017-09-11T21:46:54.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.tuchuang001.com/images/2018/04/27/t01d33574ff8f0f445c.gif" alt="IEEF"></p><a id="more"></a> 通常我们声明一个函数有以下几种方式：<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明函数f1</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f1"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过()来调用此函数</span></span><br><span class="line">f1();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个匿名函数的函数表达式，被赋值给变量f2:</span></span><br><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过()来调用此函数</span></span><br><span class="line">f2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个命名为f3的函数的函数表达式(这里的函数名可以随意命名，可以不必和变量f3重名)，被赋值给变量f3:</span></span><br><span class="line"><span class="keyword">var</span> f3 = <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f3"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过()来调用此函数</span></span><br><span class="line">f3();</span><br></pre></td></tr></table></figure><p>如果你看过一些自定义控件的话你会发现他们大多数都是沿用这种写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="comment">// 这里开始写功能需求</span></span><br><span class="line"> &#125;)();</span><br></pre></td></tr></table></figure><p>这是我们常说的立即执行函数(IIFE)，顾名思义，也就是说这个函数是立即执行函数体的，不需要你额外去主动的去调用，一般情况下我们只对匿名函数使用IIFE，这么做有两个目的：</p><blockquote><p>一是不必为函数命名，避免了污染全局变量 二是IIFE内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</p></blockquote><p>如果看到这两句话无法理解，那么先从IIFE的运行原理说起。 因为IIFE通常用于匿名函数，这里就用简单的匿名函数作为栗子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"f"</span>);</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br></pre></td></tr></table></figure><p>我们发现这里<code>f</code>只是这个匿名函数的一个引用变量，那么既然<code>f()</code>能够调用这个函数，我把<code>f</code>替换成函数本身可以么：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"f"</span>);</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><p>运行之后得到如下结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught <span class="built_in">SyntaxError</span>: Unexpected token (</span><br></pre></td></tr></table></figure><p>产生这个错误的原因是，Javascript引擎看到function关键字之后，认为后面跟的是函数声明语句，不应该以圆括号结尾。解决方法就是让引擎知道，圆括号前面的部分不是函数定义语句，而是一个表达式，可以对此进行运算，这里区分一下函数声明和函数表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、函数声明(即我们通常使用<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;&#125;来声明一个函数)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* logic here */</span> &#125;</span><br><span class="line"><span class="number">2</span>、函数表达式(类似以这种的形式)</span><br><span class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* logic here */</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> myObj = &#123;</span><br><span class="line">    myFunction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* logic here */</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>小学我们就学过用<code>()</code>括起来的表达式会先执行，就像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1+(2+3) //这里先运行小括号里面的内容没有意见撒</span><br></pre></td></tr></table></figure><p>其实在<code>javascript</code>中小括号也有相似的作用，Javascript引擎看到function关键字会认为是函数声明语句，那么如果Javascript引擎优先看到小括号会怎么样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用小括号把函数包裹起来</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(<span class="string">"f"</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>函数成功执行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f //控制台输出</span><br></pre></td></tr></table></figure><p>这种情况下Javascript引擎就会认为这是一个表达式，而不是函数声明，当然要让Javascript引擎认为这是一个表达式的方法还有很多：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;</span><br><span class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;() <span class="comment">// 只有传递参数时，才需要最后那个圆括号。</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>回到前面的问题，为什么说IIFE这种形式避免了污染全局变量，如果你见过别人写的jquery插件，里面通常会有类似这样的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">   <span class="comment">//插件实现代码</span></span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure><p>这里的<code>jquery</code>其实是该匿名函数的参数，联想一下我们调用匿名函数时候是用<code>f()</code>那么匿名带参数的就是<code>f(args)</code>对吧，这里把jquery作为参数传入该函数，那么在函数内部使用形参<code>$</code>的时候就不会影响到外部环境，因为有些插件也会用到<code>$</code>这个限定符，你在这个函数内部可以随意折腾。</p><p>以上，在此过程中参考了以下两篇文章： <a href="http://www.tangshuang.net/2020.html" target="_blank" rel="noopener">javascript立即执行某个函数：插件中function(){}()再思考</a> <a href="https://segmentfault.com/a/1190000003902899" target="_blank" rel="noopener">JavaScript中的立即执行函数</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/04/27/t01d33574ff8f0f445c.gif&quot; alt=&quot;IEEF&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https://www.limuyang.cc/tags/javascript/"/>
    
      <category term="IIFE" scheme="https://www.limuyang.cc/tags/IIFE/"/>
    
  </entry>
  
  <entry>
    <title>告别五月</title>
    <link href="https://www.limuyang.cc/2017/06/01/%E5%91%8A%E5%88%AB%E4%BA%94%E6%9C%88/"/>
    <id>https://www.limuyang.cc/2017/06/01/告别五月/</id>
    <published>2017-06-01T22:06:01.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.tuchuang001.com/images/2017/06/07/davide-ragusa-3131-min.jpg" alt></p><p>2017年<br>6月1号<br>转眼就跑到那似水流年里去了，然而身边的人都不珍视自己的似水流年<br>我要告别5月<br><a id="more"></a></p><h4 id="诉"><a href="#诉" class="headerlink" title="诉"></a>诉</h4><p>一整个5月是我成长最快的日子<br>我心里很乱，当我沿着这条路走下去的时候<br>心里总想着另一条路上的事<br>好像王小波在《黄金时代》中描述到的：”那一年我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。”</p><h4 id="别"><a href="#别" class="headerlink" title="别"></a>别</h4><p><img src="https://www.tuchuang001.com/images/2018/04/27/duoshuo.png" alt><br>在2017-06-01这个节点我把多说换成了搜狐畅言<br>让我和你告个别<br>开源不易，且行且珍惜</p><h4 id="离"><a href="#离" class="headerlink" title="离"></a>离</h4><p>我只愿蓬勃的生活在此时此刻<br>成为一名真正意义上的移动WEB前端开发工程师<br>“移动”两字是我刻意加上去的，很好的显露出我没有如愿成为一名移动开发工程师的不忿<br>最后，我发现我真的胖了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2017/06/07/davide-ragusa-3131-min.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;2017年&lt;br&gt;6月1号&lt;br&gt;转眼就跑到那似水流年里去了，然而身边的人都不珍视自己的似水流年&lt;br&gt;我要告别5月&lt;br&gt;
    
    </summary>
    
      <category term="旧事" scheme="https://www.limuyang.cc/categories/%E6%97%A7%E4%BA%8B/"/>
    
    
      <category term="告别" scheme="https://www.limuyang.cc/tags/%E5%91%8A%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>自始至终</title>
    <link href="https://www.limuyang.cc/2017/02/17/%E8%87%AA%E5%A7%8B%E8%87%B3%E7%BB%88/"/>
    <id>https://www.limuyang.cc/2017/02/17/自始至终/</id>
    <published>2017-02-17T22:25:29.000Z</published>
    <updated>2019-08-16T09:03:51.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.tuchuang001.com/images/2018/04/27/11192154-file_1487341097174_e508.jpg" alt></p><p>我已经快忘了来这座城市的初衷</p><p>我总是没有勇气把生活过的波澜壮阔</p><a id="more"></a><p>2016-6-26，我终于离开了生活和学习了四年的城市，<br>这个城市含着与我记忆无关的繁华，就这么走了也没捎上一句不咸不淡的问候</p><p>人最可悲的心甘情愿用不知道多少个日夜的交替去执着自己不该执着的事物,<br>然而早已白露不是惊蛰，<br>世间也不存在那壶让人醉生梦死的酒<br>我只知道这个城市有我无法割舍的记忆和无法忘却的故人…</p><p>2017年元旦去了一趟东极之东，那里晚霞中的风车阵太美,<br>傍晚的暮霭渐渐化成粉色的温柔…<br>其实东极还有另一种宁静，那是大家启程返航的时候，<br>我们懈怠了一点，于是看到的也多一点，那时候的东极才是真正的东极…</p><p>你很难找到跟你性情相通的人，<br>你发现你只是一个存在， 又或者在别人眼里根本就看不见你。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://www.tuchuang001.com/images/2018/04/27/11192154-file_1487341097174_e508.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;我已经快忘了来这座城市的初衷&lt;/p&gt;
&lt;p&gt;我总是没有勇气把生活过的波澜壮阔&lt;/p&gt;
    
    </summary>
    
      <category term="旧事" scheme="https://www.limuyang.cc/categories/%E6%97%A7%E4%BA%8B/"/>
    
    
      <category term="自始至终" scheme="https://www.limuyang.cc/tags/%E8%87%AA%E5%A7%8B%E8%87%B3%E7%BB%88/"/>
    
  </entry>
  
  <entry>
    <title>Handler机制从入门到放弃(二)</title>
    <link href="https://www.limuyang.cc/2016/10/29/Handler%E6%9C%BA%E5%88%B6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%BA%8C/"/>
    <id>https://www.limuyang.cc/2016/10/29/Handler机制从入门到放弃-二/</id>
    <published>2016-10-29T22:48:19.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<h4 id="从注释看起"><a href="#从注释看起" class="headerlink" title="从注释看起"></a>从注释看起</h4><p>Hander的源码只有不到800行，而且大多数代码相对来说还是比较好理解的，尤其是相对于其他更加接近底层的代码来说，在看源码时候有一点挺重要的就是不要忽略注释的作用，Handler类开头有这么几行注释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;There are two main uses <span class="keyword">for</span> a Handler: (<span class="number">1</span>) to schedule messages and</span><br><span class="line"> runnables to be executed <span class="keyword">as</span> some point <span class="keyword">in</span> the future; and (<span class="number">2</span>) to enqueue</span><br><span class="line"> an action to be performed on a different thread than your own.</span><br></pre></td></tr></table></figure><a id="more"></a> 归纳一下就是：<br><br>- 安排消息和任务在将来的某一个点执行<br>- 使一个动作进入队列为了能够在另一个线程中执行<br><br>回顾一下我们为什么要用Handler：<br><br>&gt; 在Android中，当要更新UI的时候，我们必须要在主线程中进行更新，原因时当主线程被阻塞了5s以上就会出现ANR异常，会导致程序崩溃。所以一些耗时的操作必须要放在子线程中，但是在子线程中又不能做更新UI的操作，所以为了解决这个问题，Android设计了handler机制。<br><br>这么一对比，很容易的印证了这段话：使一个动作进入队列在另一个线程中执行：这不就是异步执行耗时任务么；安排消息和任务在将来的某一个点执行：联想一下postDelayed之类的延时操作的方法，或者给出一个很常见的例子，比如说引导页延时启动：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(<span class="string">"ThreadName 1"</span>,Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">//第一次登陆扫描本地音乐</span></span><br><span class="line">                <span class="keyword">if</span> (SPUtils.getValue(SplashActivity.<span class="keyword">this</span>, <span class="string">"isFirst"</span>, <span class="string">"First"</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            <span class="comment">//耗时操作</span></span><br><span class="line">                            <span class="comment">//清空表</span></span><br><span class="line">                            Log.d(<span class="string">"ThreadName 2"</span>,Thread.currentThread().getName());</span><br><span class="line">                            DataSupport.deleteAll(MusicInfoDetail.class);</span><br><span class="line">                            MusicUtils.scanMusic(SplashActivity.<span class="keyword">this</span>, musicInfo);</span><br><span class="line">                            DataSupport.saveAll(musicInfo);</span><br><span class="line">                            SPUtils.putValue(SplashActivity.<span class="keyword">this</span>, <span class="string">"isFirst"</span>, <span class="string">"First"</span>, <span class="keyword">false</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;).start();</span><br><span class="line">               &#125;, <span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>这里是我自己的Demo里面的一部分代码，这里使用<code>postDelayed</code>延时2s启动，然后在子线程执行更新数据库的操作，很好的印证了上面两点。</p><h4 id="创建Handler"><a href="#创建Handler" class="headerlink" title="创建Handler"></a>创建Handler</h4><p>在上一篇文章Handler机制从入门到放弃(一)里面我们已经演示了两种创建Handler的方法并且给出了部分实际操作的代码，但是都是在主线程也就是UI线程创建的，我们可以尝试一下在子线程中创建Handler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler mainHandler;</span><br><span class="line">    <span class="keyword">private</span> Handler childHandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mainHandler=<span class="keyword">new</span> Handler();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                childHandler=<span class="keyword">new</span> Handler();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行一下，果不其然代码蹦了：</p><p>报错信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.RuntimeException: Can&apos;t create handler inside thread that has not called Looper.prepare()</span><br></pre></td></tr></table></figure><p>告诉我们说在Thread里面创建Handler需要调用<code>Looper.prepare( )</code>，那把这一句加上试试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler mainHandler;</span><br><span class="line">    <span class="keyword">private</span> Handler childHandler;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mainHandler=<span class="keyword">new</span> Handler();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Looper.prepare();</span><br><span class="line">                childHandler=<span class="keyword">new</span> Handler();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果然很成功的运行了，但是这是为什么，来看一下Handler的源码：</p><p>这里提供一个简便的方法，为了快速找到原因可以在打开的源码(我这里使用sublimeText查看)里使用ctrl+f快捷键搜索Looper.prepare( )出现的地方：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</span><br><span class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</span><br><span class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</span><br><span class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</span><br><span class="line">                    klass.getCanonicalName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mQueue = mLooper.mQueue;</span><br><span class="line">        mCallback = callback;</span><br><span class="line">        mAsynchronous = async;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这是Handler的其中一个构造方法，看到这么一段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mLooper = Looper.myLooper();</span><br><span class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>在构造方法里通过<code>Looper.myLooper()</code>获取到一个Looper对象mLooper，如果为空则报错，找到<code>Looper.myLooper()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Return the Looper object associated with the current thread.  Returns</span></span><br><span class="line"><span class="comment">     * null if the calling thread is not associated with a Looper.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sThreadLocal.get();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注释给出的解释是这个方法回返回跟当前线程相关联的Looper对象，如果没有则返回空，还是没找到答案，接着找Looper类里面对sThreadLocal的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sThreadLocal.get() will return null unless you've called prepare().</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</span><br></pre></td></tr></table></figure><p>又是注释里面告诉了我们重要信息，这里告诉我们只有你调用了<code>Looper.prepare()</code>方法<code>sThreadLocal.get()</code>才不会返回空，那么说来说去还是要看<code>Looper.prepare()</code>的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Initialize the current thread as a looper.</span></span><br><span class="line"><span class="comment">      * This gives you a chance to create handlers that then reference</span></span><br><span class="line"><span class="comment">      * this looper, before actually starting the loop. Be sure to call</span></span><br><span class="line"><span class="comment">      * &#123;<span class="doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</span></span><br><span class="line"><span class="comment">      * &#123;<span class="doctag">@link</span> #quit()&#125;.</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prepare(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>看下面那个，Looper.prepare()调用了prepare()的重载方法prepare(boolean quitAllowed)并且传入了true参数，这个方法判断sThreadLocal.get()是否会返回一个Looper对象，如果没有的话就set一个新的Looper进去，如果已经有了再调用prepare()方法的话就会报错，不信邪的可以在mainHandler创建之前也调用一个Looper.prepare()，控制台就会出现这个错误：</p><p>那么问题来了，为什么我们在主线程创建Handler不需要调用<code>Looper.prepare()</code>，而在子线程中需要呢，可以合理的猜想是不是系统给我们主动调用了，毕竟我们大部分的操作还是在主线程上，每次都要那么<code>Looper.prepare()</code>来一次多麻烦，有了猜想还要去源码寻求验证，主线程是ActivityThread，从ActivityThread类里搜索相关信息，用跟上面一样的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</span><br><span class="line">        SamplingProfilerIntegration.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></span><br><span class="line">        <span class="comment">// disable it here, but selectively enable it later (via</span></span><br><span class="line">        <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></span><br><span class="line">        CloseGuard.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Environment.initForCurrentUser();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the reporter for event logging in libcore</span></span><br><span class="line">        EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></span><br><span class="line">        <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</span><br><span class="line">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</span><br><span class="line"></span><br><span class="line">        Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        Looper.prepareMainLooper();</span><br><span class="line"></span><br><span class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</span><br><span class="line">        thread.attach(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sMainThreadHandler = thread.getHandler();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</span><br><span class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></span><br><span class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// End of event ActivityThreadMain.</span></span><br><span class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</span><br><span class="line">        Looper.loop();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>抓重点：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Looper.prepareMainLooper();</span><br></pre></td></tr></table></figure><p>找到Looper类中关于这个方法的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">     * Initialize the current thread as a looper, marking it as an</span><br><span class="line">     * application&apos;s main looper. The main looper for your application</span><br><span class="line">     * is created by the Android environment, so you should never need</span><br><span class="line">     * to call this function yourself.  See also: &#123;@link #prepare()&#125;</span><br><span class="line">     */</span><br><span class="line">public static void prepareMainLooper() &#123;</span><br><span class="line">        prepare(false);</span><br><span class="line">        synchronized (Looper.class) &#123;</span><br><span class="line">            if (sMainLooper != null) &#123;</span><br><span class="line">                throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            sMainLooper = myLooper();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这里又会主动调用<code>prepare(boolean quitAllowed)</code>方法，通过注释也了解到我们不需要主动去创建UI线程的looper，系统自动会给我们创建好了，这里印证了前面的猜想。</p><p>这里得出一个结论：</p><p><strong>在主线程中可以直接创建Handler对象，而在子线程中需要先调用Looper.prepare()才能创建Handler对象。</strong></p><p>这里先不管Looper是什么，暂时知道有这个东西，下面可以看一下如何发送消息。</p><h4 id="如何发送消息"><a href="#如何发送消息" class="headerlink" title="如何发送消息"></a>如何发送消息</h4><p>这里就用到了第二种创建Handler的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Handler myHandler = <span class="keyword">new</span> Handler() &#123;  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;   </span><br><span class="line">               <span class="keyword">switch</span> (msg.what) &#123;   </span><br><span class="line">                   <span class="comment">//根据参数进行操作</span></span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">               &#125;   </span><br><span class="line">               <span class="keyword">super</span>.handleMessage(msg);   </span><br><span class="line">          &#125;   </span><br><span class="line">     &#125;;  </span><br><span class="line">  <span class="comment">//其他地方调用</span></span><br><span class="line">myHandler.sendMessage(xxx);</span><br></pre></td></tr></table></figure><p>这里的其他地方调用指的就是在子线程里面，当我们在子线程里面执行完耗时操作之后如果需要传递一些数据给主线程，比如通知主线程更新UI之类的，就可以这么做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span>  Handler myHandler = <span class="keyword">new</span> Handler() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">switch</span> (msg.what) &#123;</span><br><span class="line">                    <span class="comment">//根据参数进行操作</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               Message msg=<span class="keyword">new</span> Message();</span><br><span class="line">                <span class="comment">//what是用户自定义的识别码</span></span><br><span class="line">                msg.what=<span class="number">1</span>;</span><br><span class="line">                <span class="comment">//通过arg1和arg2可以给Message传递简单的int型数据</span></span><br><span class="line">                msg.arg1=<span class="number">123</span>;</span><br><span class="line">                msg.arg2=<span class="number">456</span>;</span><br><span class="line">                <span class="comment">//通过给obj赋值Object类型传递向Message传入任意数据</span></span><br><span class="line">                msg.obj=<span class="keyword">null</span>;</span><br><span class="line">                myHandler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br></pre></td></tr></table></figure><p>当然除了传递这些简单数据之外Message类还能以setData方式携带Bundle数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();  </span><br><span class="line">    bundle.putString(<span class="string">"data"</span>, <span class="string">"data"</span>);  </span><br><span class="line">    message.setData(bundle);</span><br></pre></td></tr></table></figure><p>我们看到这里是在子线程中调用了<code>sendMessage(msg)</code>方法，然而我们却在主线程中使用<code>handleMessage(Message msg)</code>接受消息，这之间一定发生了一些不可描述的事情，让我们来找找看，当然除了<code>sendMessage(msg)</code>方法Message类还有许多其他发送消息的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</span><br><span class="line">        Message msg = Message.obtain();</span><br><span class="line">        msg.what = what;</span><br><span class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">        Message msg = Message.obtain();</span><br><span class="line">        msg.what = what;</span><br><span class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> .....</span><br></pre></td></tr></table></figure><p>巧的是，这些方法无论转折多少次都走向了同一个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Enqueue a message into the message queue after all pending messages</span></span><br><span class="line"><span class="comment">     * before the absolute time (in milliseconds) &lt;var&gt;uptimeMillis&lt;/var&gt;.</span></span><br><span class="line"><span class="comment">     * &lt;b&gt;The time-base is &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125;.&lt;/b&gt;</span></span><br><span class="line"><span class="comment">     * Time spent in deep sleep will add an additional delay to execution.</span></span><br><span class="line"><span class="comment">     * You will receive it in &#123;<span class="doctag">@link</span> #handleMessage&#125;, in the thread attached</span></span><br><span class="line"><span class="comment">     * to this handler.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> uptimeMillis The absolute time at which the message should be</span></span><br><span class="line"><span class="comment">     *         delivered, using the</span></span><br><span class="line"><span class="comment">     *         &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125; time-base.</span></span><br><span class="line"><span class="comment">     *         </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</span></span><br><span class="line"><span class="comment">     *         message queue.  Returns false on failure, usually because the</span></span><br><span class="line"><span class="comment">     *         looper processing the message queue is exiting.  Note that a</span></span><br><span class="line"><span class="comment">     *         result of true does not mean the message will be processed -- if</span></span><br><span class="line"><span class="comment">     *         the looper is quit before the delivery time of the message</span></span><br><span class="line"><span class="comment">     *         occurs then the message will be dropped.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">        MessageQueue queue = mQueue;</span><br><span class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法接受两个参数，msg和<code>uptimeMillis</code>，msg就是我们需要传递的消息，<code>uptimeMillis</code>则是发送消息时候的绝对时刻，它的值等于自系统开机到当前时间的毫秒数再加上延迟时间，这个延迟时间就是我们调用sendxxxDelayed里面传入的时间参数，这个方法会把一个消息放入消息队列(message queue)，然后把这个方法的两个参数加上新建的MessageQueue 对象传入<code>enqueueMessage(queue, msg, uptimeMillis)</code>方法里，从字面上理解MessageQueue 是一个消息队列，那么队列就会有入队和出队的方法，这个<code>enqueueMessage(queue, msg, uptimeMillis)</code>应该就是入队的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">        msg.target = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>没有发现什么，这里又调用了<code>enqueueMessage(msg, uptimeMillis)</code>方法，这个方法在<code>MessageQueue</code>类里面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                        msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</span><br><span class="line">                Log.w(TAG, e.getMessage(), e);</span><br><span class="line">                msg.recycle();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            Message p = mMessages;</span><br><span class="line">            <span class="keyword">boolean</span> needWake;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码有点长，一步一步看，先看前面一部分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这里判断了一下msg.target对象是否为空，还记得之前的<code>enqueueMessage(queue, msg, uptimeMillis)</code>方法吗：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</span><br><span class="line">        msg.target = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</span><br><span class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法是在Handler中执行的，这里把一个this对象赋值给<code>msg.target</code>，那么从Message类找一下这个target到底是什么，找到这个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*package*/</span> Handler target;</span><br></pre></td></tr></table></figure><p>这样脉络就很清晰了，这里是把Handler跟Message对象绑定起来，接着往下看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">msg.markInUse();</span><br><span class="line">            msg.when = when;</span><br><span class="line">            Message p = mMessages;</span><br><span class="line">            <span class="keyword">boolean</span> needWake;</span><br><span class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></span><br><span class="line">            <span class="keyword">if</span> (needWake) &#123;</span><br><span class="line">                nativeWake(mPtr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>这个<code>msg.when</code>就是用传入的<code>uptimeMillis</code>参数赋值，表示入队时间，看到这个if判断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</span><br><span class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></span><br><span class="line">                msg.next = p;</span><br><span class="line">                mMessages = msg;</span><br><span class="line">                needWake = mBlocked;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>有人可能会好奇这个when怎么会为0呢，这里提一嘴，Handler除了有正常的sendMessage之流的方法还有一个比较特殊的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtFrontOfQueue</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        MessageQueue queue = mQueue;</span><br><span class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</span><br><span class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</span><br><span class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法特殊在什么地方呢，打个比方，如果说我们正常的<code>sendMessage</code>之流的方法是一群正常排队的人，按照来的时间先后有序排队，但是<code>sendMessageAtFrontOfQueue</code>就是那种个别不老实的，它能直接插队到最前面，然后他传递的<code>uptimeMillis</code>为0，这也是唯一一个特殊的发送消息的方法。</p><p>这个判断语句成立的条件有三点：<code>p == null || when == 0 || when &lt; p.when</code></p><ul><li>p == null说明当前looper处于空闲状态，也就是没有什么消息需要处理</li><li>when == 0说明有消息插队插到了MessageQueue最前面</li><li>when &lt; p.when指的是新入队的消息队列需要排队的时间比正在执行的消息排队的时间短</li></ul><p>综合来说就是，如果这时候新进来一个消息，这时候消息队列里面没有需要执行的消息，或者新进来的这个消息是通过<code>sendMessageAtFrontOfQueue(Message msg)</code>方法传进来的，或者说新进来的这个消息需要等待的时间比之前在等待的消息等待的时间短，那么就把这个消息插入链表的表头，此时系统会唤醒这个消息队列无论队列是否堵塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Got a message.</span></span><br><span class="line"> mBlocked = <span class="keyword">false</span>;</span><br></pre></td></tr></table></figure><p>这一行代码说明只要消息队列有消息，这个队列就不阻塞，然后把这个布尔值传递：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> needWake</span><br><span class="line">needWake = mBlocked;</span><br></pre></td></tr></table></figure><p>那么这一块代码就打通了，下面这块else语句块：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></span><br><span class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></span><br><span class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></span><br><span class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</span><br><span class="line">                Message prev;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    prev = p;</span><br><span class="line">                    p = p.next;</span><br><span class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</span><br><span class="line">                        needWake = <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></span><br><span class="line">                prev.next = msg;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>讲的是如何把消息插入链表的内部，这时候就不需要去调整唤醒消息队列的时间，因为唤醒的时间是跟表头有关的，这样整个入队的操作差不多就过了一遍.</p><h4 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h4><p>既然有入队操作那么肯定也有出队操作，如果你还记得我们最开始使用的Looper类的话，那么这里不妨直接告诉你，出队的方法就在Looper类里面，这里有个<code>loop()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the message queue in this thread. Be sure to call</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br><span class="line">        <span class="comment">// Make sure the identity of this thread is that of the local process,</span></span><br><span class="line">        <span class="comment">// and keep track of what that identity token actually is.</span></span><br><span class="line">        Binder.clearCallingIdentity();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</span><br><span class="line">        <span class="comment">//死循环</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="comment">//把消息从队列取出</span></span><br><span class="line">            Message msg = queue.next(); <span class="comment">// might block</span></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></span><br><span class="line">            <span class="keyword">final</span> Printer logging = me.mLogging;</span><br><span class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</span><br><span class="line">                        msg.callback + <span class="string">": "</span> + msg.what);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</span><br><span class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                msg.target.dispatchMessage(msg);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</span><br><span class="line">                    Trace.traceEnd(traceTag);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</span><br><span class="line">                logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Make sure that during the course of dispatching the</span></span><br><span class="line">            <span class="comment">// identity of the thread wasn't corrupted.</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</span><br><span class="line">            <span class="keyword">if</span> (ident != newIdent) &#123;</span><br><span class="line">                Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></span><br><span class="line">                        + Long.toHexString(ident) + <span class="string">" to 0x"</span></span><br><span class="line">                        + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></span><br><span class="line">                        + msg.target.getClass().getName() + <span class="string">" "</span></span><br><span class="line">                        + msg.callback + <span class="string">" what="</span> + msg.what);</span><br><span class="line">            &#125;</span><br><span class="line">            msg.recycleUnchecked();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注意这两段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Looper me = myLooper();</span><br><span class="line"><span class="keyword">final</span> MessageQueue queue = me.mQueue;</span><br></pre></td></tr></table></figure><p>之前说过一个线程必须有一个Looper，这里不仅获取到了Looper，还获取到了当前线程绑定的MessageQueue也就是消息队列，然后<code>loop()</code>方法最开始是判断当前线程是否有Looper对象，之后进入一个死循环，在循环体内不断的从消息队列(Message queue)中取出消息对象，为什么这么说，看这个<code>next()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></span><br><span class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        . . . . . .</span><br><span class="line">        nativePollOnce(mPtr, nextPollTimeoutMillis);    <span class="comment">// 阻塞于此</span></span><br><span class="line">        . . . . . .</span><br><span class="line">            <span class="comment">// 获取next消息，如能得到就返回之。</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</span><br><span class="line">            Message prevMsg = <span class="keyword">null</span>;</span><br><span class="line">            Message msg = mMessages;  <span class="comment">// 先尝试拿消息队列里当前第一个消息</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果从队列里拿到的msg是个“同步分割栏”，那么就寻找其后第一个“异步消息”</span></span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    prevMsg = msg;</span><br><span class="line">                    msg = msg.next;</span><br><span class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</span><br><span class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></span><br><span class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now,</span><br><span class="line">                                                                   Integer.MAX_VALUE);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// Got a message.</span></span><br><span class="line">                    mBlocked = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        prevMsg.next = msg.next;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        mMessages = msg.next;  <span class="comment">// 重新设置一下消息队列的头部</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    msg.next = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">false</span>) Log.v(<span class="string">"MessageQueue"</span>, <span class="string">"Returning message: "</span> + msg);</span><br><span class="line">                    msg.markInUse();</span><br><span class="line">                    <span class="keyword">return</span> msg;     <span class="comment">// 返回得到的消息对象</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// No more messages.</span></span><br><span class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Process the quit message now that all pending messages have been handled.</span></span><br><span class="line">            <span class="keyword">if</span> (mQuitting) &#123;</span><br><span class="line">                dispose();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></span><br><span class="line">                        &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</span><br><span class="line">                    pendingIdleHandlerCount = mIdleHandlers.size();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></span><br><span class="line">                mBlocked = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        . . . . . .</span><br><span class="line">        <span class="comment">// 处理idle handlers部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</span><br><span class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keep = idler.queueIdle();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"IdleHandler threw exception"</span>, t);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!keep) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    mIdleHandlers.remove(idler);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</span><br><span class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释已经很详细了，现在知道了哪里把消息取出来，但是还不知道消息是哪里处理的，接着上面的<code>loop()</code>方法的代码往下看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msg.target.dispatchMessage(msg);</span><br></pre></td></tr></table></figure><p>这一行很关键，字面意思都可以看出来这里是分发消息，找到源码查看一下，之前说过msg.target就是与Message绑定的Handler，所以在Handler的源码里面找：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle system messages here.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</span><br><span class="line">            handleCallback(msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>代码很简单，但是答案就快揭晓了，Handler通过post和sendMessage之类的方法把消息发出去，绕了一大圈又回到了Handler，先别激动，看看代码到底说了什么：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (msg.callback != null) &#123;</span><br><span class="line">            handleCallback(msg);</span><br></pre></td></tr></table></figure><p>这里的<code>msg.callback</code>其实就是一个<code>Runnable</code>对象，可以通过查看Message源码发现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Same as &#123;<span class="doctag">@link</span> #obtain(Handler)&#125;, but assigns a callback Runnable on</span></span><br><span class="line"><span class="comment">     * the Message that is returned.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h  Handler to assign to the returned Message object's &lt;em&gt;target&lt;/em&gt; member.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> callback Runnable that will execute when the message is handled.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> A Message object from the global pool.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">(Handler h, Runnable callback)</span> </span>&#123;</span><br><span class="line">        Message m = obtain();</span><br><span class="line">        m.target = h;</span><br><span class="line">        <span class="comment">//创建Message类时候系统建议使用Message msg=Message.obtain()；形式</span></span><br><span class="line">        m.callback = callback;</span><br><span class="line">        <span class="keyword">return</span> m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>你想到了什么，在回想一遍我们使用Handler的两种方式，一种是<code>post(Runnable r)</code>的形式，一种是<code>sendMessage(Message msg)</code>形式，第一种方式刚好传递的就是一个<code>Runnable</code>对象，看一下这个<code>handleCallback(msg)</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private static void handleCallback(Message message) &#123;</span><br><span class="line">        message.callback.run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单粗暴，走的就是<code>post(Runnable r)</code> 所传递参数的 <code>run()</code>方法，那么第二种形式呢：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>这个<code>mCallback</code>是<code>Hanlder.Callback</code>类对象，这个<code>Callback</code>是<code>Handler</code>的内部的一个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就对应了<code>sendMessage(Message msg)</code>的形式，到此，真相大白，这里还有一点要注意的是，ActivityThread也就是UI线程是自动调用了<code>Looper.loop()</code>方法的所以在主线程使用Handler是不需要再去调用了，但是在子线程中却是要自己调用的，否则不会进入MessageQueue，而且Handler不仅仅只有更新UI的作用，它是与所创建的线程所绑定的，所以可以使用它在主线程向子线程发送消息，反过来也一样，关于这点的使用详见 <a href="http://gqdy365.iteye.com/blog/2109453" target="_blank" rel="noopener"><strong>Android主线程.子线程通信（Thread+handler）</strong></a></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>从最开始的使用到从源码的角度去分析，写这篇博客花了很长的时间，最后做个总结： 在整个Android内部通信进程中，Handler机制如果捋顺了相互之间的关系的话其实不难理解</p><p>套用一段很形象的话解释这幅图：</p><blockquote><p>我们可以把传送带上的货物看做是一个个的Message，而承载这些货物的传送带就是装载Message的消息队列MessageQueue。传送带是靠发送机滚轮带动起来转动的，我们可以把发送机滚轮看做是Looper，而发动机的转动是需要电源的，我们可以把电源看做是线程Thread，所有的消息循环的一切操作都是基于某个线程的。一切准备就绪，我们只需要按下电源开关发动机就会转动起来，这个开关就是Looper的loop方法，当我们按下开关的时候，我们就相当于执行了Looper的loop方法，此时Looper就会驱动着消息队列循环起来。</p></blockquote><blockquote><p>那Hanlder在传送带模型中相当于什么呢？我们可以将Handler看做是放入货物以及取走货物的管道：货物从一端顺着管道划入传送带，货物又从另一端顺着管道划出传送带。我们在传送带的一端放入货物的操作就相当于我们调用了Handler的sendMessageXXX、sendEmptyMessageXXX或postXXX方法，这就把Message对象放入到了消息队列MessageQueue中了。当货物从传送带的另一端顺着管道划出时，我们就相当于调用了Hanlder的dispatchMessage方法，在该方法中我们完成对Message的处理。</p></blockquote><p><a href="http://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="noopener"><strong>这段话出自</strong></a></p><h4 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h4><ul><li><a href="http://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="noopener">深入源码解析Android中的Handler,Message,MessageQueue,Looper</a></li><li><a href="http://blog.csdn.net/feiduclear_up/article/details/46817283" target="_blank" rel="noopener">从Handler+Message+Looper源码带你分析Android系统的消息处理机制</a></li><li><a href="http://blog.csdn.net/guolin_blog/article/details/9991569" target="_blank" rel="noopener">Android异步消息处理机制完全解析，带你从源码的角度彻底理解</a></li><li><a href="https://my.oschina.net/youranhongcha/blog/492591?_t=t" target="_blank" rel="noopener">聊一聊Android的消息机制</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;从注释看起&quot;&gt;&lt;a href=&quot;#从注释看起&quot; class=&quot;headerlink&quot; title=&quot;从注释看起&quot;&gt;&lt;/a&gt;从注释看起&lt;/h4&gt;&lt;p&gt;Hander的源码只有不到800行，而且大多数代码相对来说还是比较好理解的，尤其是相对于其他更加接近底层的代码来说，在看源码时候有一点挺重要的就是不要忽略注释的作用，Handler类开头有这么几行注释：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;There are two main uses &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a Handler: (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) to schedule messages and&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; runnables to be executed &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; some point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the future; and (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) to enqueue&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; an action to be performed on a different thread than your own.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https://www.limuyang.cc/categories/Android/"/>
    
    
      <category term="Android" scheme="https://www.limuyang.cc/tags/Android/"/>
    
      <category term="Handler" scheme="https://www.limuyang.cc/tags/Handler/"/>
    
      <category term="源码分析" scheme="https://www.limuyang.cc/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Handler机制从入门到放弃(一)</title>
    <link href="https://www.limuyang.cc/2016/10/29/Handler%E6%9C%BA%E5%88%B6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/"/>
    <id>https://www.limuyang.cc/2016/10/29/Handler机制从入门到放弃-一/</id>
    <published>2016-10-29T22:41:23.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无事，准备好好梳理一下Handler机制，之前分析过没有写成博客，结果就是慢慢的淡忘了，这次趁着刚分析完，赶紧写下来。</p><p>在开始分析之前先打打基础，理解理解什么是线程以及什么是Handler，这里大部分内容引用一篇来自伯乐在线的文章，因为看来看去关于基础的部分这个人已经说得很好了，我就负责把主要的部分抽取出来。</p><p>原文地址：<strong><a href="http://blog.jobbole.com/73267/" target="_blank" rel="noopener">Android线程和Handler基础入门</a></strong> <a id="more"></a></p><p>现在大多数的移动设备已经变得越来越快，但是它们其实也不算是非常快。如果你想让你的APP既可以承受一些繁杂的工作而又不影响用户体验的话，那么必须把任务并行执行。在Android上，我们使用线程。</p><h4 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h4><p>线程或者线程执行本质上就是一串命令（也是程序代码），然后我们把它发送给操作系统执行。</p><p>一般来说，我们的CPU在任何时候一个核只能处理一个线程。多核处理器（目前大多数Android设备已经都是多核）顾名思义，就是可以同时处理多线程（通俗地讲就是可以同时处理多件事）。</p><h4 id="多核处理与单核多任务处理的实质"><a href="#多核处理与单核多任务处理的实质" class="headerlink" title="多核处理与单核多任务处理的实质"></a>多核处理与单核多任务处理的实质</h4><p>上面我说的是一般情况，并不是所有的描述都是一定正确的。因为单核也可以用多任务模拟出多线程。</p><p>每个运行在线程中的任务都可以分解成多条指令，而且这些指令不用同时执行。所以，单核设备可以首先切换到线程1去执行指令1A，然后切换到线程2去执行指令2A，接着返回到线程1再去执行1B、1C、1D，然后继续切换到线程2，执行2B、2C等等，以此类推。</p><p>这个线程之间的切换十分迅速，以至于在单核的设备中也会发生。几乎所有的线程都在相同的时间内进行任务处理。其实，这都是因为速度太快造成的假象，就像电影《黑客帝国》里的特工Brown一样，可以变幻出很多的头和手。</p><h4 id="Java核心里的线程"><a href="#Java核心里的线程" class="headerlink" title="Java核心里的线程"></a>Java核心里的线程</h4><p>在Java中，如果要想做平行任务处理的话，会在Runnable里面执行你的代码。可以继承Thread类，或者实现Runnable接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IAmAThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IAmAThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"IAmAThread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// your code (sequence of instructions)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// to execute this sequence of instructions in a separate thread.</span></span><br><span class="line"><span class="keyword">new</span> IAmAThread().start();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IAmARunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// your code (sequence of instructions)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// to execute this sequence of instructions in a separate thread.</span></span><br><span class="line">IAmARunnable myRunnable = <span class="keyword">new</span> IAmARunnable();</span><br><span class="line"><span class="keyword">new</span> Thread(myRunnable).start();</span><br></pre></td></tr></table></figure><p>这两个方法基本上是一样的。第一个版本是创建一个Thread类，第二个版本是需要创建一个Runnable对象，然后也需要一个Thread类来调用它。</p><h4 id="Android上的线程"><a href="#Android上的线程" class="headerlink" title="Android上的线程"></a>Android上的线程</h4><p>无论何时启动APP，所有的组件都会运行在一个单独的线程中（默认的）—-叫做主线程。这个线程主要用于处理UI的操作并为视图组件和小部件分发事件等，因此主线程也被称作UI线程(Main Thread)。除了Main Thread之外的线程都可称为Worker Thread。Main Thread主要负责控制UI页面的显示、更新、交互等。 因此所有在UI线程中的操作要求越短越好，只有这样用户才会觉得操作比较流畅。一个比较好的做法是把一些比较耗时的操作，例如网络请求、数据库操作、 复杂计算等逻辑都封装到单独的线程，这样就可以避免阻塞主线程，这样就需要用到了Android的Handler机制。</p><p><strong>这里划重点：Handler负责与子线程进行通讯，从而让子线程与主线程之间建立起协作的桥梁，使Android的UI更新的问题得到完美的解决</strong></p><h4 id="怎么创建Handler"><a href="#怎么创建Handler" class="headerlink" title="怎么创建Handler"></a>怎么创建Handler</h4><p>既然Handler有这样的好处，那么看Handler怎么用，官方给出了两种方式创建一个Handler：</p><p>1、使用默认的构造方法：new Handler()。 2、使用带参的构造方法，参数是一个Runnable对象或者回调对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();  </span><br><span class="line">   <span class="keyword">private</span> Runnable myRunnable= <span class="keyword">new</span> Runnable() &#123;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">             <span class="comment">//一些耗时操作</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;</span><br><span class="line"> <span class="comment">//其他地方调用</span></span><br><span class="line"> handler.post(xxx);</span><br><span class="line"> 这里就写一个post方法，实际上还有很多，诸如postDelayed、postAtTime</span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line">Handler myHandler = <span class="keyword">new</span> Handler() &#123;  </span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;   </span><br><span class="line">               <span class="keyword">switch</span> (msg.what) &#123;   </span><br><span class="line">                   <span class="comment">//根据参数进行操作</span></span><br><span class="line">                         <span class="keyword">break</span>;   </span><br><span class="line">               &#125;   </span><br><span class="line">               <span class="keyword">super</span>.handleMessage(msg);   </span><br><span class="line">          &#125;   </span><br><span class="line">     &#125;;  </span><br><span class="line">  <span class="comment">//其他地方调用</span></span><br><span class="line">myHandler.sendMessage(xxx);</span><br></pre></td></tr></table></figure><h4 id="如何使用Handler"><a href="#如何使用Handler" class="headerlink" title="如何使用Handler"></a>如何使用Handler</h4><p>这里使用一个简单的Demo来演示Handler的用法，界面偏简单就不贴了，直接贴代码，模拟的是点击Button执行下载，下载完成后更新UI。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Button</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView statusTextView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        statusTextView = (TextView)findViewById(R.id.statusTextView);</span><br><span class="line">        Button btnDownload = (Button)findViewById(R.id.btnDownload);</span><br><span class="line">        btnDownload.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        DownloadThread downloadThread = <span class="keyword">new</span> DownloadThread();</span><br><span class="line">        downloadThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"开始下载文件"</span>);</span><br><span class="line">                <span class="comment">//此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程</span></span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">"文件下载完成"</span>);</span><br><span class="line">                <span class="comment">//文件下载完成后更新UI</span></span><br><span class="line">                MainActivity.<span class="keyword">this</span>.statusTextView.setText(<span class="string">"文件下载完成"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照以前写Java的思路的话可能会这么写，但是运行程序时候会发现控制台报错：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</span><br></pre></td></tr></table></figure><p>错误的意思是只有创建View的原始线程才能更新View。出现这样错误的原因是Android中的View不是线程安全的，下面给出合理的解释：</p><blockquote><p>因为UI访问是没有加锁的，在多个线程中访问UI是不安全的，如果有多个子线程都去更新UI，会导致界面不断改变而混乱不堪。所以最好的解决办法就是只有一个线程有更新UI的权限，所以这个时候就只能有一个线程振臂高呼：放开那女孩，让我来！那么最合适的人选只能是主线程。</p></blockquote><blockquote><p>来自—<a href="http://blog.csdn.net/lfdfhl/article/details/51279160" target="_blank" rel="noopener"><strong>Android中线程那些事</strong></a></p></blockquote><p>那么为了规避Android的这种机制，我们这里分别采用Handler的两种方式来实现上面的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line">A、使用post方式</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Button</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView statusTextView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uiHandler在主线程中创建，所以自动绑定主线程</span></span><br><span class="line">    <span class="keyword">private</span> Handler uiHandler = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        statusTextView = (TextView)findViewById(R.id.statusTextView);</span><br><span class="line">        Button btnDownload = (Button)findViewById(R.id.btnDownload);</span><br><span class="line">        btnDownload.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        DownloadThread downloadThread = <span class="keyword">new</span> DownloadThread();</span><br><span class="line">        downloadThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"开始下载文件"</span>);</span><br><span class="line">                <span class="comment">//此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程</span></span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">"文件下载完成"</span>);</span><br><span class="line">                <span class="comment">//文件下载完成后更新UI</span></span><br><span class="line">                Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        MainActivity.<span class="keyword">this</span>.statusTextView.setText(<span class="string">"文件下载完成"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                uiHandler.post(runnable);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">B、使用sendMessage方式实现</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Button</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TextView statusTextView = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//uiHandler在主线程中创建，所以自动绑定主线程</span></span><br><span class="line">    <span class="keyword">private</span> Handler uiHandler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">"msg.arg1:"</span> + msg.arg1);</span><br><span class="line">                    System.out.println(<span class="string">"msg.arg2:"</span> + msg.arg2);</span><br><span class="line">                    MainActivity.<span class="keyword">this</span>.statusTextView.setText(<span class="string">"文件下载完成"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        statusTextView = (TextView)findViewById(R.id.statusTextView);</span><br><span class="line">        Button btnDownload = (Button)findViewById(R.id.btnDownload);</span><br><span class="line">        btnDownload.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        System.out.println(<span class="string">"Main thread id "</span> + Thread.currentThread().getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        DownloadThread downloadThread = <span class="keyword">new</span> DownloadThread();</span><br><span class="line">        downloadThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"开始下载文件"</span>);</span><br><span class="line">                <span class="comment">//此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程</span></span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                System.out.println(<span class="string">"文件下载完成"</span>);</span><br><span class="line">                <span class="comment">//文件下载完成后更新UI</span></span><br><span class="line">                Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                <span class="comment">//虽然Message的构造函数式public的，我们也可以通过以下两种方式通过循环对象获取Message</span></span><br><span class="line">                <span class="comment">//msg = Message.obtain(uiHandler);</span></span><br><span class="line">                <span class="comment">//msg = uiHandler.obtainMessage();</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//what是我们自定义的一个Message的识别码，以便于在Handler的handleMessage方法中根据what识别</span></span><br><span class="line">                <span class="comment">//出不同的Message，以便我们做出不同的处理操作</span></span><br><span class="line">                msg.what = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//我们可以通过arg1和arg2给Message传入简单的数据</span></span><br><span class="line">                msg.arg1 = <span class="number">123</span>;</span><br><span class="line">                msg.arg2 = <span class="number">321</span>;</span><br><span class="line">                <span class="comment">//我们也可以通过给obj赋值Object类型传递向Message传入任意数据</span></span><br><span class="line">                <span class="comment">//msg.obj = null;</span></span><br><span class="line">                <span class="comment">//我们还可以通过setData方法和getData方法向Message中写入和读取Bundle类型的数据</span></span><br><span class="line">                <span class="comment">//msg.setData(null);</span></span><br><span class="line">                <span class="comment">//Bundle data = msg.getData();</span></span><br><span class="line">                <span class="comment">//将该Message发送给对应的Handler</span></span><br><span class="line">                uiHandler.sendMessage(msg);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码来自博客：<a href="http://blog.csdn.net/iispring/article/details/47115879" target="_blank" rel="noopener"><strong>Android中Handler的使用</strong></a></p><p>上面这两种形式都能达到我们的要求，在此不一一测验，注释写的很详细了，看到这里应该已经大致知道了如何使用Handler，但是我想我们应该远远不满足于此，下一篇博客将带着大家从源码一起看看Handler机制到底是怎么实现的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲来无事，准备好好梳理一下Handler机制，之前分析过没有写成博客，结果就是慢慢的淡忘了，这次趁着刚分析完，赶紧写下来。&lt;/p&gt;
&lt;p&gt;在开始分析之前先打打基础，理解理解什么是线程以及什么是Handler，这里大部分内容引用一篇来自伯乐在线的文章，因为看来看去关于基础的部分这个人已经说得很好了，我就负责把主要的部分抽取出来。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;strong&gt;&lt;a href=&quot;http://blog.jobbole.com/73267/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Android线程和Handler基础入门&lt;/a&gt;&lt;/strong&gt;
    
    </summary>
    
      <category term="Android" scheme="https://www.limuyang.cc/categories/Android/"/>
    
    
      <category term="Android" scheme="https://www.limuyang.cc/tags/Android/"/>
    
      <category term="Handler" scheme="https://www.limuyang.cc/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>人生苦短，我用Python--分分钟下载知乎美图给你看</title>
    <link href="https://www.limuyang.cc/2016/08/11/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python-%E5%88%86%E5%88%86%E9%92%9F%E4%B8%8B%E8%BD%BD%E7%9F%A5%E4%B9%8E%E7%BE%8E%E5%9B%BE%E7%BB%99%E4%BD%A0%E7%9C%8B/"/>
    <id>https://www.limuyang.cc/2016/08/11/人生苦短，我用Python-分分钟下载知乎美图给你看/</id>
    <published>2016-08-11T19:45:46.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起"><a href="#起" class="headerlink" title="起"></a>起</h3><p>上次说了要爬知乎的图片，于是花了一下午的时间去完成这件事，发现暂时接触到的爬虫总是逃脱不了一个规律：</p><ul><li>模拟登陆</li><li>获取真实网页HTML源代码</li><li>解析获取到的网页源代码</li><li>获取想要的资源(下载到某个文件夹或者输出到表格中整合起来)</li></ul><p>也许和我说的有一些出入，应该是刚学这个东西的原因，接下来还想研究一下多线程爬虫、添加代理、爬取海量数据并整合成图表形式，先把能做的做了。</p><a id="more"></a><h3 id="承"><a href="#承" class="headerlink" title="承"></a>承</h3><p>因为是在上一次的基础上进行的，所以没有看<a href="http://www.limuyang.cc/2016/08/09/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python-%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%88%AC%E7%9F%A5%E4%B9%8E%E5%A8%98/"><strong>上一篇文章</strong></a>的可以先看一下，这里用到的工具跟之前一样：</p><ul><li>win7 64位 旗舰版</li><li>Python 3.5 64-bit</li><li>PyCharm</li></ul><p>这里模拟登陆是跟之前一样的代码，直接贴就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">logn_url = <span class="string">'http://www.zhihu.com/#signin'</span></span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">content = session.get(logn_url, headers=headers).content</span><br><span class="line">soup = BeautifulSoup(content, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getxsrf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> soup.find(<span class="string">'input'</span>, attrs=&#123;<span class="string">'name'</span>: <span class="string">"_xsrf"</span>&#125;)[<span class="string">'value'</span>]</span><br><span class="line">    <span class="comment"># 获取验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha</span><span class="params">()</span>:</span></span><br><span class="line">    t = str(int(time.time() * <span class="number">1000</span>))</span><br><span class="line">    captcha_url = <span class="string">'http://www.zhihu.com/captcha.gif?r='</span> + t + <span class="string">"&amp;type=login"</span></span><br><span class="line">    r = session.get(captcha_url, headers=headers)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'captcha.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="comment"># 用pillow 的 Image 显示验证码</span></span><br><span class="line">    <span class="comment"># 如果没有安装 pillow 到源代码所在的目录去找到验证码然后手动输入</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        im = Image.open(<span class="string">'captcha.jpg'</span>)</span><br><span class="line">        im.show()</span><br><span class="line">        im.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">u'请到 %s 目录找到captcha.jpg 手动输入'</span> % os.path.abspath(<span class="string">'captcha.jpg'</span>))</span><br><span class="line">    captcha = input(<span class="string">"please input the captcha\n&gt;"</span>)</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isLogin</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 通过查看用户个人信息来判断是否已经登录</span></span><br><span class="line">    url = <span class="string">"https://www.zhihu.com/settings/profile"</span></span><br><span class="line">    login_code = session.get(url, allow_redirects=<span class="literal">False</span>).status_code</span><br><span class="line">    <span class="keyword">if</span> int(x=login_code) == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(secret, account)</span>:</span></span><br><span class="line">    <span class="comment"># 通过输入的用户名判断是否是手机号</span></span><br><span class="line">    <span class="keyword">if</span> re.match(<span class="string">r"^1\d&#123;10&#125;$"</span>, account):</span><br><span class="line">        print(<span class="string">"手机号登录 \n"</span>)</span><br><span class="line">        post_url = <span class="string">'http://www.zhihu.com/login/phone_num'</span></span><br><span class="line">        postdata = &#123;</span><br><span class="line">            <span class="string">'_xsrf'</span>: getxsrf(),</span><br><span class="line">            <span class="string">'password'</span>: secret,</span><br><span class="line">            <span class="string">'remember_me'</span>: <span class="string">'true'</span>,</span><br><span class="line">            <span class="string">'phone_num'</span>: account,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"邮箱登录 \n"</span>)</span><br><span class="line">        post_url = <span class="string">'http://www.zhihu.com/login/email'</span></span><br><span class="line">        postdata = &#123;</span><br><span class="line">            <span class="string">'_xsrf'</span>: getxsrf(),</span><br><span class="line">            <span class="string">'password'</span>: secret,</span><br><span class="line">            <span class="string">'remember_me'</span>: <span class="string">'true'</span>,</span><br><span class="line">            <span class="string">'email'</span>: account,</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 不需要验证码直接登录成功</span></span><br><span class="line">        login_page = session.post(post_url, data=postdata, headers=headers)</span><br><span class="line">        login_code = login_page.text</span><br><span class="line">        print(login_page.status)</span><br><span class="line">        print(login_code)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="comment"># 需要输入验证码后才能登录成功</span></span><br><span class="line">        postdata[<span class="string">"captcha"</span>] = get_captcha()</span><br><span class="line">        login_page = session.post(post_url, data=postdata, headers=headers)</span><br><span class="line">        login_code = eval(login_page.text)</span><br><span class="line">        print(login_code[<span class="string">'msg'</span>])</span><br></pre></td></tr></table></figure><p>这里的代码来自GitHub上的<a href="https://github.com/xchaoinfo/fuck-login" target="_blank" rel="noopener"><strong>fuck-login</strong></a>项目，在此表示感谢，我在原始代码上进行了改进，原始代码是适配了Python2.x和Python3.x，但是我学的是Python3.x所以去掉了一些我没用过的模块，也就是说我改进了后的代码是适用于Python3.x的。</p><p>下面就是准备获取图片了，先找一个目标，最近有一个问题很火：</p><blockquote><p><a href="https://www.zhihu.com/question/37709992" target="_blank" rel="noopener"><strong>长得好看，但没有男朋友是怎样的体验</strong></a></p></blockquote><p>还记得我列出来的步骤么，模拟登陆之后是获取真实的网页源代码，什么叫真实的，这个问题问得好，你没发现知乎很喜欢用动态加载技术么，也就是说，你看到的只是表象，这里也一样。</p><h3 id="转"><a href="#转" class="headerlink" title="转"></a>转</h3><p><img src="https://www.tuchuang001.com/images/2018/04/27/2b2973716c9c095a.png" alt="问题界面"></p><p>来，我们先点开点赞数最高的妹子上传的图片：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/beauty.png" alt="Beauty"></p><p>咳咳咳，好像跑偏了，我们的目标是星辰大海，正确的做法是鼠标右键查看网页源代码：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/b5e4d869e42a7659.png" alt="网页源代码"></p><p>是不是看到了很多图片链接，当然我们要找.jpg、.jpeg、.png后缀的：</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-rawwidth</span>=<span class="string">"1632"</span> <span class="attr">data-rawheight</span>=<span class="string">"2040"</span> <span class="attr">src</span>=<span class="string">"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg"</span> <span class="attr">class</span>=<span class="string">"origin_image zh-lightbox-thumb lazy"</span> <span class="attr">width</span>=<span class="string">"1632"</span> <span class="attr">data-original</span>=<span class="string">"https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_r.jpg"</span> <span class="attr">data-actualsrc</span>=<span class="string">"https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_b.jpg"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>这里有两个：<code>data-original</code>和<code>data-actualsrc</code>，实际查看的图片是<code>data-original</code>的图片比<code>data-actualsrc</code>的大，下载下来也是如此，但是因为是使用正则去匹配规则，而<code>data-original</code>有多项，上面代码只是贴出来的一部分，实际匹配的结果类似这样：</p><p>data-actualsrc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data-actualsrc=&quot;https://pic2.zhimg.com/be7600989233bdf438e5ba23f2cdb685_b.jpg&quot;&gt;</span><br><span class="line">data-actualsrc=&quot;https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_b.jpg&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>data-original</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data-original=&quot;https://pic2.zhimg.com/be7600989233bdf438e5ba23f2cdb685_r.jpg&quot;&gt;</span><br><span class="line">data-original=&quot;https://pic2.zhimg.com/be7600989233bdf438e5ba23f2cdb685_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/be7600989233bdf438e5ba23f2cdb685_b.jpg&quot;&gt;</span><br><span class="line">data-original=&quot;https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_r.jpg&quot;&gt;</span><br><span class="line">data-original=&quot;https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_b.jpg&quot;&gt;</span><br><span class="line">data-original=&quot;https://pic2.zhimg.com/0930549116d22ffce22e98c32683d621_r.jpg&quot;&gt;</span><br></pre></td></tr></table></figure><p>这是在同一段网页源码测试下的结果，匹配后一种会得到多个相同的url地址，解析起来也更麻烦，这也跟正则写的简单有关系，有兴趣的可以到时候自己修改一下正则表达式，这样下下来的图片也更高清的多。</p><p>分析了正则，下面要获取所有的图片该分析Chrome开发者面板的Post数据，因为知乎默认只显示部分回答，我们可以不断往下拉，直到看到这个：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/more.png" alt="更多"></p><p>点击的时候注意观察开发者面板：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/4cf773a03dfbb51c.png" alt="开发者面板"></p><p>简直完美，传递的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method:next</span><br><span class="line">params:&#123;&quot;url_token&quot;:37709992,&quot;pagesize&quot;:10,&quot;offset&quot;:30&#125;</span><br></pre></td></tr></table></figure><p>很眼熟，<code>url_token</code>就是问题后面那串数字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.zhihu.com/question/37709992</span><br></pre></td></tr></table></figure><p><code>pagesize</code>是固定的10，最后一个<code>offset</code>偏移量同样很好理解，这里显示10应该说的就是默认显示的10个答案，后面还查看到如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method:next</span><br><span class="line">params:&#123;&quot;url_token&quot;:37709992,&quot;pagesize&quot;:10,&quot;offset&quot;:20&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">method:next</span><br><span class="line">params:&#123;&quot;url_token&quot;:37709992,&quot;pagesize&quot;:10,&quot;offset&quot;:30&#125;</span><br></pre></td></tr></table></figure><p>也就是说我们在浏览器上每翻过10个答案浏览器就会向服务器发送Post请求在加载十个答案，恩差不多可以开始写代码了。</p><h3 id="合"><a href="#合" class="headerlink" title="合"></a>合</h3><p>模拟登陆之后的操作是找到Post的真实地址模拟浏览器向服务器发送请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">'https://www.zhihu.com/node/QuestionAnswerListV2'</span></span><br><span class="line">header = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.zhihu.com/question/37709992'</span>,</span><br><span class="line">    <span class="string">'Origin'</span>: <span class="string">'https://www.zhihu.com'</span>,</span><br><span class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</span><br><span class="line">&#125;</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'method'</span>: <span class="string">'next'</span>,</span><br><span class="line">    <span class="string">'params'</span>: <span class="string">'&#123;"url_token":'</span> + str(<span class="number">37709992</span>) + <span class="string">',"pagesize": "10",'</span> + \</span><br><span class="line">              <span class="string">'"offset":'</span> + str(offset) + <span class="string">"&#125;"</span>,</span><br><span class="line">    <span class="string">'_xsrf'</span>: getxsrf(),</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>发送Post请求时候请加上<code>&#39;_xsrf&#39;: getxsrf()</code>这一行，否则的话返回的只会是<code>404 Forbidden</code>，应该是做了防伪登陆的缘故</p><p>然后是写正则，这里发现图片都是被包含在这里面：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zm-editable-content clearfix"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所以先匹配到这一大串内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">'&lt;a class="author-link".*?&lt;span title=.*?&lt;div class="zh-summary.*?'</span> +</span><br><span class="line">                     <span class="string">'&lt;div class="zm-editable-content.*?&gt;(.*?)&lt;/div&gt;'</span>, re.S)</span><br></pre></td></tr></table></figure><p>然后在匹配<code>data-actualsrc</code>里面的图片链接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern = re.compile(<span class="string">'data-actualsrc="(.*?)"&gt;'</span>, re.S)</span><br></pre></td></tr></table></figure><p>还有一点要注意的是我们请求之后返回来的是json格式的数据，所以这里还要用到json模块：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">question = session.post(url, headers=header, data=data)</span><br><span class="line">dic = json.loads(question.content.decode(<span class="string">'ISO-8859-1'</span>))</span><br><span class="line">li = dic[<span class="string">'msg'</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>然后对其进行解析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里使用的是第一个正则表达式</span></span><br><span class="line">items = re.findall(pattern, li)</span><br><span class="line"><span class="comment"># 接下来</span></span><br><span class="line">items = re.findall(pattern, li)</span><br><span class="line"><span class="comment"># 存储图片链接</span></span><br><span class="line">imagesurl = []</span><br><span class="line">pattern = re.compile(<span class="string">'data-actualsrc="(.*?)"&gt;'</span>, re.S)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">    urls = re.findall(pattern, item)</span><br><span class="line">    imagesurl.extend(urls)</span><br></pre></td></tr></table></figure><p>执行下载操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 存放图片的地址</span></span><br><span class="line">PWD = <span class="string">"D:/work/python/zhihu/"</span></span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> imagesurl:</span><br><span class="line">            myurl = url</span><br><span class="line">            filename = PWD + str(count) + <span class="string">'.jpg'</span></span><br><span class="line">            <span class="keyword">if</span> os.path.isfile(filename):</span><br><span class="line">                print(<span class="string">"文件存在："</span>, filename)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 执行下载操作的方法</span></span><br><span class="line">                downpic(filename, myurl)</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                photoNum += <span class="number">1</span></span><br><span class="line">            print(<span class="string">"一共下载了&#123;0&#125; 张照片"</span>.format(photoNum))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(PWD):</span><br><span class="line">                os.makedirs(PWD)</span><br><span class="line">                <span class="comment"># 递归调用</span></span><br><span class="line">        change(offset, count, photoNum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># downpic方法源码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">downpic</span><span class="params">(filename, url)</span>:</span></span><br><span class="line">    print(<span class="string">"正在下载 "</span> + url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url, stream=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> fd:</span><br><span class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content():</span><br><span class="line">                fd.write(chunk)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"下载失败了"</span>, e)</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong></p><p><img src="https://www.tuchuang001.com/images/2018/04/27/f4d67b5e4c160a8a.gif" alt="运行结果"></p><p><img src="https://www.tuchuang001.com/images/2018/04/27/0fe87437efbd1980.png" alt="结果"></p><p>这只是一部分，我之前下了四五百张还在下~当然这是后话，感觉现在写的东西都很简单，希望下一次能写出难一点的东西出来。</p><p>这里正则部分参考了这里：</p><blockquote><p><a href="http://blog.csdn.net/willib/article/details/51873259" target="_blank" rel="noopener"><strong>通过Python爬虫爬取知乎某个问题下的图片</strong></a></p></blockquote><p>最后是<a href="https://github.com/GiitSmile/downloadpic.py" target="_blank" rel="noopener"><strong>源码</strong></a></p><p>源码中注释部分只能下载前十个答案里包含的图片的方法，还有一些想法未完成，本来是想打印一下正在下载哪个答主的回答，然后把图片分别保存到相应的单独文件夹，实现起来有点麻烦就没去搞，仅供参考。</p><p>亲测如果需要下载另一个问题的答案，只需要在:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">       &apos;method&apos;: &apos;next&apos;,</span><br><span class="line">       &apos;params&apos;: &apos;&#123;&quot;url_token&quot;:&apos; + str(37709992) + &apos;,&quot;pagesize&quot;: &quot;10&quot;,&apos; + \</span><br><span class="line">                 &apos;&quot;offset&quot;:&apos; + str(offset) + &quot;&#125;&quot;,</span><br><span class="line">       &apos;_xsrf&apos;: getxsrf(),</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>更换那串数字就行，就好比这样的形式：</p><blockquote><p><a href="https://www.zhihu.com/question/48720845" target="_blank" rel="noopener">https://www.zhihu.com/question/48720845</a></p></blockquote><p>但是这种形式的把数字换上去不起效：</p><blockquote><p><a href="https://www.zhihu.com/question/49078894#answer-41776282" target="_blank" rel="noopener">https://www.zhihu.com/question/49078894#answer-41776282</a></p></blockquote><p>这个好像是知乎热门问答的链接形式，暂时没有深究</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起&quot;&gt;&lt;a href=&quot;#起&quot; class=&quot;headerlink&quot; title=&quot;起&quot;&gt;&lt;/a&gt;起&lt;/h3&gt;&lt;p&gt;上次说了要爬知乎的图片，于是花了一下午的时间去完成这件事，发现暂时接触到的爬虫总是逃脱不了一个规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模拟登陆&lt;/li&gt;
&lt;li&gt;获取真实网页HTML源代码&lt;/li&gt;
&lt;li&gt;解析获取到的网页源代码&lt;/li&gt;
&lt;li&gt;获取想要的资源(下载到某个文件夹或者输出到表格中整合起来)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也许和我说的有一些出入，应该是刚学这个东西的原因，接下来还想研究一下多线程爬虫、添加代理、爬取海量数据并整合成图表形式，先把能做的做了。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://www.limuyang.cc/categories/Python/"/>
    
    
      <category term="知乎" scheme="https://www.limuyang.cc/tags/%E7%9F%A5%E4%B9%8E/"/>
    
      <category term="爬虫" scheme="https://www.limuyang.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="数据采集" scheme="https://www.limuyang.cc/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>人生苦短，我用Python--一起来爬知乎娘</title>
    <link href="https://www.limuyang.cc/2016/08/09/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python-%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%88%AC%E7%9F%A5%E4%B9%8E%E5%A8%98/"/>
    <id>https://www.limuyang.cc/2016/08/09/人生苦短，我用Python-一起来爬知乎娘/</id>
    <published>2016-08-09T19:14:46.000Z</published>
    <updated>2019-08-16T09:03:51.839Z</updated>
    
    <content type="html"><![CDATA[<p>上次爬了教务处的成绩，接下来想去爬一爬知乎娘，好像大家都很喜欢爬知乎娘，GitHub上貌似已经有人把获取各种知乎数据的操作封装好了：<a href="https://github.com/egrcc/zhihu-python" target="_blank" rel="noopener"><strong>zhihu-python</strong></a> ，但是良辰表示还是想自己试一试，我就爬点简单的，难度大的我也不会，我瞄准的是我自己关注的人的数据，差不多就这些东西：</p><blockquote><p>关注者 /  提问 /  回答 /  赞同</p></blockquote><p>那么下面开始分析，要拿到这个数据肯定是要先登陆的，那么先找到登陆界面：<br><a id="more"></a></p><p><img src="https://www.tuchuang001.com/images/2018/04/27/zhihu.png" alt="登陆界面"></p><p>这算是比较正常的界面，不知道为什么有的时候会出现新的验证码形式：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/f901919ea50f9a61.png" alt="输入倒立的文字"></p><p>这种形式登陆的话我看传递的表单数据是你鼠标点击的坐标，这种情况暂时不知道怎么办，留给高手，我们分析上面那种，知乎登陆分为手机号登陆或者邮箱登陆，先试试邮箱登陆，查看Post数据：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/9177639cd14f1f5e.png" alt="邮箱登陆"></p><p>然后是手机号登陆的:</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/8d5d00b9d5f07eda.png" alt="手机号登陆"></p><p>现在理一下思路，我们要登录知乎要传递的数据如下：</p><ul><li>_xsrf() 用于防伪登陆</li><li>password</li><li>captcha 验证码</li><li>phone_num/email  不同登陆方式传递的东西不同</li></ul><p>phone_num/email以及passsword都需要自己输入，这个好办，我们需要解决如何获取 _xsrf和captcha 的问题，先解决 _xsrf，这个更简单一点，我们在知乎<a href="http://www.zhihu.com/#signin" target="_blank" rel="noopener"><strong>登陆页面</strong></a> 右键查看网页源代码，直接搜_xsrf：</p><figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view view-signin"</span> <span class="attr">data-za-module</span>=<span class="string">"SignInForm"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_xsrf"</span> <span class="attr">value</span>=<span class="string">"cf1ee28f15cea5dba3243a1c31a1b284"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group-inputs"</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>我们要做的就是解析出这个元素，直接上代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">logn_url = <span class="string">'http://www.zhihu.com/#signin'</span></span><br><span class="line">session = requests.session()</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line">content = session.get(logn_url, headers=headers).content</span><br><span class="line">soup = BeautifulSoup(content, <span class="string">'html.parser'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getxsrf</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> soup.find(<span class="string">'input'</span>, attrs=&#123;<span class="string">'name'</span>: <span class="string">"_xsrf"</span>&#125;)[<span class="string">'value'</span>]</span><br></pre></td></tr></table></figure><p>下面获取验证码， 我发现无论是使用哪一种登陆方式，Chrome的开发者面板都会有这么一行：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/7aed5998a5101cfe.png" alt="验证码请求"></p><p>当我把这个Request URL输入浏览器中就会转到这个验证码图片的界面，说明这个验证码是我们加载这个页面时候，浏览器向服务器发出请求然后下载下来的，那么现在我们有了URL地址：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/GET.png" alt="获取验证码"></p><p>这还是一个GET请求，这里注意这个传递的r参数是会不断变化的，这是一个当前Unix的时间戳，知道了这些可以着手获取验证码然后让用户自己输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 获取验证码</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha</span><span class="params">()</span>:</span></span><br><span class="line">    t = str(int(time.time() * <span class="number">1000</span>))</span><br><span class="line">    captcha_url = <span class="string">'http://www.zhihu.com/captcha.gif?r='</span> + t + <span class="string">"&amp;type=login"</span></span><br><span class="line">    r = session.get(captcha_url, headers=headers)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'captcha.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.content)</span><br><span class="line">        f.close()</span><br><span class="line">    <span class="comment"># 用pillow 的 Image 显示验证码</span></span><br><span class="line">    <span class="comment"># 如果没有安装 pillow 到源代码所在的目录去找到验证码然后手动输入</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        im = Image.open(<span class="string">'captcha.jpg'</span>)</span><br><span class="line">        im.show()</span><br><span class="line">        im.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        print(<span class="string">u'请到 %s 目录找到captcha.jpg 手动输入'</span> % os.path.abspath(<span class="string">'captcha.jpg'</span>))</span><br><span class="line">    captcha = input(<span class="string">"please input the captcha\n&gt;"</span>)</span><br><span class="line">    <span class="keyword">return</span> captcha</span><br></pre></td></tr></table></figure><p>这里获取验证码的代码来自GitHub上的<a href="https://github.com/xchaoinfo/fuck-login" target="_blank" rel="noopener"><strong>fuck-login</strong></a>项目，在此表示感谢，接下里就是写一个方法判断用户是使用了哪一种登陆方式，然后传递相应的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">def login(secret, account):</span><br><span class="line">    # 通过输入的用户名判断是否是手机号</span><br><span class="line">    if re.match(r&quot;^1\d&#123;10&#125;$&quot;, account):</span><br><span class="line">        print(&quot;手机号登录 \n&quot;)</span><br><span class="line">        post_url = &apos;http://www.zhihu.com/login/phone_num&apos;</span><br><span class="line">        postdata = &#123;</span><br><span class="line">            &apos;_xsrf&apos;: getxsrf(),</span><br><span class="line">            &apos;password&apos;: secret,</span><br><span class="line">            &apos;remember_me&apos;: &apos;true&apos;,</span><br><span class="line">            &apos;phone_num&apos;: account,</span><br><span class="line">        &#125;</span><br><span class="line">    else:</span><br><span class="line">        print(&quot;邮箱登录 \n&quot;)</span><br><span class="line">        post_url = &apos;http://www.zhihu.com/login/email&apos;</span><br><span class="line">        postdata = &#123;</span><br><span class="line">            &apos;_xsrf&apos;: getxsrf(),</span><br><span class="line">            &apos;password&apos;: secret,</span><br><span class="line">            &apos;remember_me&apos;: &apos;true&apos;,</span><br><span class="line">            &apos;email&apos;: account,</span><br><span class="line">        &#125;</span><br><span class="line">    try:</span><br><span class="line">        # 不需要验证码直接登录成功</span><br><span class="line">        login_page = session.post(post_url, data=postdata, headers=headers)</span><br><span class="line">        login_code = login_page.text</span><br><span class="line">        print(login_page.status)</span><br><span class="line">        print(login_code)</span><br><span class="line">    except:</span><br><span class="line">        # 需要输入验证码后才能登录成功</span><br><span class="line">        postdata[&quot;captcha&quot;] = get_captcha()</span><br><span class="line">        login_page = session.post(post_url, data=postdata, headers=headers)</span><br><span class="line">        login_code = eval(login_page.text)</span><br><span class="line">        print(login_code[&apos;msg&apos;])</span><br><span class="line"></span><br><span class="line"># 这部分代码同样来自[**fuck-login**](https://github.com/xchaoinfo/fuck-login)项目,我偷了很多懒,囧</span><br></pre></td></tr></table></figure><p>这个时候判断是否登陆成功可以随便查看一个页面发送GET请求看是否返回200，这里就不多说，接下来才是关键，为了获取我关注的人的信息，先打开开发者面板，这个地方打钩：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/dce7be5950c5523b.png" alt="记得打钩"></p><p>因为网页有时候会跳转，这里打钩之后新跳转的页面的信息就不会覆盖之前接受到的信息，然后找到我关注的人，URL地址是：</p><blockquote><p><a href="https://www.zhihu.com/people/GitSmile/followees" target="_blank" rel="noopener">https://www.zhihu.com/people/GitSmile/followees</a></p></blockquote><p>最开始我走了弯路，我以为直接在这个页面解析出我关注的人的信息就行，所以一开始我是这么做的，查看网页源代码，这里随便找一个我关注的人的信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"死者代言人"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-hovercard</span>=<span class="string">"p$t$forensic"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"zm-item-link-avatar"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"/people/forensic"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://pic1.zhimg.com/be39d110759e68f389b7d2934d7353bc_m.jpg"</span> <span class="attr">class</span>=<span class="string">"zm-item-img-avatar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zm-list-content-medium"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"zm-list-content-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-hovercard</span>=<span class="string">"p$t$forensic"</span> <span class="attr">href</span>=<span class="string">"https://www.zhihu.com/people/forensic"</span> <span class="attr">class</span>=<span class="string">"zg-link author-link"</span> <span class="attr">title</span>=<span class="string">"死者代言人"</span></span></span><br><span class="line"><span class="tag">&gt;</span>死者代言人<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon icon-badge-best_answerer icon-badge"</span> <span class="attr">data-tooltip</span>=<span class="string">"s$b$优秀回答者"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ellipsis"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge-summary"</span>&gt;</span>优秀回答者<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bio"</span>&gt;</span>不养喵的爱喵法医。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"details zg-gray"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/forensic/followers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>35968 关注者<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/forensic/asks"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>2 提问<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/forensic/answers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>305 回答<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/forensic"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>51278 赞同<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在对比另一条：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"陈亦飘"</span></span></span><br><span class="line"><span class="tag"><span class="attr">data-hovercard</span>=<span class="string">"p$t$chen-yi-piao"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"zm-item-link-avatar"</span></span></span><br><span class="line"><span class="tag"><span class="attr">href</span>=<span class="string">"/people/chen-yi-piao"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://pic2.zhimg.com/d495751efbf837b1b5b08571add7df3d_m.jpg"</span> <span class="attr">class</span>=<span class="string">"zm-item-img-avatar"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zm-list-content-medium"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"zm-list-content-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-hovercard</span>=<span class="string">"p$t$chen-yi-piao"</span> <span class="attr">href</span>=<span class="string">"https://www.zhihu.com/people/chen-yi-piao"</span> <span class="attr">class</span>=<span class="string">"zg-link author-link"</span> <span class="attr">title</span>=<span class="string">"陈亦飘"</span></span></span><br><span class="line"><span class="tag">&gt;</span>陈亦飘<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ellipsis"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bio"</span>&gt;</span>音乐和电影是我的爱与慈悲<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"details zg-gray"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/followers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>74469 关注者<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/asks"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>0 提问<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/answers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>80 回答<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>315971 赞同<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>要分解出这些元素，只要找出他们的共同点，当时机智如我一眼就发现每一个我关注的人的名字都有这么一行元素：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class=&quot;zm-item-link-avatar&quot;</span><br></pre></td></tr></table></figure><p>而且都包含在一个<code>&lt;a&gt;&lt;/a&gt;</code>标签里面，这就好办了，使用<code>BeautifulSoup</code>先分解出每一个我关注的人的名字：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">def getdetial():</span><br><span class="line">    followees_url = &apos;https://www.zhihu.com/people/GitSmile/followees&apos;</span><br><span class="line">    followees_headers = &#123;</span><br><span class="line">        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36&apos;,</span><br><span class="line">        &apos;Referer&apos;: &apos;https://www.zhihu.com/people/GitSmile/about&apos;,</span><br><span class="line">        &apos;Upgrade-Insecure-Requests&apos;: &apos;1&apos;,</span><br><span class="line">        &apos;Accept-Encoding&apos;: &apos;gzip, deflate, sdch, br&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myfollowees = session.get(followees_url, headers=followees_headers)</span><br><span class="line">    mysoup = BeautifulSoup(myfollowees.content, &apos;html.parser&apos;)</span><br><span class="line">    print(mysoup.find(&apos;span&apos;, attrs=&#123;&apos;class&apos;: &apos;zm-profile-section-name&apos;&#125;).text)</span><br></pre></td></tr></table></figure><p>然后继续观察，突破点依然在这个<code>&lt;a&gt;&lt;/a&gt;</code>标签，拿”陈亦飘”的信息做个例子，看官们看这里面是不是有个<code>href=&quot;/people/chen-yi-piao</code>，然后看一下她的相关信息：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/followers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>74469 关注者<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/asks"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>0 提问<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/answers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>80 回答<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">/</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>315971 赞同<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现没有，每一个信息里面的href元素都是我们最开始看到的<code>/people/chen-yi-piao</code>元素加上一些字符串组成的，那么我就可以在这上面做点文章：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">获取详细信息</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdetial</span><span class="params">()</span>:</span></span><br><span class="line">    followees_url = <span class="string">'https://www.zhihu.com/people/GitSmile/followees'</span></span><br><span class="line">    followees_headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://www.zhihu.com/people/GitSmile/about'</span>,</span><br><span class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</span><br><span class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch, br'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    myfollowees = session.get(followees_url, headers=followees_headers)</span><br><span class="line">    mysoup = BeautifulSoup(myfollowees.content, <span class="string">'html.parser'</span>)</span><br><span class="line">    print(mysoup.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'zm-profile-section-name'</span>&#125;).text)</span><br><span class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> mysoup.findAll(<span class="string">'a'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'zm-item-link-avatar'</span>&#125;):</span><br><span class="line">        print(result.get(<span class="string">'title'</span>))</span><br><span class="line">        <span class="comment"># 解析出href元素信息</span></span><br><span class="line">        href = str(result.get(<span class="string">'href'</span>))</span><br><span class="line">        <span class="comment"># 关注者</span></span><br><span class="line">        print(mysoup.find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'href'</span>: href + <span class="string">'/followers'</span>&#125;).text)</span><br><span class="line">        <span class="comment"># 提问</span></span><br><span class="line">        print(mysoup.find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'href'</span>: href + <span class="string">'/asks'</span>&#125;).text)</span><br><span class="line">        <span class="comment"># 回答</span></span><br><span class="line">        print(mysoup.find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'href'</span>: href + <span class="string">'/answers'</span>&#125;).text)</span><br><span class="line">        <span class="comment"># 赞同</span></span><br><span class="line">        print(mysoup.find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'href'</span>: href, <span class="string">'class'</span>: <span class="string">'zg-link-gray-normal'</span>&#125;).text + <span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure><p>上面的代码应该很简单了，看一看就能看懂，然后就我信心满满地在PyCharm上输出的时候，发现来来回回只输出20条信息，也就是说，我关注了26人，但是控制台只输出了20个人的信息，然后我就上网查，发现不止一个人有我这样的疑问，当然也多亏了前人踩坑，网上给出来的答案是知乎获取关注的人的时候使用了AJAX技术，也就是动态加载，但是这一部分代码不会再网页Html代码中显示出来，所以为了获取其他关注的人的信息我这里要另辟蹊径。</p><p>然后我翻看我关注的人的信息的时候，在开发者面板抓到这么一条POST信息：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/efba534dce691fe8.png" alt="抓取到的Post信息"></p><p>这条POST之后下面刷出来的图片是我关注的人的头像并且这些头像在我之前看到的20条数据里面是没有的，加上我总共就关注了27个人，所以我有理由相信这个Post就是浏览器向服务器发送请求的Post，看一下Post的信息：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/ajax.png" alt="查看Post信息"></p><p>一个偏移量(offset)，一个哈希值(hash_id)外加一个”order_by”:”created”的键值对，这里偏移量很好理解，这个”hash_id”据我多次登陆发现是一个不变的值，或者说每一台电脑或许精确一点每一个浏览器都会有这么一个给定的值，照抄，那么改进后的代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># 获取所有关注的人的信息</span><br><span class="line">def getallview():</span><br><span class="line">    nums = 27  # 这个是我关注的人数</span><br><span class="line">    followees_headers = &#123;</span><br><span class="line">        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36&apos;,</span><br><span class="line">        &apos;Referer&apos;: &apos;https://www.zhihu.com/people/GitSmile/followees&apos;,</span><br><span class="line">        &apos;Origin&apos;: &apos;https://www.zhihu.com&apos;,</span><br><span class="line">        &apos;Accept-Encoding&apos;: &apos;gzip, deflate, br&apos;,</span><br><span class="line">        &apos;CG - Sid&apos;: &apos;57226ad5 - 793b - 4a9d - 9791 - 2a9a17e682ef&apos;,</span><br><span class="line">        &apos;Accept&apos;: &apos;* / *&apos;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    # 序号</span><br><span class="line">    count = 0</span><br><span class="line">    for index in range(0, nums):</span><br><span class="line">        fo_url = &apos;https://www.zhihu.com/node/ProfileFolloweesListV2&apos;</span><br><span class="line">        m_data = &#123;</span><br><span class="line">            &apos;method&apos;: &apos;next&apos;,</span><br><span class="line">            &apos;params&apos;: &apos;&#123;&quot;offset&quot;:&apos; + str(</span><br><span class="line">                index) + &apos;,&quot;order_by&quot;:&quot;created&quot;,&quot;hash_id&quot;:&quot;de2cb64bc1afe59cf8a6e456ee5eaebc&quot;&#125;&apos;,</span><br><span class="line">            &apos;_xsrf&apos;: str(getxsrf())</span><br><span class="line">        &#125;</span><br><span class="line">        result = session.post(fo_url, data=m_data, headers=followees_headers)</span><br><span class="line">        dic = json.loads(result.content.decode(&apos;utf-8&apos;))</span><br><span class="line">        li = dic[&apos;msg&apos;][0]</span><br><span class="line">        mysoup = BeautifulSoup(li, &apos;html.parser&apos;)</span><br><span class="line">        for result in mysoup.findAll(&apos;a&apos;, attrs=&#123;&apos;class&apos;: &apos;zm-item-link-avatar&apos;&#125;):</span><br><span class="line">            print(index + 1)</span><br><span class="line">            print(result.get(&apos;title&apos;))</span><br><span class="line">            href = str(result.get(&apos;href&apos;))</span><br><span class="line">            print(mysoup.find(&apos;a&apos;, attrs=&#123;&apos;href&apos;: href + &apos;/followers&apos;&#125;).text)</span><br><span class="line">            print(mysoup.find(&apos;a&apos;, attrs=&#123;&apos;href&apos;: href + &apos;/asks&apos;&#125;).text)</span><br><span class="line">            print(mysoup.find(&apos;a&apos;, attrs=&#123;&apos;href&apos;: href + &apos;/answers&apos;&#125;).text)</span><br><span class="line">            print(mysoup.find(&apos;a&apos;, attrs=&#123;&apos;href&apos;: href, &apos;class&apos;: &apos;zg-link-gray-normal&apos;&#125;).text + &apos;\n&apos;)</span><br><span class="line">            count += 1</span><br><span class="line">    print(&apos;一共关注了 %d人&apos; % count)</span><br></pre></td></tr></table></figure><p>放上程序的入口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line"></span><br><span class="line">    if isLogin():</span><br><span class="line">        print(&apos;您已经登录&apos;)</span><br><span class="line">    else:</span><br><span class="line">        account = input(&apos;请输入你的用户名\n&gt;  &apos;)</span><br><span class="line">        secret = input(&quot;请输入你的密码\n&gt;  &quot;)</span><br><span class="line">        login(secret, account)</span><br><span class="line">    getallview()</span><br></pre></td></tr></table></figure><p>看一下实际效果：</p><p><img src="https://www.tuchuang001.com/images/2018/04/27/9f021a71a9c4d305.gif" alt="结果"></p><p><strong>写在结尾</strong></p><p>虽然简单，但是提供了一些初学者的思路，下一次准备爬一些知乎上的图片，好像很多人都热衷于这种事，嘻嘻，荆轲刺秦王。</p><p><a href="https://github.com/GiitSmile/loginzhihu.py/blob/master/loginzhihu.py" target="_blank" rel="noopener">源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次爬了教务处的成绩，接下来想去爬一爬知乎娘，好像大家都很喜欢爬知乎娘，GitHub上貌似已经有人把获取各种知乎数据的操作封装好了：&lt;a href=&quot;https://github.com/egrcc/zhihu-python&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;zhihu-python&lt;/strong&gt;&lt;/a&gt; ，但是良辰表示还是想自己试一试，我就爬点简单的，难度大的我也不会，我瞄准的是我自己关注的人的数据，差不多就这些东西：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关注者 /  提问 /  回答 /  赞同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么下面开始分析，要拿到这个数据肯定是要先登陆的，那么先找到登陆界面：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https://www.limuyang.cc/categories/Python/"/>
    
    
      <category term="知乎" scheme="https://www.limuyang.cc/tags/%E7%9F%A5%E4%B9%8E/"/>
    
      <category term="爬虫" scheme="https://www.limuyang.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="网络" scheme="https://www.limuyang.cc/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
</feed>
