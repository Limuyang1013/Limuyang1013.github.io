<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李牧羊</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https:///www.limuyang.cc/"/>
  <updated>2018-03-31T14:37:26.709Z</updated>
  <id>https:///www.limuyang.cc/</id>
  
  <author>
    <name>李牧羊</name>
    <email>lin794653318@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue-router中使用EventBus传值需要注意到的问题</title>
    <link href="https:///www.limuyang.cc/2018/03/31/vue-router%E4%B8%AD%E4%BD%BF%E7%94%A8EventBus%E4%BC%A0%E5%80%BC%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https:///www.limuyang.cc/2018/03/31/vue-router中使用EventBus传值需要注意到的问题/</id>
    <published>2018-03-31T14:26:58.000Z</published>
    <updated>2018-03-31T14:37:26.709Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://olivyw4lw.bkt.clouddn.com/139-full.png" alt="image"> 最近负责开发一个视频相关的项目，要用到vue-router，同时涉及到一些共有状态管理，但是少量的状态又不想用vuex，于是用到了EventBus，一般来说， 我们用EventBus的步骤如下：<br><a id="more"></a></p>
<ul>
<li><strong>首先新建一个js用来创建我们的EventBus，如Bus.js</strong> </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;  </div><div class="line">...</div><div class="line">export <span class="keyword">default</span> <span class="keyword">new</span> Vue();</div></pre></td></tr></table></figure>
<ul>
<li><strong>接着，我们在需要的地方通过$emit触发自定义事件，比如我这个时候有一个视频当前播放时间的状态需要传递</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'../components/Bus.js'</span></div><div class="line">...</div><div class="line">Bus.$emit(<span class="string">'currentTime'</span>, <span class="string">'time'</span>)</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>再然后就是我们在另一个路由页面(就分别叫页面A和B吧)通过$on监听自定义事件</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'../components/Bus.js'</span></div><div class="line">...</div><div class="line">Bus.$on(<span class="string">'currentTime'</span>, (time) =&gt; <span class="built_in">console</span>.log(time))</div></pre></td></tr></table></figure>
<p>通常情况下这个是应该可以打印出我们想要的数据，但是经我实验发现，当第一次通过路由跳转页面的时候控制台是没有任何输出的，只有第二次跳转开始控制台才有输出，然后我就去查了下资料，发现有这么一种说法:</p>
<blockquote>
<p>vue-router切换的时候，会先加载新的组件，当新的组件渲染好但是还没mount的时候，销毁旧组件，然后再挂载新组件，也就是说当B页面的生命周期进行到beforeMount的时候，下一步走到的就是A页面的beforeDestory方法和接下去的destroyed方法</p>
</blockquote>
</li>
</ul>
<p>要知道我们一般都是在B页面的created方法里面去使用$on监听自定义事件，但是通过上面那段话我们知道，当我们在create方法里面监听事件的时候$emit事件已经发出去了，此时监听器还没有注册，那么要让$on监听到A页面的$emit发出的事件，可以在A页面的beforeDestory或destroyed去执行$emit，附上vue-router切换时候相关的生命周期顺序图： <img src="https://upload-images.jianshu.io/upload_images/5763769-1c04ab921c3d4876.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt=""></p>
<p><strong><a href="https://www.jianshu.com/p/fde85549e3b0" target="_blank" rel="external">图片出自</a></strong></p>
<p>但是我这个项目和这个人有不一样的地方，因为我需要留存上一个路由页面的状态，所以我在<code>router-view</code>的外面用了<code>keep-alive</code>属性，所以也就不存在A页面会走到beforeDestory和destoryed的说法，那么这时候该怎么做，我一开始是做了实验，既然我直接$emit那边接收不到，那我就延迟去$emit，一开始我用了个2s的延迟:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'../components/Bus.js'</span></div><div class="line">...</div><div class="line">setTimeout(() =&gt; &#123;</div><div class="line">   Bus.$emit(<span class="string">'currentTime'</span>, <span class="string">'time'</span>)</div><div class="line">&#125;, <span class="number">2000</span>)</div></pre></td></tr></table></figure>
<p>目的就是让B页面$on执行开始监听事件的时候我再去$emit，发现是可以的，我又把时间减少到1s，依然正常运行，但是如果我们要去精确计算两个页面的切换时间岂不是太蠢，后来我就想到了vue自带的一个方法，敲黑板<strong>vm.$nextTick( [callback] )</strong>，这个方法的作用就是在dom更新之后异步执行回调方法，我在这个时候去$emit果然能够成功获取到数据，大功告成。</p>
<p>顺便说一句，如果路由外面没有使用keep-alive的话，你会发现随着切换次数增多$on监听事件执行的次数也越来越多，和你切换页面的次数成正比，尤大在issue里面说这是因为$on事件是不会自动清除的，也就是说你切换的次数越多$on监听也会越来越多，解决的方法是需要在B页面的beforeDestroy里面手动使用$off去关闭监听:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Bus <span class="keyword">from</span> <span class="string">'../components/Bus.js'</span></div><div class="line">beforeDestory() &#123;</div><div class="line">  Bus.$off(<span class="string">'currentTime'</span>, (time) =&gt; <span class="built_in">console</span>.log(time))</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上</p>
<p>参考链接 <a href="https://segmentfault.com/q/1010000007879907" target="_blank" rel="external">vue2 eventbus 求解惑</a> <a href="https://www.jianshu.com/p/fde85549e3b0" target="_blank" rel="external">vue中eventbus被多次触发（vue中使用eventbus踩过的坑）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://olivyw4lw.bkt.clouddn.com/139-full.png&quot; alt=&quot;image&quot;&gt; 最近负责开发一个视频相关的项目，要用到vue-router，同时涉及到一些共有状态管理，但是少量的状态又不想用vuex，于是用到了EventBus，一般来说， 我们用EventBus的步骤如下：&lt;br&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https:///www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="vue-router" scheme="https:///www.limuyang.cc/tags/vue-router/"/>
    
      <category term="eventbus" scheme="https:///www.limuyang.cc/tags/eventbus/"/>
    
  </entry>
  
  <entry>
    <title>不吹不黑聊聊前端框架--尤雨溪Live整理</title>
    <link href="https:///www.limuyang.cc/2017/11/10/%E4%B8%8D%E5%90%B9%E4%B8%8D%E9%BB%91%E8%81%8A%E8%81%8A%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6-%E5%B0%A4%E9%9B%A8%E6%BA%AALive%E6%95%B4%E7%90%86/"/>
    <id>https:///www.limuyang.cc/2017/11/10/不吹不黑聊聊前端框架-尤雨溪Live整理/</id>
    <published>2017-11-10T14:58:38.000Z</published>
    <updated>2017-11-10T15:17:12.185Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/11991572/32664683-ffb60d34-c66c-11e7-83ae-8a4ca3ae2da8.png" alt="image"></p>
<p>最近买了尤雨溪大大的Live：不吹不黑聊聊前端框架，这场Live让我的前端思维到了前所未有的高度：当我们身为前端开发萌新，在前端人才金字塔的浮动与挣扎中思考该学什么框架、该如何入门前端、又遇到学习瓶颈怎么办的时候，正是这些业界大牛们用自己的行动引导着我们，有如尤大所说：多思考场景需求，多看看技术到底做了怎样的取舍，现在把相关的东西作为笔记整理下来，希望对前端开发有兴趣的同学都可以去支持一下尤大</p>
<a id="more"></a>
<h4 id="组件可以是函数"><a href="#组件可以是函数" class="headerlink" title="组件可以是函数"></a>组件可以是函数</h4><p>想象一下整个应用是一个大的函数，函数里面可以调用别的函数，每一个组件是一个函数，一个组件可以调用其他的函数，整个一个树状结构</p>
<h4 id="组件是有分类的"><a href="#组件是有分类的" class="headerlink" title="组件是有分类的"></a>组件是有分类的</h4><ul>
<li>纯展示型的组件，数据进，DOM出，直观明了</li>
<li>接入型组件，在React场景下的container component，这种组件会跟数据层的service打交道，会包含一些跟服务器或者说数据源打交道的逻辑，container会把数据向下传递给展示型组件</li>
<li>交互型组件，典型的例子是对于表单组件的封装和加强，大部分的组件库都是以交互型组件为主，比如说Element UI，特点是有比较复杂的交互逻辑，但是是比较通用的逻辑，强调组件的复用</li>
<li>功能型组件，以Vue的应用场景举例，路由的router-view组件、transition组件，本身并不渲染任何内容，是一个逻辑型的东西，作为一种扩展或者是抽象机制存在</li>
</ul>
<h4 id="JSX和模版的对比"><a href="#JSX和模版的对比" class="headerlink" title="JSX和模版的对比"></a>JSX和模版的对比</h4><p>JSX本质就是Javascript，它完全获得了Javascript的灵活度，它最大的价值在于书写功能型组件的时候比纯模版更好，但是模版在展示型和其他的用例上也是不差的，模版会让你更少的把逻辑放在视图里面，展示型的组件虽然在逻辑上比较简单但是在样式上还是具有一定的复杂度</p>
<h4 id="代码的拆分-colocation"><a href="#代码的拆分-colocation" class="headerlink" title="代码的拆分(colocation)"></a>代码的拆分(colocation)</h4><p>把应该放一起的东西放一起，比如说在vue的单文件组件里面我们把模版、样式和javascript的逻辑都是放在一起的，目前主流框架都是这么做的，如果这概念扩展开来，组件的文档也是可以和组件的其他东西放一起的，组件化之后和传统的Separation of concern就有区别了，传统的Separation of concern是以语言为单位作切分，组件是以组件本身作为一个切分的抽象</p>
<h4 id="变化侦测和渲染机制"><a href="#变化侦测和渲染机制" class="headerlink" title="变化侦测和渲染机制"></a>变化侦测和渲染机制</h4><ul>
<li>渲染机制</li>
</ul>
<p>现代的前端框架里面渲染这块最重要的是声明式(Declarative)，相比较之下的概念是命令式(Imperative)，Imperative最直接的例子是我们使用Jquery时候拿到一个选择器”直接干”，使用命令去进行操作，直截了当，但是很快就会遇到维护性的问题，英文里面有个词叫做jQuery Spaghetti，Spaghetti的意思是意大利面，这个词的意思就是说你的代码写到后面会像一坨意大利面一样，维护起来很困难，声明式的好处就是说我们直接描述说数据和DOM结构之间的映射关系应该是怎么样的，不需要我们手动去做这些操作</p>
<p>React里面有一个等式 <code>view = render(state)</code> ，这里render就是我们在React里面写的render函数，vue的模版其实也是编译成渲染函数的，所以模版和JSX之间的本质是相似的，输入state，输出DOM，理想情况下我们就是描述了这样一种关系，那输入变了输出也会跟着变，我们不需要顾虑输入和输出之间发生了什么事情，具体到底层实现可以是Virtual DOM，但并不一定得是Virtual DOM，可以是细粒度的绑定</p>
<ul>
<li>变化侦测</li>
</ul>
<p>用过vue的朋友知道vue的数据是响应式的，vue会把你传递的数据进行转化，转化过后当你改变一些属性的值的时候，vue就会进行相应的更新，附上尤大相关的演讲PPT，里面有详细的过程：<br><a href="https://docs.google.com/presentation/d/1_BlJxudppfKmAtfbNIcqNwzrC5vLrR_h1e09apcpdNY/edit#slide=id.g19eebb1966_0_191" target="_blank" rel="external">ppt</a></p>
<blockquote>
<p>Live提问：<br>问：一直有一个疑问，以前<div onclick="clickHandler"></div> 被人诟病，为啥 vue  的声明式写法就是推崇的？<br>答：HTML里面这个onclick里面的Javascript的作用域是全局的，当你在vue里面这么写的时候是有很明确的Javascript作用域的，你的绑定以及你的method所能触及的影响范围是设定好的，这个跟全局的Javascript有本质的区别，另外当我们在vue或者Reac里面这么写的时候你的Javascript逻辑和你的模版或者说你的JSX是在一起的，可以联想我们之前提到的colocation的概念，所以并不会造成一个维护上的困难，但是如果你在全局的Html里面这样直接裸写，你完全不知道你这段Javascript可能会引用到哪里的变量或者是调用的哪里的方法</p>
</blockquote>
<p>简单的总结，变化侦测主要分为两种：</p>
<ul>
<li><p>pull<br>所谓pull，系统不知道数据什么时候变了，它需要一个信号去告诉它说数据有可能变了，在这个系统才会去进行一次比较暴力的比对，在React里面的表现是Virtual Dom Diff，在Angular里面就是整个脏检查的流程，能够这么做的前提是现在Javascript足够快，虽然有浪费但是性能上也可以接受</p>
</li>
<li><p>push<br>相比之下，vue的响应式数据或者RXJS的数据机制，在数据变动之后立刻就可以知道数据变动了，而且一定程序上我们会知道哪些数据变了，这样就可以进行相对更细粒度的更新，pull的这种更新是最粗粒度的，所以在大型应用里面我们要帮助系统来减少一些无用功，但是push的形式也有它的缺陷，粒度越细，你的每一个绑定都会需要一个observabel/watcher，这样会带来相应的内存以及依赖追踪的开销，所以在vue2里面选择的是一个比较中等粒度的方案，在组件级别是push，每一个组件是一个响应式的watcher，当数据变动时候我们可以对组件进行更新，在每个组件内部则是用Virtual Dom进行比对，push和pull之间的本质区别是在于用侦测成本换取一定程度的自动优化</p>
</li>
</ul>
<h4 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h4><p>状态管理这个概念其实也是在FB提出了Flux之后才搬到台面上来讲，Flux在经历了初期的混乱竞争之后慢慢的合流到了Redux上，vux在一定程度受到了Redux的影响，状态管理的本质是从源事件(source event)映射到状态的迁移和改变，然后在映射到UI的变化，声明式的渲染已经帮我们解决了从状态到UI的映射，这一块，所以状态管理这些库他们做的实际上是如何管理将事件源映射到状态变化的过程，如何将这个映射的过程从视图组件中剥离出来，如何组织这一部分代码来提高可维护性，是状态管理要解决的本质问题</p>
<p><a href="https://jsfiddle.net/yyx990803/0a22ojps/" target="_blank" rel="external">把 Vue 当 Redux 用</a><br><a href="https://jsfiddle.net/yyx990803/f5a24dk3/" target="_blank" rel="external">把 Vue 当 MobX 用</a></p>
<p>现在的状态管理方案还面临一些其他的共同的尴尬，一个是组件的局部状态和全局状态如何区分，现在是局部状态和全局状态并没有很明显的区分，另一个是全局状态和服务端数据之间，现有的方案是把服务端抓过来的数据塞到store里面去</p>
<h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><p>路由是只有在大型的单页应用才会遇到的一个问题，传统的路由思想是比较有侵入式的，每个路由有自己的数据模型，有自己的模板等，但是当Reac和vue出现之后人们发现把路由和组件解耦是可行的并且还更加灵活，比如Reac直接用不带路由是完全没问题的，另一个启示是，如果从组件出发去思考路由，本质上就变成了把一个url映射到组件树结构的一个过程，url到组件的映射会有一些小的分歧，我们到底是应该从url出发，还是从这个状态出发，其实本质是一样的，因为url就是一个序列化的状态。</p>
<p>当实际在SPA中去做一个你会发现路由会涉及到许多其他问题，比如说hash模式和history模式如何兼容，重定向，别名，懒加载，然后最复杂的是跳转，路由之间的跳转需要提供各种”钩子”，然后这些”钩子”里面又可能做异步操作，”钩子”里面也有可能取消这次跳转，使得这次跳转无效等等。</p>
<p>整体来说现在主要的路由方案都有点相似，比较有意思的是最新的reat-router4，他推崇的是一种用组件本身来做路由的一种思路，这里很大程度上利用了上述第四大组件”功能型组件”，在父组件里面声明式的渲染其他组件，跟传统的路由组件方案的区别是”去中心化”，他不是把整个路由表写在一个地方，是分散的写在各个组件里头，这样做的好处是灵活性非常好，但是也有一些问题，首先，集中式的路由表对于理解整个应用的结构是有帮助的，另一方面，去中心化的路由对于跳转的管理会弱一些，他对于跳转的管理是直接用组件的生命周期去做的。</p>
<p><strong>web路由和app路由的区别：</strong><br>目前web路由整体思路上是一样的，将url映射到组件树，从一个url跳转到另一个url，我们把新的url push到历史的stack里面去了，但是stack前一个位置所对应的位置是被我们丢弃掉的，我们从一个状态迁移到另一个状态我们整个应用界面迁移到另一个状态了，原生应用上的跳转就像一叠卡片一样，新的界面会盖在现有的界面上，当你退回去的时候只是把当前的卡片拿掉，之前的卡片就会出现，web用的路由方案做app会比较别扭。</p>
<h4 id="CSS方案"><a href="#CSS方案" class="headerlink" title="CSS方案"></a>CSS方案</h4><p>主流的 CSS 方案</p>
<ul>
<li>跟 JS 完全解耦，靠预处理器和比如 BEM 这样的规范来保持可维护性，偏传统</li>
<li>CSS Modules，依然是 CSS，但是通过编译来避免 CSS 类名的全局冲突</li>
<li>各类 CSS-in-JS 方案，React 社区为代表，比较激进</li>
<li>Vue 的单文件组件 CSS，或是 Angular 的组件 CSS（写在装饰器里面），一种比较折中的方案</li>
</ul>
<p>比较 CSS 方案时首先要明确场景的问题，如果应用逻辑已经组件化了，是一个比较复杂应用的开发，传统的 CSS 方式可维护性就有问题了<br><a href="https://speakerdeck.com/vjeux/react-css-in-js" target="_blank" rel="external">react-css-in-js</a><br><a href="https://medium.com/seek-blog/a-unified-styling-language-d0c208de2660" target="_blank" rel="external">反对css-in-js的文章</a></p>
<p>传统 css 的一些问题：</p>
<ol>
<li>作用域</li>
<li>Critical CSS</li>
<li>Atomic CSS</li>
<li>分发复用</li>
<li>跨平台复用</li>
</ol>
<p>css-in-js有很多不同的方案，这些方案各自解决了上述的一些问题，但是并不完美：</p>
<ol>
<li>CSS Modules，Inline-Styles，vue的单文件组件里面直接加一个scoped都可以解决这个问题</li>
<li>所谓的Critical ，比如说我们直出一个页面，可能我们整个应用有几十个页面，但是我们直出的永远是第一个页面，如果没一个页面都有一个对应的CSS的话，理论上渲染首屏我们只需要首屏的CSS就够了，这就是所谓的Critical  CSS，在服务端渲染尤为重要，解决的办法是在服务端渲染的时候侦测到渲染要用到哪些CSS，css-in-js和vue2.3+有一个运行时的功能，在编译过程里面可以把CSS的插入跟组件的生命周期挂钩，同样可以起到收集Critical CSS的效果</li>
</ol>
<blockquote>
<p>Live提问：<br>问：在vue里 使用CSS Modules 会不会比 使用 scoped 好？<br>答：我个人觉得没有什么本质的区别，scoped的成本会更低一点，CSS Modules会有一定的运行时的代价，因为需要用动态的class绑定</p>
</blockquote>
<ol>
<li>Atomic CSS的概念：比如说我们有两条CSS规则，一条是color：red，一条是color：green，我们写两个button的样式，一个按钮是红的，一个按钮是绿的，原子类的话就会把color：red单独拆成一个类：A，把color：green单独拆成一个类：B，然后所有button共享的再拆成一个类：C，然后红色的button可以说是AC，绿色的button是BC，总而言之就是把尽可能多的共享的一些单独的规则都拆成一个很小很小的类，这样出来的最后的结果是你的CSS可压缩性更好了，可以变得更小，对应于css-in-js里面的Style Chunk</li>
<li>分发复用的论点是说css-in-js都是Javascript，所以可以跟普通的Javascript模块一样直接发包到npm上去复用，确实Javascript比纯CSS更容易去组合复用，但是css你也可以发到npm上然后webpack直接引用，这一点上并不算完全的优势</li>
<li>跨平台复用：VueX里面就是把静态的css在parse之后编译成Javascript，就可以跨平台复用了</li>
</ol>
<h4 id="构建工具"><a href="#构建工具" class="headerlink" title="构建工具"></a>构建工具</h4><p>构建工具解决的其实是几方面的问题：</p>
<ul>
<li>任务的自动化</li>
<li>开发体验和效率（新的语言功能，语法糖，hot reload 等等）</li>
<li>部署相关的需求</li>
<li>编译时优化</li>
</ul>
<p><a href="https://www.zhihu.com/question/20790576" target="_blank" rel="external">大公司里怎样开发和部署前端代码</a></p>
<p><img src="https://user-images.githubusercontent.com/11991572/32641449-f3738fba-c608-11e7-83f4-3bc598791876.png" alt="image"><br>虽然 Vue 本身用 flow，但建议使用 TypeScript 的 flow，主要从开发体验、生态完善度上考虑</p>
<h4 id="服务端数据通信"><a href="#服务端数据通信" class="headerlink" title="服务端数据通信"></a>服务端数据通信</h4><p>长久以来我们传统的做法都是围绕Rest，服务端如果暴露的是一个比较标准的Rest API，那我们客户端就可以直接拿一个fetch直接去抓，或者围绕Rest来做一个资源的抽象/封装，特定的应用会遇到比较复杂的场景，一种是，数据直连，数据之间有大量的关联性，另一类是有实时推送同步的需求，这种情况下传统的Rest做法会比较痛苦。<br><a href="https://ssr.vuejs.org/zh/" target="_blank" rel="external">Vue.js 服务器端渲染指南</a></p>
<h4 id="跨平台渲染"><a href="#跨平台渲染" class="headerlink" title="跨平台渲染"></a>跨平台渲染</h4><p>从前端框架的角度去看，跨平台渲染的本质是在设计框架的时候要让框架的渲染机制和DOM解耦，这里面有很多种实现方式，并不一定需要Virtual Dom，本质上只要把框架更新时候的一些节点操作封装起来，你就可以做到跨平台，一个原生的渲染引擎，比如 React Native 和 VueX本质都是在底层针对每个平台有一个适配的渲染引擎，只要把渲染引擎暴露的结点操作的 API，跟框架运行时对接一下，就可以实现将框架里面的代码渲染到原生的目的。这里的解耦很清晰，这也是为什么能看到 NG 可以接 React Native，VueX 可以跑 Vue 文件，VueX 可以跑在 NativeScript 上等等。</p>
<h4 id="新规范"><a href="#新规范" class="headerlink" title="新规范"></a>新规范</h4><ul>
<li>Web Component<br><a href="https://www.zhihu.com/question/58731753" target="_blank" rel="external">Web Component 和类 React、Angular、Vue 组件化技术谁会成为未来？</a></li>
<li>WebAssembly<br>是面向 Web 的通用二进制和文本格式，可以跑在浏览器里面。但是在目前的形势下，WebAssembly 暂时还操作不了 DOM，对于框架的影响暂时比较有限，待观望</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总结一下吧，我们聊了很多东西，可能比较杂，但我希望大家发现其中一些共性的东西：技术方案都是先有问题，再有思路，同时伴随着取舍。在选择衡量技术的时候，尽量去思考这个技术背后是在解决什么问题，它做了怎样的取舍。这样一方面可以帮助我们更好的理解和使用这些技术，也为以后哪天你遇到业务中的特殊情况，需要自己做方案的时候打好基础。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/11991572/32664683-ffb60d34-c66c-11e7-83ae-8a4ca3ae2da8.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近买了尤雨溪大大的Live：不吹不黑聊聊前端框架，这场Live让我的前端思维到了前所未有的高度：当我们身为前端开发萌新，在前端人才金字塔的浮动与挣扎中思考该学什么框架、该如何入门前端、又遇到学习瓶颈怎么办的时候，正是这些业界大牛们用自己的行动引导着我们，有如尤大所说：多思考场景需求，多看看技术到底做了怎样的取舍，现在把相关的东西作为笔记整理下来，希望对前端开发有兴趣的同学都可以去支持一下尤大&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https:///www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="前端框架" scheme="https:///www.limuyang.cc/tags/%E5%89%8D%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    
      <category term="知乎Live" scheme="https:///www.limuyang.cc/tags/%E7%9F%A5%E4%B9%8ELive/"/>
    
      <category term="尤雨溪" scheme="https:///www.limuyang.cc/tags/%E5%B0%A4%E9%9B%A8%E6%BA%AA/"/>
    
  </entry>
  
  <entry>
    <title>javascript中call、apply、bind方法的使用</title>
    <link href="https:///www.limuyang.cc/2017/11/08/javascript%E4%B8%ADcall%E3%80%81apply%E3%80%81bind%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https:///www.limuyang.cc/2017/11/08/javascript中call、apply、bind方法的使用/</id>
    <published>2017-11-08T12:50:19.000Z</published>
    <updated>2017-11-08T12:51:05.693Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://olivyw4lw.bkt.clouddn.com/maxresdefault.jpg" alt=""></p>
<a id="more"></a>
<h4 id="context的概念"><a href="#context的概念" class="headerlink" title="context的概念"></a>context的概念</h4><p>在知道我们为什么要使用call、apply、bind方法之前，我觉得有必要先了解一下context的相关概念，通常context的作用是取决于函数将如何被调用，当函数作为对象的方法调用时，this就会被设置为调用方法的对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = &#123;</div><div class="line">       foo: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span> === object);</div><div class="line">       &#125;</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   object.foo(); <span class="comment">// true</span></div></pre></td></tr></table></figure></p>
<p>当通过new一个对象的实例的方式来调用一个函数的时候，this的值将被设置为新创建的实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  foo() <span class="comment">// window</span></div><div class="line">  <span class="keyword">new</span> foo() <span class="comment">// foo&#123;&#125;</span></div></pre></td></tr></table></figure></p>
<p>当作为未绑定对象被调用时，this默认指向全局上下文或者浏览器中的window对象。然而，如果函数在严格模式下被执行，上下文将被默认为undefined</p>
<h4 id="动态改变this的值"><a href="#动态改变this的值" class="headerlink" title="动态改变this的值"></a>动态改变this的值</h4><p><strong>然而call、apply、bind方法允许你在自定义的context中执行函数</strong>，什么意思呢，通俗的说就是可以不遵循上面给出的部分定义，可以动态的改变this，我们直接引出MDN关于call方法的定义：</p>
<blockquote>
<p>call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)</p>
</blockquote>
<p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 非严格模式下</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    add(); <span class="comment">// Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></div><div class="line">    sub(); <span class="comment">// Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></div></pre></td></tr></table></figure></p>
<p>结果是符合预期的：</p>
<blockquote>
<p>当作为未绑定对象被调用时，this默认指向全局上下文或者浏览器中的window对象</p>
</blockquote>
<p>我们给他加上call方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 非严格模式下</span></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">args</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    add(); <span class="comment">// Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></div><div class="line">    sub(); <span class="comment">// Window &#123;frames: Window, postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, …&#125;</span></div><div class="line">    add.call(sub,<span class="number">1</span>); <span class="comment">// ƒ sub(args) &#123; ... &#125;</span></div><div class="line">    sub.call(add,<span class="number">1</span>); <span class="comment">// ƒ add(args) &#123; ... &#125;</span></div></pre></td></tr></table></figure></p>
<p>这时候this的值有点类似于第一种情况：</p>
<blockquote>
<p>当函数作为对象的方法调用时，this就会被设置为调用方法的对象</p>
</blockquote>
<p>看起来我们调用call方法的时候好像实际上是进行了对象方法的调用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sub.call(add,<span class="number">1</span>);  <span class="comment">//sub</span></div><div class="line">=&gt;</div><div class="line"><span class="keyword">var</span> sub = &#123;</div><div class="line">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">sub.add(); <span class="comment">// sub</span></div></pre></td></tr></table></figure>
<p>这就是动态的改变了this<br>还有一点要注意的是，这里call和apply方法第一个参数的this值并不一定是该函数执行时真正的this值，比如在非严格模式下，我们传入<code>null</code>或<code>undefined</code>会自动指向全局对象，在浏览器环境中就是<code>window</code>，在node环境中就是<code>global</code>，另外我们还可以传入一些原始值(数字，字符串，布尔值)，这时候的this会指向这些原始值的包装对象，比如传入的是数字，会指向Number。</p>
<h4 id="call和apply的区别"><a href="#call和apply的区别" class="headerlink" title="call和apply的区别"></a>call和apply的区别</h4><p>既然call和apply方法能够动态的改变this的值，我们可以利用这个特性来实现简单的继承，比如此时我们有一个父构造函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">"is"</span>+<span class="keyword">this</span>.age+<span class="string">"years old"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>如果我们想写一个子构造函数，只需要在子构造函数里面调用父构造函数的call方法就可以实现继承：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Toy</span>(<span class="params">name, price</span>) </span>&#123;</div><div class="line">        Product.call(<span class="keyword">this</span>, name, price);</div><div class="line">        <span class="keyword">this</span>.self = <span class="string">"single"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>实现继承的同时父子构造函数还都能分别有自己的属性，比如这里的self属性。<br>这里使用了call方法作为演示，其实apply方法的使用和call方法并无多大区别，重点在参数上，他们的第一个参数都是一个指定的this值，这个值可以是任意js对象，但是第二个参数有区别，call方法接受的是若干个参数的列表，而apply方法接受的是一个包含多个参数的数组，如果上面的例子用apply来写的话就是这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.name+<span class="string">"is"</span>+<span class="keyword">this</span>.age+<span class="string">"years old"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Toy</span>(<span class="params">name, price</span>) </span>&#123;</div><div class="line">        Product.apply(<span class="keyword">this</span>, [name, price]);</div><div class="line">        <span class="keyword">this</span>.self = <span class="string">"single"</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h4 id="bind方法的特殊性"><a href="#bind方法的特殊性" class="headerlink" title="bind方法的特殊性"></a>bind方法的特殊性</h4><p>之所以把bind方法单独放出来是因为bind方法和前面两者还是有不小的区别的，虽然都是动态改变this的值，举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">     x: <span class="number">81</span>,</div><div class="line"> &#125;;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> foo = &#123;</div><div class="line">     getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.x;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> <span class="built_in">console</span>.log(foo.getX.bind(obj)());  <span class="comment">//81</span></div><div class="line"> <span class="built_in">console</span>.log(foo.getX.call(obj));    <span class="comment">//81</span></div><div class="line"> <span class="built_in">console</span>.log(foo.getX.apply(obj));   <span class="comment">//81</span></div></pre></td></tr></table></figure></p>
<p>有没有注意到使用bind方法时候后面还要多加上一对括号，因为使用bind只是返回了对应函数并没有立即执行，而call和apply方法是立即执行的，并且MDN还提到，<strong>当使用new操作符调用绑定函数时指定的this参数会变无效：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">       x: <span class="number">81</span>,</div><div class="line">   &#125;;</div><div class="line"></div><div class="line">   <span class="keyword">var</span> foo = &#123;</div><div class="line">       getX: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">this</span>.x;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">var</span> result = foo.getX.bind(obj);</div><div class="line">   <span class="built_in">console</span>.log(<span class="keyword">new</span> result());  <span class="comment">//getX</span></div></pre></td></tr></table></figure></p>
<p>bind方法的另一个应用是使一个函数拥有预设的初始函数，这些参数作为bind的第二个参数跟在this(或其他对象)后面，之后它们会被插入到目标函数的参数列表的开始位置，传递给绑定函数的参数会跟在它们的后面：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">list</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> list1 = list(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></div><div class="line"></div><div class="line"><span class="comment">// Create a function with a preset leading argument</span></div><div class="line"><span class="keyword">var</span> leadingThirtysevenList = list.bind(<span class="literal">undefined</span>, <span class="number">37</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> list2 = leadingThirtysevenList(); <span class="comment">// [37]</span></div><div class="line"><span class="keyword">var</span> list3 = leadingThirtysevenList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [37, 1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://ryanmorr.com/understanding-scope-and-context-in-javascript/" target="_blank" rel="external">Understanding Scope and Context in JavaScript</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call" target="_blank" rel="external">Function.prototype.call()</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://olivyw4lw.bkt.clouddn.com/maxresdefault.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https:///www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https:///www.limuyang.cc/tags/javascript/"/>
    
      <category term="call" scheme="https:///www.limuyang.cc/tags/call/"/>
    
      <category term="apply" scheme="https:///www.limuyang.cc/tags/apply/"/>
    
      <category term="bind" scheme="https:///www.limuyang.cc/tags/bind/"/>
    
  </entry>
  
  <entry>
    <title>javascript立即执行函数(IIFE)</title>
    <link href="https:///www.limuyang.cc/2017/09/11/javascript%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0-IIFE/"/>
    <id>https:///www.limuyang.cc/2017/09/11/javascript立即执行函数-IIFE/</id>
    <published>2017-09-11T13:46:54.000Z</published>
    <updated>2017-11-08T12:37:49.403Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://oasusatoz.bkt.clouddn.com/maxresdefault.jpg" alt=""></p>
<a id="more"></a> 通常我们声明一个函数有以下几种方式：<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 声明函数f1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"f1"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 通过()来调用此函数</span></div><div class="line">f1();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//一个匿名函数的函数表达式，被赋值给变量f2:</span></div><div class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"f2"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//通过()来调用此函数</span></div><div class="line">f2();</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//一个命名为f3的函数的函数表达式(这里的函数名可以随意命名，可以不必和变量f3重名)，被赋值给变量f3:</span></div><div class="line"><span class="keyword">var</span> f3 = <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"f3"</span>);</div><div class="line">&#125;</div><div class="line"><span class="comment">//通过()来调用此函数</span></div><div class="line">f3();</div></pre></td></tr></table></figure>
<p>如果你看过一些自定义控件的话你会发现他们大多数都是沿用这种写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    ...</div><div class="line">   <span class="comment">// 这里开始写功能需求</span></div><div class="line"> &#125;)();</div></pre></td></tr></table></figure>
<p>这是我们常说的立即执行函数(IIFE)，顾名思义，也就是说这个函数是立即执行函数体的，不需要你额外去主动的去调用，一般情况下我们只对匿名函数使用IIFE，这么做有两个目的：</p>
<blockquote>
<p>一是不必为函数命名，避免了污染全局变量 二是IIFE内部形成了一个单独的作用域，可以封装一些外部无法读取的私有变量。</p>
</blockquote>
<p>如果看到这两句话无法理解，那么先从IIFE的运行原理说起。 因为IIFE通常用于匿名函数，这里就用简单的匿名函数作为栗子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"f"</span>);</div><div class="line">&#125;</div><div class="line">f();</div></pre></td></tr></table></figure>
<p>我们发现这里<code>f</code>只是这个匿名函数的一个引用变量，那么既然<code>f()</code>能够调用这个函数，我把<code>f</code>替换成函数本身可以么：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"f"</span>);</div><div class="line">&#125;();</div></pre></td></tr></table></figure>
<p>运行之后得到如下结果：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Uncaught <span class="built_in">SyntaxError</span>: Unexpected token (</div></pre></td></tr></table></figure>
<p>产生这个错误的原因是，Javascript引擎看到function关键字之后，认为后面跟的是函数声明语句，不应该以圆括号结尾。解决方法就是让引擎知道，圆括号前面的部分不是函数定义语句，而是一个表达式，可以对此进行运算，这里区分一下函数声明和函数表达式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、函数声明(即我们通常使用<span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"></span>)</span>&#123;&#125;来声明一个函数)</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* logic here */</span> &#125;</div><div class="line"><span class="number">2</span>、函数表达式(类似以这种的形式)</div><div class="line"><span class="keyword">var</span> myFunction = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* logic here */</span> &#125;;</div><div class="line"><span class="keyword">var</span> myObj = &#123;</div><div class="line">    myFunction: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">/* logic here */</span> &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>小学我们就学过用<code>()</code>括起来的表达式会先执行，就像下面这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1+(2+3) //这里先运行小括号里面的内容没有意见撒</div></pre></td></tr></table></figure>
<p>其实在<code>javascript</code>中小括号也有相似的作用，Javascript引擎看到function关键字会认为是函数声明语句，那么如果Javascript引擎优先看到小括号会怎么样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//用小括号把函数包裹起来</span></div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   <span class="built_in">console</span>.log(<span class="string">"f"</span>);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>函数成功执行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">f //控制台输出</div></pre></td></tr></table></figure>
<p>这种情况下Javascript引擎就会认为这是一个表达式，而不是函数声明，当然要让Javascript引擎认为这是一个表达式的方法还有很多：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</div><div class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</div><div class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</div><div class="line">~<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;();</div><div class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;</div><div class="line"><span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">/* code */</span> &#125;() <span class="comment">// 只有传递参数时，才需要最后那个圆括号。</span></div><div class="line">...</div></pre></td></tr></table></figure>
<p>回到前面的问题，为什么说IIFE这种形式避免了污染全局变量，如果你见过别人写的jquery插件，里面通常会有类似这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">    ...</div><div class="line">   <span class="comment">//插件实现代码</span></div><div class="line">&#125;)(jQuery);</div></pre></td></tr></table></figure>
<p>这里的<code>jquery</code>其实是该匿名函数的参数，联想一下我们调用匿名函数时候是用<code>f()</code>那么匿名带参数的就是<code>f(args)</code>对吧，这里把jquery作为参数传入该函数，那么在函数内部使用形参<code>$</code>的时候就不会影响到外部环境，因为有些插件也会用到<code>$</code>这个限定符，你在这个函数内部可以随意折腾。</p>
<p>以上，在此过程中参考了以下两篇文章： <a href="http://www.tangshuang.net/2020.html" target="_blank" rel="external">javascript立即执行某个函数：插件中function(){}()再思考</a> <a href="https://segmentfault.com/a/1190000003902899" target="_blank" rel="external">JavaScript中的立即执行函数</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://oasusatoz.bkt.clouddn.com/maxresdefault.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https:///www.limuyang.cc/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="javascript" scheme="https:///www.limuyang.cc/tags/javascript/"/>
    
      <category term="IIFE" scheme="https:///www.limuyang.cc/tags/IIFE/"/>
    
  </entry>
  
  <entry>
    <title>告别五月</title>
    <link href="https:///www.limuyang.cc/2017/06/01/%E5%91%8A%E5%88%AB%E4%BA%94%E6%9C%88/"/>
    <id>https:///www.limuyang.cc/2017/06/01/告别五月/</id>
    <published>2017-06-01T14:06:01.000Z</published>
    <updated>2017-06-07T13:25:00.134Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://olivyw4lw.bkt.clouddn.com/davide-ragusa-3131-min.jpg" alt=""></p>
<p>2017年<br>6月1号<br>转眼就跑到那似水流年里去了，然而身边的人都不珍视自己的似水流年<br>我要告别5月<br><a id="more"></a></p>
<h4 id="诉"><a href="#诉" class="headerlink" title="诉"></a>诉</h4><p>一整个5月是我成长最快的日子<br>我心里很乱，当我沿着这条路走下去的时候<br>心里总想着另一条路上的事<br>好像王小波在《黄金时代》中描述到的：”那一年我二十一岁，在我一生的黄金时代，我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。”</p>
<h4 id="别"><a href="#别" class="headerlink" title="别"></a>别</h4><p><img src="http://olivyw4lw.bkt.clouddn.com/duoshuo.png" alt=""><br>在2017-06-01这个节点我把多说换成了搜狐畅言<br>让我和你告个别<br>开源不易，且行且珍惜</p>
<h4 id="离"><a href="#离" class="headerlink" title="离"></a>离</h4><p>我只愿蓬勃的生活在此时此刻<br>成为一名真正意义上的移动WEB前端开发工程师<br>“移动”两字是我刻意加上去的，很好的显露出我没有如愿成为一名移动开发工程师的不忿<br>最后，我发现我真的胖了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://olivyw4lw.bkt.clouddn.com/davide-ragusa-3131-min.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2017年&lt;br&gt;6月1号&lt;br&gt;转眼就跑到那似水流年里去了，然而身边的人都不珍视自己的似水流年&lt;br&gt;我要告别5月&lt;br&gt;
    
    </summary>
    
      <category term="茕独" scheme="https:///www.limuyang.cc/categories/%E8%8C%95%E7%8B%AC/"/>
    
    
      <category term="告别" scheme="https:///www.limuyang.cc/tags/%E5%91%8A%E5%88%AB/"/>
    
  </entry>
  
  <entry>
    <title>自始至终</title>
    <link href="https:///www.limuyang.cc/2017/02/17/%E8%87%AA%E5%A7%8B%E8%87%B3%E7%BB%88/"/>
    <id>https:///www.limuyang.cc/2017/02/17/自始至终/</id>
    <published>2017-02-17T14:25:29.000Z</published>
    <updated>2017-06-07T13:21:14.907Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://olivyw4lw.bkt.clouddn.com/17-2-17/11192154-file_1487341097174_e508.jpg" alt=""></p>
<p>长安有男儿，二十心已朽<br>我已经快忘了来这座城市的初衷</p>
<p>我总是没有勇气把生活过的波澜壮阔</p>
<a id="more"></a>
<p>2016-6-26，我终于离开了生活和学习了四年的城市，<br>这个城市含着与我记忆无关的繁华，就这么走了也没捎上一句不咸不淡的问候</p>
<p>人最可悲的心甘情愿用不知道多少个日夜的交替去执着自己不该执着的事物,<br>然而早已白露不是惊蛰，<br>世间也不存在那壶让人醉生梦死的酒<br>我只知道这个城市有我无法割舍的记忆和无法忘却的故人…</p>
<p>“如果我有孤独和酒，你跟不跟我走”<br>伪文艺总是打着孤独的帆在人海浪尖处踮着脚尖儿跳舞。 船到尽头方知那些粗布麻衣闲茶淡酒垂钓岸边的人，<br>才是真性情。</p>
<p>2017年元旦去了一趟东极之东，那里晚霞中的风车阵太美,<br>傍晚的暮霭渐渐化成粉色的温柔…<br>其实东极还有另一种宁静，那是大家启程返航的时候，<br>我们懈怠了一点，于是看到的也多一点，那时候的东极才是真正的东极…</p>
<p>你很难找到跟你性情相通的人，<br>你发现你只是一个存在， 又或者在别人眼里根本就看不见你。</p>
<p>如果你找到我，那么，你能否为我，作片刻的停留？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://olivyw4lw.bkt.clouddn.com/17-2-17/11192154-file_1487341097174_e508.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;长安有男儿，二十心已朽&lt;br&gt;我已经快忘了来这座城市的初衷&lt;/p&gt;
&lt;p&gt;我总是没有勇气把生活过的波澜壮阔&lt;/p&gt;
    
    </summary>
    
      <category term="茕独" scheme="https:///www.limuyang.cc/categories/%E8%8C%95%E7%8B%AC/"/>
    
    
      <category term="自始至终" scheme="https:///www.limuyang.cc/tags/%E8%87%AA%E5%A7%8B%E8%87%B3%E7%BB%88/"/>
    
  </entry>
  
  <entry>
    <title>Handler机制从入门到放弃(二)</title>
    <link href="https:///www.limuyang.cc/2016/10/29/Handler%E6%9C%BA%E5%88%B6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%BA%8C/"/>
    <id>https:///www.limuyang.cc/2016/10/29/Handler机制从入门到放弃-二/</id>
    <published>2016-10-29T14:48:19.000Z</published>
    <updated>2017-02-17T10:56:05.892Z</updated>
    
    <content type="html"><![CDATA[<h4 id="从注释看起"><a href="#从注释看起" class="headerlink" title="从注释看起"></a>从注释看起</h4><p>Hander的源码只有不到800行，而且大多数代码相对来说还是比较好理解的，尤其是相对于其他更加接近底层的代码来说，在看源码时候有一点挺重要的就是不要忽略注释的作用，Handler类开头有这么几行注释：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;There are two main uses <span class="keyword">for</span> a Handler: (<span class="number">1</span>) to schedule messages and</div><div class="line"> runnables to be executed <span class="keyword">as</span> some point <span class="keyword">in</span> the future; and (<span class="number">2</span>) to enqueue</div><div class="line"> an action to be performed on a different thread than your own.</div></pre></td></tr></table></figure>
<a id="more"></a> 归纳一下就是：<br><br>- 安排消息和任务在将来的某一个点执行<br>- 使一个动作进入队列为了能够在另一个线程中执行<br><br>回顾一下我们为什么要用Handler：<br><br>&gt; 在Android中，当要更新UI的时候，我们必须要在主线程中进行更新，原因时当主线程被阻塞了5s以上就会出现ANR异常，会导致程序崩溃。所以一些耗时的操作必须要放在子线程中，但是在子线程中又不能做更新UI的操作，所以为了解决这个问题，Android设计了handler机制。<br><br>这么一对比，很容易的印证了这段话：使一个动作进入队列在另一个线程中执行：这不就是异步执行耗时任务么；安排消息和任务在将来的某一个点执行：联想一下postDelayed之类的延时操作的方法，或者给出一个很常见的例子，比如说引导页延时启动：<br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Handler().postDelayed(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.d(<span class="string">"ThreadName 1"</span>,Thread.currentThread().getName());</div><div class="line">                <span class="comment">//第一次登陆扫描本地音乐</span></div><div class="line">                <span class="keyword">if</span> (SPUtils.getValue(SplashActivity.<span class="keyword">this</span>, <span class="string">"isFirst"</span>, <span class="string">"First"</span>, <span class="keyword">true</span>)) &#123;</div><div class="line">                    <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            <span class="comment">//耗时操作</span></div><div class="line">                            <span class="comment">//清空表</span></div><div class="line">                            Log.d(<span class="string">"ThreadName 2"</span>,Thread.currentThread().getName());</div><div class="line">                            DataSupport.deleteAll(MusicInfoDetail.class);</div><div class="line">                            MusicUtils.scanMusic(SplashActivity.<span class="keyword">this</span>, musicInfo);</div><div class="line">                            DataSupport.saveAll(musicInfo);</div><div class="line">                            SPUtils.putValue(SplashActivity.<span class="keyword">this</span>, <span class="string">"isFirst"</span>, <span class="string">"First"</span>, <span class="keyword">false</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;).start();</div><div class="line">               &#125;, <span class="number">2000</span>);</div></pre></td></tr></table></figure>
<p>这里是我自己的Demo里面的一部分代码，这里使用<code>postDelayed</code>延时2s启动，然后在子线程执行更新数据库的操作，很好的印证了上面两点。</p>
<h4 id="创建Handler"><a href="#创建Handler" class="headerlink" title="创建Handler"></a>创建Handler</h4><p>在上一篇文章Handler机制从入门到放弃(一)里面我们已经演示了两种创建Handler的方法并且给出了部分实际操作的代码，但是都是在主线程也就是UI线程创建的，我们可以尝试一下在子线程中创建Handler：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mainHandler;</div><div class="line">    <span class="keyword">private</span> Handler childHandler;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mainHandler=<span class="keyword">new</span> Handler();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                childHandler=<span class="keyword">new</span> Handler();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行一下，果不其然代码蹦了：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/16-10-28/55948496.jpg" alt="Crash"></p>
<p>报错信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.RuntimeException: Can&apos;t create handler inside thread that has not called Looper.prepare()</div></pre></td></tr></table></figure>
<p>告诉我们说在Thread里面创建Handler需要调用<code>Looper.prepare( )</code>，那把这一句加上试试：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler mainHandler;</div><div class="line">    <span class="keyword">private</span> Handler childHandler;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        mainHandler=<span class="keyword">new</span> Handler();</div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Looper.prepare();</div><div class="line">                childHandler=<span class="keyword">new</span> Handler();</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oasusatoz.bkt.clouddn.com/16-10-28/83297625.jpg" alt="运行结果"></p>
<p>果然很成功的运行了，但是这是为什么，来看一下Handler的源码：</p>
<p>这里提供一个简便的方法，为了快速找到原因可以在打开的源码(我这里使用sublimeText查看)里使用ctrl+f快捷键搜索Looper.prepare( )出现的地方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Handler</span><span class="params">(Callback callback, <span class="keyword">boolean</span> async)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (FIND_POTENTIAL_LEAKS) &#123;</div><div class="line">            <span class="keyword">final</span> Class&lt;? extends Handler&gt; klass = getClass();</div><div class="line">            <span class="keyword">if</span> ((klass.isAnonymousClass() || klass.isMemberClass() || klass.isLocalClass()) &amp;&amp;</div><div class="line">                    (klass.getModifiers() &amp; Modifier.STATIC) == <span class="number">0</span>) &#123;</div><div class="line">                Log.w(TAG, <span class="string">"The following Handler class should be static or leaks might occur: "</span> +</div><div class="line">                    klass.getCanonicalName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mLooper = Looper.myLooper();</div><div class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">        &#125;</div><div class="line">        mQueue = mLooper.mQueue;</div><div class="line">        mCallback = callback;</div><div class="line">        mAsynchronous = async;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这是Handler的其中一个构造方法，看到这么一段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mLooper = Looper.myLooper();</div><div class="line">        <span class="keyword">if</span> (mLooper == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="string">"Can't create handler inside thread that has not called Looper.prepare()"</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>在构造方法里通过<code>Looper.myLooper()</code>获取到一个Looper对象mLooper，如果为空则报错，找到<code>Looper.myLooper()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Return the Looper object associated with the current thread.  Returns</div><div class="line">     * null if the calling thread is not associated with a Looper.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="meta">@Nullable</span> <span class="function">Looper <span class="title">myLooper</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> sThreadLocal.get();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>注释给出的解释是这个方法回返回跟当前线程相关联的Looper对象，如果没有则返回空，还是没找到答案，接着找Looper类里面对sThreadLocal的定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// sThreadLocal.get() will return null unless you've called prepare().</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Looper&gt; sThreadLocal = <span class="keyword">new</span> ThreadLocal&lt;Looper&gt;();</div></pre></td></tr></table></figure>
<p>又是注释里面告诉了我们重要信息，这里告诉我们只有你调用了<code>Looper.prepare()</code>方法<code>sThreadLocal.get()</code>才不会返回空，那么说来说去还是要看<code>Looper.prepare()</code>的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Initialize the current thread as a looper.</span></div><div class="line">      * This gives you a chance to create handlers that then reference</div><div class="line">      * this looper, before actually starting the loop. Be sure to call</div><div class="line">      * &#123;<span class="doctag">@link</span> #loop()&#125; after calling this method, and end it by calling</div><div class="line">      * &#123;<span class="doctag">@link</span> #quit()&#125;.</div><div class="line">      */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</div><div class="line">        prepare(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">(<span class="keyword">boolean</span> quitAllowed)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (sThreadLocal.get() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Only one Looper may be created per thread"</span>);</div><div class="line">        &#125;</div><div class="line">        sThreadLocal.set(<span class="keyword">new</span> Looper(quitAllowed));</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>看下面那个，Looper.prepare()调用了prepare()的重载方法prepare(boolean quitAllowed)并且传入了true参数，这个方法判断sThreadLocal.get()是否会返回一个Looper对象，如果没有的话就set一个新的Looper进去，如果已经有了再调用prepare()方法的话就会报错，不信邪的可以在mainHandler创建之前也调用一个Looper.prepare()，控制台就会出现这个错误：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/4.png" alt="Crash"></p>
<p>那么问题来了，为什么我们在主线程创建Handler不需要调用<code>Looper.prepare()</code>，而在子线程中需要呢，可以合理的猜想是不是系统给我们主动调用了，毕竟我们大部分的操作还是在主线程上，每次都要那么<code>Looper.prepare()</code>来一次多麻烦，有了猜想还要去源码寻求验证，主线程是ActivityThread，从ActivityThread类里搜索相关信息，用跟上面一样的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="string">"ActivityThreadMain"</span>);</div><div class="line">        SamplingProfilerIntegration.start();</div><div class="line"></div><div class="line">        <span class="comment">// CloseGuard defaults to true and can be quite spammy.  We</span></div><div class="line">        <span class="comment">// disable it here, but selectively enable it later (via</span></div><div class="line">        <span class="comment">// StrictMode) on debug builds, but using DropBox, not logs.</span></div><div class="line">        CloseGuard.setEnabled(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        Environment.initForCurrentUser();</div><div class="line"></div><div class="line">        <span class="comment">// Set the reporter for event logging in libcore</span></div><div class="line">        EventLogger.setReporter(<span class="keyword">new</span> EventLoggingReporter());</div><div class="line"></div><div class="line">        <span class="comment">// Make sure TrustedCertificateStore looks in the right place for CA certificates</span></div><div class="line">        <span class="keyword">final</span> File configDir = Environment.getUserConfigDirectory(UserHandle.myUserId());</div><div class="line">        TrustedCertificateStore.setDefaultUserDirectory(configDir);</div><div class="line"></div><div class="line">        Process.setArgV0(<span class="string">"&lt;pre-initialized&gt;"</span>);</div><div class="line"></div><div class="line">        Looper.prepareMainLooper();</div><div class="line"></div><div class="line">        ActivityThread thread = <span class="keyword">new</span> ActivityThread();</div><div class="line">        thread.attach(<span class="keyword">false</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (sMainThreadHandler == <span class="keyword">null</span>) &#123;</div><div class="line">            sMainThreadHandler = thread.getHandler();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">false</span>) &#123;</div><div class="line">            Looper.myLooper().setMessageLogging(<span class="keyword">new</span></div><div class="line">                    LogPrinter(Log.DEBUG, <span class="string">"ActivityThread"</span>));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// End of event ActivityThreadMain.</span></div><div class="line">        Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);</div><div class="line">        Looper.loop();</div><div class="line"></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Main thread loop unexpectedly exited"</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>抓重点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Looper.prepareMainLooper();</div></pre></td></tr></table></figure>
<p>找到Looper类中关于这个方法的定义：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Initialize the current thread as a looper, marking it as an</div><div class="line">     * application&apos;s main looper. The main looper for your application</div><div class="line">     * is created by the Android environment, so you should never need</div><div class="line">     * to call this function yourself.  See also: &#123;@link #prepare()&#125;</div><div class="line">     */</div><div class="line">public static void prepareMainLooper() &#123;</div><div class="line">        prepare(false);</div><div class="line">        synchronized (Looper.class) &#123;</div><div class="line">            if (sMainLooper != null) &#123;</div><div class="line">                throw new IllegalStateException(&quot;The main Looper has already been prepared.&quot;);</div><div class="line">            &#125;</div><div class="line">            sMainLooper = myLooper();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这里又会主动调用<code>prepare(boolean quitAllowed)</code>方法，通过注释也了解到我们不需要主动去创建UI线程的looper，系统自动会给我们创建好了，这里印证了前面的猜想。</p>
<p>这里得出一个结论：</p>
<p><strong>在主线程中可以直接创建Handler对象，而在子线程中需要先调用Looper.prepare()才能创建Handler对象。</strong></p>
<p>这里先不管Looper是什么，暂时知道有这个东西，下面可以看一下如何发送消息。</p>
<h4 id="如何发送消息"><a href="#如何发送消息" class="headerlink" title="如何发送消息"></a>如何发送消息</h4><p>这里就用到了第二种创建Handler的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Handler myHandler = <span class="keyword">new</span> Handler() &#123;  </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;   </div><div class="line">               <span class="keyword">switch</span> (msg.what) &#123;   </div><div class="line">                   <span class="comment">//根据参数进行操作</span></div><div class="line">                         <span class="keyword">break</span>;   </div><div class="line">               &#125;   </div><div class="line">               <span class="keyword">super</span>.handleMessage(msg);   </div><div class="line">          &#125;   </div><div class="line">     &#125;;  </div><div class="line">  <span class="comment">//其他地方调用</span></div><div class="line">myHandler.sendMessage(xxx);</div></pre></td></tr></table></figure>
<p>这里的其他地方调用指的就是在子线程里面，当我们在子线程里面执行完耗时操作之后如果需要传递一些数据给主线程，比如通知主线程更新UI之类的，就可以这么做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span>  Handler myHandler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">                <span class="keyword">switch</span> (msg.what) &#123;</div><div class="line">                    <span class="comment">//根据参数进行操作</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">               Message msg=<span class="keyword">new</span> Message();</div><div class="line">                <span class="comment">//what是用户自定义的识别码</span></div><div class="line">                msg.what=<span class="number">1</span>;</div><div class="line">                <span class="comment">//通过arg1和arg2可以给Message传递简单的int型数据</span></div><div class="line">                msg.arg1=<span class="number">123</span>;</div><div class="line">                msg.arg2=<span class="number">456</span>;</div><div class="line">                <span class="comment">//通过给obj赋值Object类型传递向Message传入任意数据</span></div><div class="line">                msg.obj=<span class="keyword">null</span>;</div><div class="line">                myHandler.sendMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div></pre></td></tr></table></figure>
<p>当然除了传递这些简单数据之外Message类还能以setData方式携带Bundle数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Bundle bundle = <span class="keyword">new</span> Bundle();  </div><div class="line">    bundle.putString(<span class="string">"data"</span>, <span class="string">"data"</span>);  </div><div class="line">    message.setData(bundle);</div></pre></td></tr></table></figure>
<p>我们看到这里是在子线程中调用了<code>sendMessage(msg)</code>方法，然而我们却在主线程中使用<code>handleMessage(Message msg)</code>接受消息，这之间一定发生了一些不可描述的事情，让我们来找找看，当然除了<code>sendMessage(msg)</code>方法Message类还有许多其他发送消息的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessage</span><span class="params">(Message msg)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessage</span><span class="params">(<span class="keyword">int</span> what)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> sendEmptyMessageDelayed(what, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageDelayed</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> delayMillis)</span> </span>&#123;</div><div class="line">        Message msg = Message.obtain();</div><div class="line">        msg.what = what;</div><div class="line">        <span class="keyword">return</span> sendMessageDelayed(msg, delayMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendEmptyMessageAtTime</span><span class="params">(<span class="keyword">int</span> what, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        Message msg = Message.obtain();</div><div class="line">        msg.what = what;</div><div class="line">        <span class="keyword">return</span> sendMessageAtTime(msg, uptimeMillis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"> .....</div></pre></td></tr></table></figure>
<p>巧的是，这些方法无论转折多少次都走向了同一个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Enqueue a message into the message queue after all pending messages</div><div class="line">     * before the absolute time (in milliseconds) &lt;var&gt;uptimeMillis&lt;/var&gt;.</div><div class="line">     * &lt;b&gt;The time-base is &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125;.&lt;/b&gt;</div><div class="line">     * Time spent in deep sleep will add an additional delay to execution.</div><div class="line">     * You will receive it in &#123;<span class="doctag">@link</span> #handleMessage&#125;, in the thread attached</div><div class="line">     * to this handler.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> uptimeMillis The absolute time at which the message should be</div><div class="line">     *         delivered, using the</div><div class="line">     *         &#123;<span class="doctag">@link</span> android.os.SystemClock#uptimeMillis&#125; time-base.</div><div class="line">     *         </div><div class="line">     * <span class="doctag">@return</span> Returns true if the message was successfully placed in to the</div><div class="line">     *         message queue.  Returns false on failure, usually because the</div><div class="line">     *         looper processing the message queue is exiting.  Note that a</div><div class="line">     *         result of true does not mean the message will be processed -- if</div><div class="line">     *         the looper is quit before the delivery time of the message</div><div class="line">     *         occurs then the message will be dropped.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtTime</span><span class="params">(Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        MessageQueue queue = mQueue;</div><div class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                    <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个方法接受两个参数，msg和<code>uptimeMillis</code>，msg就是我们需要传递的消息，<code>uptimeMillis</code>则是发送消息时候的绝对时刻，它的值等于自系统开机到当前时间的毫秒数再加上延迟时间，这个延迟时间就是我们调用sendxxxDelayed里面传入的时间参数，这个方法会把一个消息放入消息队列(message queue)，然后把这个方法的两个参数加上新建的MessageQueue 对象传入<code>enqueueMessage(queue, msg, uptimeMillis)</code>方法里，从字面上理解MessageQueue 是一个消息队列，那么队列就会有入队和出队的方法，这个<code>enqueueMessage(queue, msg, uptimeMillis)</code>应该就是入队的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        msg.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>没有发现什么，这里又调用了<code>enqueueMessage(msg, uptimeMillis)</code>方法，这个方法在<code>MessageQueue</code>类里面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(Message msg, <span class="keyword">long</span> when)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">                IllegalStateException e = <span class="keyword">new</span> IllegalStateException(</div><div class="line">                        msg.target + <span class="string">" sending message to a Handler on a dead thread"</span>);</div><div class="line">                Log.w(TAG, e.getMessage(), e);</div><div class="line">                msg.recycle();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            msg.markInUse();</div><div class="line">            msg.when = when;</div><div class="line">            Message p = mMessages;</div><div class="line">            <span class="keyword">boolean</span> needWake;</div><div class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">                msg.next = p;</div><div class="line">                mMessages = msg;</div><div class="line">                needWake = mBlocked;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">                Message prev;</div><div class="line">                <span class="keyword">for</span> (;;) &#123;</div><div class="line">                    prev = p;</div><div class="line">                    p = p.next;</div><div class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                        needWake = <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">                prev.next = msg;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">            <span class="keyword">if</span> (needWake) &#123;</div><div class="line">                nativeWake(mPtr);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码有点长，一步一步看，先看前面一部分：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Message must have a target."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (msg.isInUse()) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(msg + <span class="string">" This message is already in use."</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>这里判断了一下msg.target对象是否为空，还记得之前的<code>enqueueMessage(queue, msg, uptimeMillis)</code>方法吗：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enqueueMessage</span><span class="params">(MessageQueue queue, Message msg, <span class="keyword">long</span> uptimeMillis)</span> </span>&#123;</div><div class="line">        msg.target = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">if</span> (mAsynchronous) &#123;</div><div class="line">            msg.setAsynchronous(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> queue.enqueueMessage(msg, uptimeMillis);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个方法是在Handler中执行的，这里把一个this对象赋值给<code>msg.target</code>，那么从Message类找一下这个target到底是什么，找到这个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*package*/</span> Handler target;</div></pre></td></tr></table></figure>
<p>这样脉络就很清晰了，这里是把Handler跟Message对象绑定起来，接着往下看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">msg.markInUse();</div><div class="line">            msg.when = when;</div><div class="line">            Message p = mMessages;</div><div class="line">            <span class="keyword">boolean</span> needWake;</div><div class="line">            <span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">                msg.next = p;</div><div class="line">                mMessages = msg;</div><div class="line">                needWake = mBlocked;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">                Message prev;</div><div class="line">                <span class="keyword">for</span> (;;) &#123;</div><div class="line">                    prev = p;</div><div class="line">                    p = p.next;</div><div class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                        needWake = <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">                prev.next = msg;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// We can assume mPtr != 0 because mQuitting is false.</span></div><div class="line">            <span class="keyword">if</span> (needWake) &#123;</div><div class="line">                nativeWake(mPtr);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>这个<code>msg.when</code>就是用传入的<code>uptimeMillis</code>参数赋值，表示入队时间，看到这个if判断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (p == <span class="keyword">null</span> || when == <span class="number">0</span> || when &lt; p.when) &#123;</div><div class="line">                <span class="comment">// New head, wake up the event queue if blocked.</span></div><div class="line">                msg.next = p;</div><div class="line">                mMessages = msg;</div><div class="line">                needWake = mBlocked;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">            ...</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>有人可能会好奇这个when怎么会为0呢，这里提一嘴，Handler除了有正常的sendMessage之流的方法还有一个比较特殊的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">sendMessageAtFrontOfQueue</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        MessageQueue queue = mQueue;</div><div class="line">        <span class="keyword">if</span> (queue == <span class="keyword">null</span>) &#123;</div><div class="line">            RuntimeException e = <span class="keyword">new</span> RuntimeException(</div><div class="line">                <span class="keyword">this</span> + <span class="string">" sendMessageAtTime() called with no mQueue"</span>);</div><div class="line">            Log.w(<span class="string">"Looper"</span>, e.getMessage(), e);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> enqueueMessage(queue, msg, <span class="number">0</span>);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个方法特殊在什么地方呢，打个比方，如果说我们正常的<code>sendMessage</code>之流的方法是一群正常排队的人，按照来的时间先后有序排队，但是<code>sendMessageAtFrontOfQueue</code>就是那种个别不老实的，它能直接插队到最前面，然后他传递的<code>uptimeMillis</code>为0，这也是唯一一个特殊的发送消息的方法。</p>
<p>这个判断语句成立的条件有三点：<code>p == null || when == 0 || when &lt; p.when</code></p>
<ul>
<li>p == null说明当前looper处于空闲状态，也就是没有什么消息需要处理</li>
<li>when == 0说明有消息插队插到了MessageQueue最前面</li>
<li>when &lt; p.when指的是新入队的消息队列需要排队的时间比正在执行的消息排队的时间短</li>
</ul>
<p>综合来说就是，如果这时候新进来一个消息，这时候消息队列里面没有需要执行的消息，或者新进来的这个消息是通过<code>sendMessageAtFrontOfQueue(Message msg)</code>方法传进来的，或者说新进来的这个消息需要等待的时间比之前在等待的消息等待的时间短，那么就把这个消息插入链表的表头，此时系统会唤醒这个消息队列无论队列是否堵塞。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Got a message.</span></div><div class="line"> mBlocked = <span class="keyword">false</span>;</div></pre></td></tr></table></figure>
<p>这一行代码说明只要消息队列有消息，这个队列就不阻塞，然后把这个布尔值传递：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> needWake</div><div class="line">needWake = mBlocked;</div></pre></td></tr></table></figure>
<p>那么这一块代码就打通了，下面这块else语句块：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// Inserted within the middle of the queue.  Usually we don't have to wake</span></div><div class="line">                <span class="comment">// up the event queue unless there is a barrier at the head of the queue</span></div><div class="line">                <span class="comment">// and the message is the earliest asynchronous message in the queue.</span></div><div class="line">                needWake = mBlocked &amp;&amp; p.target == <span class="keyword">null</span> &amp;&amp; msg.isAsynchronous();</div><div class="line">                Message prev;</div><div class="line">                <span class="keyword">for</span> (;;) &#123;</div><div class="line">                    prev = p;</div><div class="line">                    p = p.next;</div><div class="line">                    <span class="keyword">if</span> (p == <span class="keyword">null</span> || when &lt; p.when) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">if</span> (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                        needWake = <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                msg.next = p; <span class="comment">// invariant: p == prev.next</span></div><div class="line">                prev.next = msg;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>讲的是如何把消息插入链表的内部，这时候就不需要去调整唤醒消息队列的时间，因为唤醒的时间是跟表头有关的，这样整个入队的操作差不多就过了一遍.</p>
<h4 id="出队操作"><a href="#出队操作" class="headerlink" title="出队操作"></a>出队操作</h4><p>既然有入队操作那么肯定也有出队操作，如果你还记得我们最开始使用的Looper类的话，那么这里不妨直接告诉你，出队的方法就在Looper类里面，这里有个<code>loop()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Run the message queue in this thread. Be sure to call</div><div class="line">     * &#123;<span class="doctag">@link</span> #quit()&#125; to end the loop.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Looper me = myLooper();</div><div class="line">        <span class="keyword">if</span> (me == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"No Looper; Looper.prepare() wasn't called on this thread."</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> MessageQueue queue = me.mQueue;</div><div class="line">        <span class="comment">// Make sure the identity of this thread is that of the local process,</span></div><div class="line">        <span class="comment">// and keep track of what that identity token actually is.</span></div><div class="line">        Binder.clearCallingIdentity();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">long</span> ident = Binder.clearCallingIdentity();</div><div class="line">        <span class="comment">//死循环</span></div><div class="line">        <span class="keyword">for</span> (;;) &#123;</div><div class="line">        <span class="comment">//把消息从队列取出</span></div><div class="line">            Message msg = queue.next(); <span class="comment">// might block</span></div><div class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// No message indicates that the message queue is quitting.</span></div><div class="line">                <span class="keyword">return</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// This must be in a local variable, in case a UI event sets the logger</span></div><div class="line">            <span class="keyword">final</span> Printer logging = me.mLogging;</div><div class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">                logging.println(<span class="string">"&gt;&gt;&gt;&gt;&gt; Dispatching to "</span> + msg.target + <span class="string">" "</span> +</div><div class="line">                        msg.callback + <span class="string">": "</span> + msg.what);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> traceTag = me.mTraceTag;</div><div class="line">            <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</div><div class="line">                Trace.traceBegin(traceTag, msg.target.getTraceName(msg));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                msg.target.dispatchMessage(msg);</div><div class="line">            &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                <span class="keyword">if</span> (traceTag != <span class="number">0</span>) &#123;</div><div class="line">                    Trace.traceEnd(traceTag);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (logging != <span class="keyword">null</span>) &#123;</div><div class="line">                logging.println(<span class="string">"&lt;&lt;&lt;&lt;&lt; Finished to "</span> + msg.target + <span class="string">" "</span> + msg.callback);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// Make sure that during the course of dispatching the</span></div><div class="line">            <span class="comment">// identity of the thread wasn't corrupted.</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> newIdent = Binder.clearCallingIdentity();</div><div class="line">            <span class="keyword">if</span> (ident != newIdent) &#123;</div><div class="line">                Log.wtf(TAG, <span class="string">"Thread identity changed from 0x"</span></div><div class="line">                        + Long.toHexString(ident) + <span class="string">" to 0x"</span></div><div class="line">                        + Long.toHexString(newIdent) + <span class="string">" while dispatching to "</span></div><div class="line">                        + msg.target.getClass().getName() + <span class="string">" "</span></div><div class="line">                        + msg.callback + <span class="string">" what="</span> + msg.what);</div><div class="line">            &#125;</div><div class="line">            msg.recycleUnchecked();</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>注意这两段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> Looper me = myLooper();</div><div class="line"><span class="keyword">final</span> MessageQueue queue = me.mQueue;</div></pre></td></tr></table></figure>
<p>之前说过一个线程必须有一个Looper，这里不仅获取到了Looper，还获取到了当前线程绑定的MessageQueue也就是消息队列，然后<code>loop()</code>方法最开始是判断当前线程是否有Looper对象，之后进入一个死循环，在循环体内不断的从消息队列(Message queue)中取出消息对象，为什么这么说，看这个<code>next()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="function">Message <span class="title">next</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> pendingIdleHandlerCount = -<span class="number">1</span>; <span class="comment">// -1 only during first iteration</span></div><div class="line">    <span class="keyword">int</span> nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (;;) &#123;</div><div class="line">        . . . . . .</div><div class="line">        nativePollOnce(mPtr, nextPollTimeoutMillis);    <span class="comment">// 阻塞于此</span></div><div class="line">        . . . . . .</div><div class="line">            <span class="comment">// 获取next消息，如能得到就返回之。</span></div><div class="line">            <span class="keyword">final</span> <span class="keyword">long</span> now = SystemClock.uptimeMillis();</div><div class="line">            Message prevMsg = <span class="keyword">null</span>;</div><div class="line">            Message msg = mMessages;  <span class="comment">// 先尝试拿消息队列里当前第一个消息</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span> &amp;&amp; msg.target == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 如果从队列里拿到的msg是个“同步分割栏”，那么就寻找其后第一个“异步消息”</span></div><div class="line">                do &#123;</div><div class="line">                    prevMsg = msg;</div><div class="line">                    msg = msg.next;</div><div class="line">                &#125; <span class="keyword">while</span> (msg != <span class="keyword">null</span> &amp;&amp; !msg.isAsynchronous());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (msg != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (now &lt; msg.when) &#123;</div><div class="line">                    <span class="comment">// Next message is not ready.  Set a timeout to wake up when it is ready.</span></div><div class="line">                    nextPollTimeoutMillis = (<span class="keyword">int</span>) Math.min(msg.when - now,</div><div class="line">                                                                   Integer.MAX_VALUE);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">// Got a message.</span></div><div class="line">                    mBlocked = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">if</span> (prevMsg != <span class="keyword">null</span>) &#123;</div><div class="line">                        prevMsg.next = msg.next;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mMessages = msg.next;  <span class="comment">// 重新设置一下消息队列的头部</span></div><div class="line">                    &#125;</div><div class="line">                    msg.next = <span class="keyword">null</span>;</div><div class="line">                    <span class="keyword">if</span> (<span class="keyword">false</span>) Log.v(<span class="string">"MessageQueue"</span>, <span class="string">"Returning message: "</span> + msg);</div><div class="line">                    msg.markInUse();</div><div class="line">                    <span class="keyword">return</span> msg;     <span class="comment">// 返回得到的消息对象</span></div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">// No more messages.</span></div><div class="line">                nextPollTimeoutMillis = -<span class="number">1</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Process the quit message now that all pending messages have been handled.</span></div><div class="line">            <span class="keyword">if</span> (mQuitting) &#123;</div><div class="line">                dispose();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt; <span class="number">0</span></div><div class="line">                        &amp;&amp; (mMessages == <span class="keyword">null</span> || now &lt; mMessages.when)) &#123;</div><div class="line">                    pendingIdleHandlerCount = mIdleHandlers.size();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (pendingIdleHandlerCount &lt;= <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">// No idle handlers to run.  Loop and wait some more.</span></div><div class="line">                mBlocked = <span class="keyword">true</span>;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">        . . . . . .</div><div class="line">        <span class="comment">// 处理idle handlers部分</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> IdleHandler idler = mPendingIdleHandlers[i];</div><div class="line">            mPendingIdleHandlers[i] = <span class="keyword">null</span>; <span class="comment">// release the reference to the handler</span></div><div class="line"></div><div class="line">            <span class="keyword">boolean</span> keep = <span class="keyword">false</span>;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                keep = idler.queueIdle();</div><div class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</div><div class="line">                Log.wtf(<span class="string">"MessageQueue"</span>, <span class="string">"IdleHandler threw exception"</span>, t);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!keep) &#123;</div><div class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</div><div class="line">                    mIdleHandlers.remove(idler);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        pendingIdleHandlerCount = <span class="number">0</span>;</div><div class="line">        nextPollTimeoutMillis = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注释已经很详细了，现在知道了哪里把消息取出来，但是还不知道消息是哪里处理的，接着上面的<code>loop()</code>方法的代码往下看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">msg.target.dispatchMessage(msg);</div></pre></td></tr></table></figure>
<p>这一行很关键，字面意思都可以看出来这里是分发消息，找到源码查看一下，之前说过msg.target就是与Message绑定的Handler，所以在Handler的源码里面找：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Handle system messages here.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dispatchMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (msg.callback != <span class="keyword">null</span>) &#123;</div><div class="line">            handleCallback(msg);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            handleMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码很简单，但是答案就快揭晓了，Handler通过post和sendMessage之类的方法把消息发出去，绕了一大圈又回到了Handler，先别激动，看看代码到底说了什么：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if (msg.callback != null) &#123;</div><div class="line">            handleCallback(msg);</div></pre></td></tr></table></figure>
<p>这里的<code>msg.callback</code>其实就是一个<code>Runnable</code>对象，可以通过查看Message源码发现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Same as &#123;<span class="doctag">@link</span> #obtain(Handler)&#125;, but assigns a callback Runnable on</div><div class="line">     * the Message that is returned.</div><div class="line">     * <span class="doctag">@param</span> h  Handler to assign to the returned Message object's &lt;em&gt;target&lt;/em&gt; member.</div><div class="line">     * <span class="doctag">@param</span> callback Runnable that will execute when the message is handled.</div><div class="line">     * <span class="doctag">@return</span> A Message object from the global pool.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Message <span class="title">obtain</span><span class="params">(Handler h, Runnable callback)</span> </span>&#123;</div><div class="line">        Message m = obtain();</div><div class="line">        m.target = h;</div><div class="line">        <span class="comment">//创建Message类时候系统建议使用Message msg=Message.obtain()；形式</span></div><div class="line">        m.callback = callback;</div><div class="line">        <span class="keyword">return</span> m;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>你想到了什么，在回想一遍我们使用Handler的两种方式，一种是<code>post(Runnable r)</code>的形式，一种是<code>sendMessage(Message msg)</code>形式，第一种方式刚好传递的就是一个<code>Runnable</code>对象，看一下这个<code>handleCallback(msg)</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private static void handleCallback(Message message) &#123;</div><div class="line">        message.callback.run();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单粗暴，走的就是<code>post(Runnable r)</code> 所传递参数的 <code>run()</code>方法，那么第二种形式呢：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mCallback != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (mCallback.handleMessage(msg)) &#123;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>这个<code>mCallback</code>是<code>Hanlder.Callback</code>类对象，这个<code>Callback</code>是<code>Handler</code>的内部的一个接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callback</span> </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这就对应了<code>sendMessage(Message msg)</code>的形式，到此，真相大白，这里还有一点要注意的是，ActivityThread也就是UI线程是自动调用了<code>Looper.loop()</code>方法的所以在主线程使用Handler是不需要再去调用了，但是在子线程中却是要自己调用的，否则不会进入MessageQueue，而且Handler不仅仅只有更新UI的作用，它是与所创建的线程所绑定的，所以可以使用它在主线程向子线程发送消息，反过来也一样，关于这点的使用详见 <a href="http://gqdy365.iteye.com/blog/2109453" target="_blank" rel="external"><strong>Android主线程.子线程通信（Thread+handler）</strong></a></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>从最开始的使用到从源码的角度去分析，写这篇博客花了很长的时间，最后做个总结： 在整个Android内部通信进程中，Handler机制如果捋顺了相互之间的关系的话其实不难理解，下面上一张图帮助理解： <img src="http://oasusatoz.bkt.clouddn.com/handler.png" alt="Handler机制"></p>
<p>套用一段很形象的话解释这幅图：</p>
<blockquote>
<p>我们可以把传送带上的货物看做是一个个的Message，而承载这些货物的传送带就是装载Message的消息队列MessageQueue。传送带是靠发送机滚轮带动起来转动的，我们可以把发送机滚轮看做是Looper，而发动机的转动是需要电源的，我们可以把电源看做是线程Thread，所有的消息循环的一切操作都是基于某个线程的。一切准备就绪，我们只需要按下电源开关发动机就会转动起来，这个开关就是Looper的loop方法，当我们按下开关的时候，我们就相当于执行了Looper的loop方法，此时Looper就会驱动着消息队列循环起来。</p>
<p>那Hanlder在传送带模型中相当于什么呢？我们可以将Handler看做是放入货物以及取走货物的管道：货物从一端顺着管道划入传送带，货物又从另一端顺着管道划出传送带。我们在传送带的一端放入货物的操作就相当于我们调用了Handler的sendMessageXXX、sendEmptyMessageXXX或postXXX方法，这就把Message对象放入到了消息队列MessageQueue中了。当货物从传送带的另一端顺着管道划出时，我们就相当于调用了Hanlder的dispatchMessage方法，在该方法中我们完成对Message的处理。</p>
</blockquote>
<p><a href="http://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="external"><strong>这段话出自</strong></a></p>
<h4 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h4><ul>
<li><a href="http://blog.csdn.net/iispring/article/details/47180325" target="_blank" rel="external">深入源码解析Android中的Handler,Message,MessageQueue,Looper</a></li>
<li><a href="http://blog.csdn.net/feiduclear_up/article/details/46817283" target="_blank" rel="external">从Handler+Message+Looper源码带你分析Android系统的消息处理机制</a></li>
<li><a href="http://blog.csdn.net/guolin_blog/article/details/9991569" target="_blank" rel="external">Android异步消息处理机制完全解析，带你从源码的角度彻底理解</a></li>
<li><a href="https://my.oschina.net/youranhongcha/blog/492591?_t=t" target="_blank" rel="external">聊一聊Android的消息机制</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;从注释看起&quot;&gt;&lt;a href=&quot;#从注释看起&quot; class=&quot;headerlink&quot; title=&quot;从注释看起&quot;&gt;&lt;/a&gt;从注释看起&lt;/h4&gt;&lt;p&gt;Hander的源码只有不到800行，而且大多数代码相对来说还是比较好理解的，尤其是相对于其他更加接近底层的代码来说，在看源码时候有一点挺重要的就是不要忽略注释的作用，Handler类开头有这么几行注释：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;p&amp;gt;There are two main uses &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a Handler: (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) to schedule messages and&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; runnables to be executed &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; some point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the future; and (&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) to enqueue&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; an action to be performed on a different thread than your own.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="Android" scheme="https:///www.limuyang.cc/tags/Android/"/>
    
      <category term="Handler" scheme="https:///www.limuyang.cc/tags/Handler/"/>
    
      <category term="源码分析" scheme="https:///www.limuyang.cc/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Handler机制从入门到放弃(一)</title>
    <link href="https:///www.limuyang.cc/2016/10/29/Handler%E6%9C%BA%E5%88%B6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83-%E4%B8%80/"/>
    <id>https:///www.limuyang.cc/2016/10/29/Handler机制从入门到放弃-一/</id>
    <published>2016-10-29T14:41:23.000Z</published>
    <updated>2017-02-17T10:58:14.740Z</updated>
    
    <content type="html"><![CDATA[<p>闲来无事，准备好好梳理一下Handler机制，之前分析过没有写成博客，结果就是慢慢的淡忘了，这次趁着刚分析完，赶紧写下来。</p>
<p>在开始分析之前先打打基础，理解理解什么是线程以及什么是Handler，这里大部分内容引用一篇来自伯乐在线的文章，因为看来看去关于基础的部分这个人已经说得很好了，我就负责把主要的部分抽取出来。</p>
<p>原文地址：<strong><a href="http://blog.jobbole.com/73267/" target="_blank" rel="external">Android线程和Handler基础入门</a></strong> <a id="more"></a></p>
<p>现在大多数的移动设备已经变得越来越快，但是它们其实也不算是非常快。如果你想让你的APP既可以承受一些繁杂的工作而又不影响用户体验的话，那么必须把任务并行执行。在Android上，我们使用线程。</p>
<h4 id="什么是线程？"><a href="#什么是线程？" class="headerlink" title="什么是线程？"></a>什么是线程？</h4><p>线程或者线程执行本质上就是一串命令（也是程序代码），然后我们把它发送给操作系统执行。</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/16-10-28/18731384.jpg" alt="线程"></p>
<p>一般来说，我们的CPU在任何时候一个核只能处理一个线程。多核处理器（目前大多数Android设备已经都是多核）顾名思义，就是可以同时处理多线程（通俗地讲就是可以同时处理多件事）。</p>
<h4 id="多核处理与单核多任务处理的实质"><a href="#多核处理与单核多任务处理的实质" class="headerlink" title="多核处理与单核多任务处理的实质"></a>多核处理与单核多任务处理的实质</h4><p>上面我说的是一般情况，并不是所有的描述都是一定正确的。因为单核也可以用多任务模拟出多线程。</p>
<p>每个运行在线程中的任务都可以分解成多条指令，而且这些指令不用同时执行。所以，单核设备可以首先切换到线程1去执行指令1A，然后切换到线程2去执行指令2A，接着返回到线程1再去执行1B、1C、1D，然后继续切换到线程2，执行2B、2C等等，以此类推。</p>
<p>这个线程之间的切换十分迅速，以至于在单核的设备中也会发生。几乎所有的线程都在相同的时间内进行任务处理。其实，这都是因为速度太快造成的假象，就像电影《黑客帝国》里的特工Brown一样，可以变幻出很多的头和手。</p>
<h4 id="Java核心里的线程"><a href="#Java核心里的线程" class="headerlink" title="Java核心里的线程"></a>Java核心里的线程</h4><p>在Java中，如果要想做平行任务处理的话，会在Runnable里面执行你的代码。可以继承Thread类，或者实现Runnable接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IAmAThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IAmAThread</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(<span class="string">"IAmAThread"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// your code (sequence of instructions)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// to execute this sequence of instructions in a separate thread.</span></div><div class="line"><span class="keyword">new</span> IAmAThread().start();</div><div class="line"></div><div class="line"><span class="comment">// 2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IAmARunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="comment">// your code (sequence of instructions)</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// to execute this sequence of instructions in a separate thread.</span></div><div class="line">IAmARunnable myRunnable = <span class="keyword">new</span> IAmARunnable();</div><div class="line"><span class="keyword">new</span> Thread(myRunnable).start();</div></pre></td></tr></table></figure>
<p>这两个方法基本上是一样的。第一个版本是创建一个Thread类，第二个版本是需要创建一个Runnable对象，然后也需要一个Thread类来调用它。</p>
<h4 id="Android上的线程"><a href="#Android上的线程" class="headerlink" title="Android上的线程"></a>Android上的线程</h4><p>无论何时启动APP，所有的组件都会运行在一个单独的线程中（默认的）—-叫做主线程。这个线程主要用于处理UI的操作并为视图组件和小部件分发事件等，因此主线程也被称作UI线程(Main Thread)。除了Main Thread之外的线程都可称为Worker Thread。Main Thread主要负责控制UI页面的显示、更新、交互等。 因此所有在UI线程中的操作要求越短越好，只有这样用户才会觉得操作比较流畅。一个比较好的做法是把一些比较耗时的操作，例如网络请求、数据库操作、 复杂计算等逻辑都封装到单独的线程，这样就可以避免阻塞主线程，这样就需要用到了Android的Handler机制。</p>
<p><strong>这里划重点：Handler负责与子线程进行通讯，从而让子线程与主线程之间建立起协作的桥梁，使Android的UI更新的问题得到完美的解决</strong></p>
<h4 id="怎么创建Handler"><a href="#怎么创建Handler" class="headerlink" title="怎么创建Handler"></a>怎么创建Handler</h4><p>既然Handler有这样的好处，那么看Handler怎么用，官方给出了两种方式创建一个Handler：</p>
<p>1、使用默认的构造方法：new Handler()。 2、使用带参的构造方法，参数是一个Runnable对象或者回调对象。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种方法</span></div><div class="line"><span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler();  </div><div class="line">   <span class="keyword">private</span> Runnable myRunnable= <span class="keyword">new</span> Runnable() &#123;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </div><div class="line">             <span class="comment">//一些耗时操作</span></div><div class="line">        &#125;  </div><div class="line">    &#125;;</div><div class="line"> <span class="comment">//其他地方调用</span></div><div class="line"> handler.post(xxx);</div><div class="line"> 这里就写一个post方法，实际上还有很多，诸如postDelayed、postAtTime</div><div class="line"><span class="comment">//第二种方法</span></div><div class="line">Handler myHandler = <span class="keyword">new</span> Handler() &#123;  </div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;   </div><div class="line">               <span class="keyword">switch</span> (msg.what) &#123;   </div><div class="line">                   <span class="comment">//根据参数进行操作</span></div><div class="line">                         <span class="keyword">break</span>;   </div><div class="line">               &#125;   </div><div class="line">               <span class="keyword">super</span>.handleMessage(msg);   </div><div class="line">          &#125;   </div><div class="line">     &#125;;  </div><div class="line">  <span class="comment">//其他地方调用</span></div><div class="line">myHandler.sendMessage(xxx);</div></pre></td></tr></table></figure>
<h4 id="如何使用Handler"><a href="#如何使用Handler" class="headerlink" title="如何使用Handler"></a>如何使用Handler</h4><p>这里使用一个简单的Demo来演示Handler的用法，界面偏简单就不贴了，直接贴代码，模拟的是点击Button执行下载，下载完成后更新UI。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Button</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView statusTextView = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        statusTextView = (TextView)findViewById(R.id.statusTextView);</div><div class="line">        Button btnDownload = (Button)findViewById(R.id.btnDownload);</div><div class="line">        btnDownload.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        DownloadThread downloadThread = <span class="keyword">new</span> DownloadThread();</div><div class="line">        downloadThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                System.out.println(<span class="string">"开始下载文件"</span>);</div><div class="line">                <span class="comment">//此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程</span></div><div class="line">                Thread.sleep(<span class="number">5000</span>);</div><div class="line">                System.out.println(<span class="string">"文件下载完成"</span>);</div><div class="line">                <span class="comment">//文件下载完成后更新UI</span></div><div class="line">                MainActivity.<span class="keyword">this</span>.statusTextView.setText(<span class="string">"文件下载完成"</span>);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照以前写Java的思路的话可能会这么写，但是运行程序时候会发现控制台报错：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.</div></pre></td></tr></table></figure>
<p>错误的意思是只有创建View的原始线程才能更新View。出现这样错误的原因是Android中的View不是线程安全的，下面给出合理的解释：</p>
<blockquote>
<p>因为UI访问是没有加锁的，在多个线程中访问UI是不安全的，如果有多个子线程都去更新UI，会导致界面不断改变而混乱不堪。所以最好的解决办法就是只有一个线程有更新UI的权限，所以这个时候就只能有一个线程振臂高呼：放开那女孩，让我来！那么最合适的人选只能是主线程。</p>
<p>来自—<a href="http://blog.csdn.net/lfdfhl/article/details/51279160" target="_blank" rel="external"><strong>Android中线程那些事</strong></a></p>
</blockquote>
<p>那么为了规避Android的这种机制，我们这里分别采用Handler的两种方式来实现上面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">A、使用post方式</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Button</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView statusTextView = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">//uiHandler在主线程中创建，所以自动绑定主线程</span></div><div class="line">    <span class="keyword">private</span> Handler uiHandler = <span class="keyword">new</span> Handler();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        statusTextView = (TextView)findViewById(R.id.statusTextView);</div><div class="line">        Button btnDownload = (Button)findViewById(R.id.btnDownload);</div><div class="line">        btnDownload.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        DownloadThread downloadThread = <span class="keyword">new</span> DownloadThread();</div><div class="line">        downloadThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                System.out.println(<span class="string">"开始下载文件"</span>);</div><div class="line">                <span class="comment">//此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程</span></div><div class="line">                Thread.sleep(<span class="number">5000</span>);</div><div class="line">                System.out.println(<span class="string">"文件下载完成"</span>);</div><div class="line">                <span class="comment">//文件下载完成后更新UI</span></div><div class="line">                Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                        MainActivity.<span class="keyword">this</span>.statusTextView.setText(<span class="string">"文件下载完成"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                uiHandler.post(runnable);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">B、使用sendMessage方式实现</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Button</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> TextView statusTextView = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="comment">//uiHandler在主线程中创建，所以自动绑定主线程</span></div><div class="line">    <span class="keyword">private</span> Handler uiHandler = <span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                    System.out.println(<span class="string">"msg.arg1:"</span> + msg.arg1);</div><div class="line">                    System.out.println(<span class="string">"msg.arg2:"</span> + msg.arg2);</div><div class="line">                    MainActivity.<span class="keyword">this</span>.statusTextView.setText(<span class="string">"文件下载完成"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        statusTextView = (TextView)findViewById(R.id.statusTextView);</div><div class="line">        Button btnDownload = (Button)findViewById(R.id.btnDownload);</div><div class="line">        btnDownload.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        System.out.println(<span class="string">"Main thread id "</span> + Thread.currentThread().getId());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        DownloadThread downloadThread = <span class="keyword">new</span> DownloadThread();</div><div class="line">        downloadThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                System.out.println(<span class="string">"开始下载文件"</span>);</div><div class="line">                <span class="comment">//此处让线程DownloadThread休眠5秒中，模拟文件的耗时过程</span></div><div class="line">                Thread.sleep(<span class="number">5000</span>);</div><div class="line">                System.out.println(<span class="string">"文件下载完成"</span>);</div><div class="line">                <span class="comment">//文件下载完成后更新UI</span></div><div class="line">                Message msg = <span class="keyword">new</span> Message();</div><div class="line">                <span class="comment">//虽然Message的构造函数式public的，我们也可以通过以下两种方式通过循环对象获取Message</span></div><div class="line">                <span class="comment">//msg = Message.obtain(uiHandler);</span></div><div class="line">                <span class="comment">//msg = uiHandler.obtainMessage();</span></div><div class="line"></div><div class="line">                <span class="comment">//what是我们自定义的一个Message的识别码，以便于在Handler的handleMessage方法中根据what识别</span></div><div class="line">                <span class="comment">//出不同的Message，以便我们做出不同的处理操作</span></div><div class="line">                msg.what = <span class="number">1</span>;</div><div class="line"></div><div class="line">                <span class="comment">//我们可以通过arg1和arg2给Message传入简单的数据</span></div><div class="line">                msg.arg1 = <span class="number">123</span>;</div><div class="line">                msg.arg2 = <span class="number">321</span>;</div><div class="line">                <span class="comment">//我们也可以通过给obj赋值Object类型传递向Message传入任意数据</span></div><div class="line">                <span class="comment">//msg.obj = null;</span></div><div class="line">                <span class="comment">//我们还可以通过setData方法和getData方法向Message中写入和读取Bundle类型的数据</span></div><div class="line">                <span class="comment">//msg.setData(null);</span></div><div class="line">                <span class="comment">//Bundle data = msg.getData();</span></div><div class="line">                <span class="comment">//将该Message发送给对应的Handler</span></div><div class="line">                uiHandler.sendMessage(msg);</div><div class="line">            &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码来自博客：<a href="http://blog.csdn.net/iispring/article/details/47115879" target="_blank" rel="external"><strong>Android中Handler的使用</strong></a></p>
<p>上面这两种形式都能达到我们的要求，在此不一一测验，注释写的很详细了，看到这里应该已经大致知道了如何使用Handler，但是我想我们应该远远不满足于此，下一篇博客将带着大家从源码一起看看Handler机制到底是怎么实现的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闲来无事，准备好好梳理一下Handler机制，之前分析过没有写成博客，结果就是慢慢的淡忘了，这次趁着刚分析完，赶紧写下来。&lt;/p&gt;
&lt;p&gt;在开始分析之前先打打基础，理解理解什么是线程以及什么是Handler，这里大部分内容引用一篇来自伯乐在线的文章，因为看来看去关于基础的部分这个人已经说得很好了，我就负责把主要的部分抽取出来。&lt;/p&gt;
&lt;p&gt;原文地址：&lt;strong&gt;&lt;a href=&quot;http://blog.jobbole.com/73267/&quot;&gt;Android线程和Handler基础入门&lt;/a&gt;&lt;/strong&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="Android" scheme="https:///www.limuyang.cc/tags/Android/"/>
    
      <category term="Handler" scheme="https:///www.limuyang.cc/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>人生苦短，我用Python--分分钟下载知乎美图给你看</title>
    <link href="https:///www.limuyang.cc/2016/08/11/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python-%E5%88%86%E5%88%86%E9%92%9F%E4%B8%8B%E8%BD%BD%E7%9F%A5%E4%B9%8E%E7%BE%8E%E5%9B%BE%E7%BB%99%E4%BD%A0%E7%9C%8B/"/>
    <id>https:///www.limuyang.cc/2016/08/11/人生苦短，我用Python-分分钟下载知乎美图给你看/</id>
    <published>2016-08-11T11:45:46.000Z</published>
    <updated>2016-08-18T11:56:21.115Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起"><a href="#起" class="headerlink" title="起"></a>起</h3><p>上次说了要爬知乎的图片，于是花了一下午的时间去完成这件事，发现暂时接触到的爬虫总是逃脱不了一个规律：</p>
<ul>
<li>模拟登陆</li>
<li>获取真实网页HTML源代码</li>
<li>解析获取到的网页源代码</li>
<li>获取想要的资源(下载到某个文件夹或者输出到表格中整合起来)</li>
</ul>
<p>也许和我说的有一些出入，应该是刚学这个东西的原因，接下来还想研究一下多线程爬虫、添加代理、爬取海量数据并整合成图表形式，先把能做的做了。</p>
<a id="more"></a>
<h3 id="承"><a href="#承" class="headerlink" title="承"></a>承</h3><p>因为是在上一次的基础上进行的，所以没有看<a href="http://www.limuyang.cc/2016/08/09/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python-%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%88%AC%E7%9F%A5%E4%B9%8E%E5%A8%98/" target="_blank" rel="external"><strong>上一篇文章</strong></a>的可以先看一下，这里用到的工具跟之前一样：</p>
<ul>
<li>win7 64位 旗舰版</li>
<li>Python 3.5 64-bit</li>
<li>PyCharm</li>
</ul>
<p>这里模拟登陆是跟之前一样的代码，直接贴就是：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">logn_url = <span class="string">'http://www.zhihu.com/#signin'</span></div><div class="line"></div><div class="line">session = requests.session()</div><div class="line"></div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</div><div class="line">&#125;</div><div class="line"></div><div class="line">content = session.get(logn_url, headers=headers).content</div><div class="line">soup = BeautifulSoup(content, <span class="string">'html.parser'</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getxsrf</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> soup.find(<span class="string">'input'</span>, attrs=&#123;<span class="string">'name'</span>: <span class="string">"_xsrf"</span>&#125;)[<span class="string">'value'</span>]</div><div class="line">    <span class="comment"># 获取验证码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha</span><span class="params">()</span>:</span></div><div class="line">    t = str(int(time.time() * <span class="number">1000</span>))</div><div class="line">    captcha_url = <span class="string">'http://www.zhihu.com/captcha.gif?r='</span> + t + <span class="string">"&amp;type=login"</span></div><div class="line">    r = session.get(captcha_url, headers=headers)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'captcha.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(r.content)</div><div class="line">        f.close()</div><div class="line">    <span class="comment"># 用pillow 的 Image 显示验证码</span></div><div class="line">    <span class="comment"># 如果没有安装 pillow 到源代码所在的目录去找到验证码然后手动输入</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        im = Image.open(<span class="string">'captcha.jpg'</span>)</div><div class="line">        im.show()</div><div class="line">        im.close()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">u'请到 %s 目录找到captcha.jpg 手动输入'</span> % os.path.abspath(<span class="string">'captcha.jpg'</span>))</div><div class="line">    captcha = input(<span class="string">"please input the captcha\n&gt;"</span>)</div><div class="line">    <span class="keyword">return</span> captcha</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">isLogin</span><span class="params">()</span>:</span></div><div class="line">    <span class="comment"># 通过查看用户个人信息来判断是否已经登录</span></div><div class="line">    url = <span class="string">"https://www.zhihu.com/settings/profile"</span></div><div class="line">    login_code = session.get(url, allow_redirects=<span class="keyword">False</span>).status_code</div><div class="line">    <span class="keyword">if</span> int(x=login_code) == <span class="number">200</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(secret, account)</span>:</span></div><div class="line">    <span class="comment"># 通过输入的用户名判断是否是手机号</span></div><div class="line">    <span class="keyword">if</span> re.match(<span class="string">r"^1\d&#123;10&#125;$"</span>, account):</div><div class="line">        print(<span class="string">"手机号登录 \n"</span>)</div><div class="line">        post_url = <span class="string">'http://www.zhihu.com/login/phone_num'</span></div><div class="line">        postdata = &#123;</div><div class="line">            <span class="string">'_xsrf'</span>: getxsrf(),</div><div class="line">            <span class="string">'password'</span>: secret,</div><div class="line">            <span class="string">'remember_me'</span>: <span class="string">'true'</span>,</div><div class="line">            <span class="string">'phone_num'</span>: account,</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        print(<span class="string">"邮箱登录 \n"</span>)</div><div class="line">        post_url = <span class="string">'http://www.zhihu.com/login/email'</span></div><div class="line">        postdata = &#123;</div><div class="line">            <span class="string">'_xsrf'</span>: getxsrf(),</div><div class="line">            <span class="string">'password'</span>: secret,</div><div class="line">            <span class="string">'remember_me'</span>: <span class="string">'true'</span>,</div><div class="line">            <span class="string">'email'</span>: account,</div><div class="line">        &#125;</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        <span class="comment"># 不需要验证码直接登录成功</span></div><div class="line">        login_page = session.post(post_url, data=postdata, headers=headers)</div><div class="line">        login_code = login_page.text</div><div class="line">        print(login_page.status)</div><div class="line">        print(login_code)</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        <span class="comment"># 需要输入验证码后才能登录成功</span></div><div class="line">        postdata[<span class="string">"captcha"</span>] = get_captcha()</div><div class="line">        login_page = session.post(post_url, data=postdata, headers=headers)</div><div class="line">        login_code = eval(login_page.text)</div><div class="line">        print(login_code[<span class="string">'msg'</span>])</div></pre></td></tr></table></figure>
<p>这里的代码来自GitHub上的<a href="https://github.com/xchaoinfo/fuck-login" target="_blank" rel="external"><strong>fuck-login</strong></a>项目，在此表示感谢，我在原始代码上进行了改进，原始代码是适配了Python2.x和Python3.x，但是我学的是Python3.x所以去掉了一些我没用过的模块，也就是说我改进了后的代码是适用于Python3.x的。</p>
<p>下面就是准备获取图片了，先找一个目标，最近有一个问题很火：</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/37709992" target="_blank" rel="external"><strong>长得好看，但没有男朋友是怎样的体验</strong></a></p>
</blockquote>
<p>还记得我列出来的步骤么，模拟登陆之后是获取真实的网页源代码，什么叫真实的，这个问题问得好，你没发现知乎很喜欢用动态加载技术么，也就是说，你看到的只是表象，这里也一样。</p>
<h3 id="转"><a href="#转" class="headerlink" title="转"></a>转</h3><p><img src="http://oasusatoz.bkt.clouddn.com/%E9%97%AE%E9%A2%98%E7%95%8C%E9%9D%A2.png" alt="问题界面"></p>
<p>来，我们先点开点赞数最高的妹子上传的图片：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/beauty.png" alt="Beauty"></p>
<p>咳咳咳，好像跑偏了，我们的目标是星辰大海，正确的做法是鼠标右键查看网页源代码：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E7%BD%91%E9%A1%B5%E6%BA%90%E4%BB%A3%E7%A0%81.png" alt="网页源代码"></p>
<p>是不是看到了很多图片链接，当然我们要找.jpg、.jpeg、.png后缀的：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">data-rawwidth</span>=<span class="string">"1632"</span> <span class="attr">data-rawheight</span>=<span class="string">"2040"</span> <span class="attr">src</span>=<span class="string">"//zhstatic.zhihu.com/assets/zhihu/ztext/whitedot.jpg"</span> <span class="attr">class</span>=<span class="string">"origin_image zh-lightbox-thumb lazy"</span> <span class="attr">width</span>=<span class="string">"1632"</span> <span class="attr">data-original</span>=<span class="string">"https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_r.jpg"</span> <span class="attr">data-actualsrc</span>=<span class="string">"https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_b.jpg"</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>这里有两个：<code>data-original</code>和<code>data-actualsrc</code>，实际查看的图片是<code>data-original</code>的图片比<code>data-actualsrc</code>的大，下载下来也是如此，但是因为是使用正则去匹配规则，而<code>data-original</code>有多项，上面代码只是贴出来的一部分，实际匹配的结果类似这样：</p>
<p>data-actualsrc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">data-actualsrc=&quot;https://pic2.zhimg.com/be7600989233bdf438e5ba23f2cdb685_b.jpg&quot;&gt;</div><div class="line">data-actualsrc=&quot;https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_b.jpg&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>data-original</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">data-original=&quot;https://pic2.zhimg.com/be7600989233bdf438e5ba23f2cdb685_r.jpg&quot;&gt;</div><div class="line">data-original=&quot;https://pic2.zhimg.com/be7600989233bdf438e5ba23f2cdb685_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/be7600989233bdf438e5ba23f2cdb685_b.jpg&quot;&gt;</div><div class="line">data-original=&quot;https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_r.jpg&quot;&gt;</div><div class="line">data-original=&quot;https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_r.jpg&quot; data-actualsrc=&quot;https://pic2.zhimg.com/b6274542f3785c27ab4a38d4db906efd_b.jpg&quot;&gt;</div><div class="line">data-original=&quot;https://pic2.zhimg.com/0930549116d22ffce22e98c32683d621_r.jpg&quot;&gt;</div></pre></td></tr></table></figure>
<p>这是在同一段网页源码测试下的结果，匹配后一种会得到多个相同的url地址，解析起来也更麻烦，这也跟正则写的简单有关系，有兴趣的可以到时候自己修改一下正则表达式，这样下下来的图片也更高清的多。</p>
<p>分析了正则，下面要获取所有的图片该分析Chrome开发者面板的Post数据，因为知乎默认只显示部分回答，我们可以不断往下拉，直到看到这个：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/more.png" alt="更多"></p>
<p>点击的时候注意观察开发者面板：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E6%9B%B4%E5%A4%9A%E6%97%B6%E4%BC%A0%E9%80%92%E7%9A%84%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE.png" alt="enter image description here"></p>
<p>简直完美，传递的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">method:next</div><div class="line">params:&#123;&quot;url_token&quot;:37709992,&quot;pagesize&quot;:10,&quot;offset&quot;:30&#125;</div></pre></td></tr></table></figure>
<p>很眼熟，<code>url_token</code>就是问题后面那串数字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://www.zhihu.com/question/37709992</div></pre></td></tr></table></figure>
<p><code>pagesize</code>是固定的10，最后一个<code>offset</code>偏移量同样很好理解，这里显示10应该说的就是默认显示的10个答案，后面还查看到如下数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">method:next</div><div class="line">params:&#123;&quot;url_token&quot;:37709992,&quot;pagesize&quot;:10,&quot;offset&quot;:20&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">method:next</div><div class="line">params:&#123;&quot;url_token&quot;:37709992,&quot;pagesize&quot;:10,&quot;offset&quot;:30&#125;</div></pre></td></tr></table></figure>
<p>也就是说我们在浏览器上每翻过10个答案浏览器就会向服务器发送Post请求在加载十个答案，恩差不多可以开始写代码了。</p>
<h3 id="合"><a href="#合" class="headerlink" title="合"></a>合</h3><p>模拟登陆之后的操作是找到Post的真实地址模拟浏览器向服务器发送请求：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">url = <span class="string">'https://www.zhihu.com/node/QuestionAnswerListV2'</span></div><div class="line">header = &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</div><div class="line">    <span class="string">'Referer'</span>: <span class="string">'https://www.zhihu.com/question/37709992'</span>,</div><div class="line">    <span class="string">'Origin'</span>: <span class="string">'https://www.zhihu.com'</span>,</div><div class="line">    <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, br'</span>,</div><div class="line">&#125;</div><div class="line">data = &#123;</div><div class="line">    <span class="string">'method'</span>: <span class="string">'next'</span>,</div><div class="line">    <span class="string">'params'</span>: <span class="string">'&#123;"url_token":'</span> + str(<span class="number">37709992</span>) + <span class="string">',"pagesize": "10",'</span> + \</div><div class="line">              <span class="string">'"offset":'</span> + str(offset) + <span class="string">"&#125;"</span>,</div><div class="line">    <span class="string">'_xsrf'</span>: getxsrf(),</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong></p>
<p>发送Post请求时候请加上<code>&#39;_xsrf&#39;: getxsrf()</code>这一行，否则的话返回的只会是<code>404 Forbidden</code>，应该是做了防伪登陆的缘故</p>
<p>然后是写正则，这里发现图片都是被包含在这里面：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zm-editable-content clearfix"</span>&gt;</span></div><div class="line">...</div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所以先匹配到这一大串内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pattern = re.compile(<span class="string">'&lt;a class="author-link".*?&lt;span title=.*?&lt;div class="zh-summary.*?'</span> +</div><div class="line">                     <span class="string">'&lt;div class="zm-editable-content.*?&gt;(.*?)&lt;/div&gt;'</span>, re.S)</div></pre></td></tr></table></figure>
<p>然后在匹配<code>data-actualsrc</code>里面的图片链接：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pattern = re.compile(<span class="string">'data-actualsrc="(.*?)"&gt;'</span>, re.S)</div></pre></td></tr></table></figure>
<p>还有一点要注意的是我们请求之后返回来的是json格式的数据，所以这里还要用到json模块：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">question = session.post(url, headers=header, data=data)</div><div class="line">dic = json.loads(question.content.decode(<span class="string">'ISO-8859-1'</span>))</div><div class="line">li = dic[<span class="string">'msg'</span>][<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>然后对其进行解析：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 这里使用的是第一个正则表达式</span></div><div class="line">items = re.findall(pattern, li)</div><div class="line"><span class="comment"># 接下来</span></div><div class="line">items = re.findall(pattern, li)</div><div class="line"><span class="comment"># 存储图片链接</span></div><div class="line">imagesurl = []</div><div class="line">pattern = re.compile(<span class="string">'data-actualsrc="(.*?)"&gt;'</span>, re.S)</div><div class="line"><span class="keyword">for</span> item <span class="keyword">in</span> items:</div><div class="line">    urls = re.findall(pattern, item)</div><div class="line">    imagesurl.extend(urls)</div></pre></td></tr></table></figure>
<p>执行下载操作：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 存放图片的地址</span></div><div class="line">PWD = <span class="string">"D:/work/python/zhihu/"</span></div><div class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> imagesurl:</div><div class="line">            myurl = url</div><div class="line">            filename = PWD + str(count) + <span class="string">'.jpg'</span></div><div class="line">            <span class="keyword">if</span> os.path.isfile(filename):</div><div class="line">                print(<span class="string">"文件存在："</span>, filename)</div><div class="line">                count += <span class="number">1</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">            <span class="comment"># 执行下载操作的方法</span></div><div class="line">                downpic(filename, myurl)</div><div class="line">                count += <span class="number">1</span></div><div class="line">                photoNum += <span class="number">1</span></div><div class="line">            print(<span class="string">"一共下载了&#123;0&#125; 张照片"</span>.format(photoNum))</div><div class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(PWD):</div><div class="line">                os.makedirs(PWD)</div><div class="line">                <span class="comment"># 递归调用</span></div><div class="line">        change(offset, count, photoNum)</div><div class="line"></div><div class="line"><span class="comment"># downpic方法源码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">downpic</span><span class="params">(filename, url)</span>:</span></div><div class="line">    print(<span class="string">"正在下载 "</span> + url)</div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        r = requests.get(url, stream=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">with</span> open(filename, <span class="string">'wb'</span>) <span class="keyword">as</span> fd:</div><div class="line">            <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content():</div><div class="line">                fd.write(chunk)</div><div class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</div><div class="line">        print(<span class="string">"下载失败了"</span>, e)</div></pre></td></tr></table></figure>
<p><strong>运行结果</strong></p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E4%B8%8B%E8%BD%BD%E7%BE%8E%E5%9B%BE.gif" alt="运行结果"></p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E5%9B%BE%E7%89%87.png" alt="结果"></p>
<p>这只是一部分，我之前下了四五百张还在下~当然这是后话，感觉现在写的东西都很简单，希望下一次能写出难一点的东西出来。</p>
<p>这里正则部分参考了这里：</p>
<blockquote>
<p><a href="http://blog.csdn.net/willib/article/details/51873259" target="_blank" rel="external"><strong>通过Python爬虫爬取知乎某个问题下的图片</strong></a></p>
</blockquote>
<p>最后是<a href="https://github.com/GiitSmile/downloadpic.py" target="_blank" rel="external"><strong>源码</strong></a></p>
<p>源码中注释部分只能下载前十个答案里包含的图片的方法，还有一些想法未完成，本来是想打印一下正在下载哪个答主的回答，然后把图片分别保存到相应的单独文件夹，实现起来有点麻烦就没去搞，仅供参考。</p>
<p>亲测如果需要下载另一个问题的答案，只需要在:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">data = &#123;</div><div class="line">       &apos;method&apos;: &apos;next&apos;,</div><div class="line">       &apos;params&apos;: &apos;&#123;&quot;url_token&quot;:&apos; + str(37709992) + &apos;,&quot;pagesize&quot;: &quot;10&quot;,&apos; + \</div><div class="line">                 &apos;&quot;offset&quot;:&apos; + str(offset) + &quot;&#125;&quot;,</div><div class="line">       &apos;_xsrf&apos;: getxsrf(),</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>更换那串数字就行，就好比这样的形式：</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/48720845" target="_blank" rel="external">https://www.zhihu.com/question/48720845</a></p>
</blockquote>
<p>但是这种形式的把数字换上去不起效：</p>
<blockquote>
<p><a href="https://www.zhihu.com/question/49078894#answer-41776282" target="_blank" rel="external">https://www.zhihu.com/question/49078894#answer-41776282</a></p>
</blockquote>
<p>这个好像是知乎热门问答的链接形式，暂时没有深究</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;起&quot;&gt;&lt;a href=&quot;#起&quot; class=&quot;headerlink&quot; title=&quot;起&quot;&gt;&lt;/a&gt;起&lt;/h3&gt;&lt;p&gt;上次说了要爬知乎的图片，于是花了一下午的时间去完成这件事，发现暂时接触到的爬虫总是逃脱不了一个规律：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;模拟登陆&lt;/li&gt;
&lt;li&gt;获取真实网页HTML源代码&lt;/li&gt;
&lt;li&gt;解析获取到的网页源代码&lt;/li&gt;
&lt;li&gt;获取想要的资源(下载到某个文件夹或者输出到表格中整合起来)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也许和我说的有一些出入，应该是刚学这个东西的原因，接下来还想研究一下多线程爬虫、添加代理、爬取海量数据并整合成图表形式，先把能做的做了。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https:///www.limuyang.cc/categories/Python/"/>
    
    
      <category term="知乎" scheme="https:///www.limuyang.cc/tags/%E7%9F%A5%E4%B9%8E/"/>
    
      <category term="爬虫" scheme="https:///www.limuyang.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="数据采集" scheme="https:///www.limuyang.cc/tags/%E6%95%B0%E6%8D%AE%E9%87%87%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>人生苦短，我用Python--一起来爬知乎娘</title>
    <link href="https:///www.limuyang.cc/2016/08/09/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python-%E4%B8%80%E8%B5%B7%E6%9D%A5%E7%88%AC%E7%9F%A5%E4%B9%8E%E5%A8%98/"/>
    <id>https:///www.limuyang.cc/2016/08/09/人生苦短，我用Python-一起来爬知乎娘/</id>
    <published>2016-08-09T11:14:46.000Z</published>
    <updated>2016-08-09T11:25:11.345Z</updated>
    
    <content type="html"><![CDATA[<p>上次爬了教务处的成绩，接下来想去爬一爬知乎娘，好像大家都很喜欢爬知乎娘，GitHub上貌似已经有人把获取各种知乎数据的操作封装好了：<a href="https://github.com/egrcc/zhihu-python" target="_blank" rel="external"><strong>zhihu-python</strong></a> ，但是良辰表示还是想自己试一试，我就爬点简单的，难度大的我也不会，我瞄准的是我自己关注的人的数据，差不多就这些东西：</p>
<blockquote>
<p>关注者 /  提问 /  回答 /  赞同</p>
</blockquote>
<p>那么下面开始分析，要拿到这个数据肯定是要先登陆的，那么先找到登陆界面：<br><a id="more"></a></p>
<p><img src="http://oasusatoz.bkt.clouddn.com/zhihu.png" alt="登陆界面"></p>
<p>这算是比较正常的界面，不知道为什么有的时候会出现新的验证码形式：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E5%80%92%E7%AB%8B%E7%9A%84%E6%96%87%E5%AD%97.png" alt="输入倒立的文字"></p>
<p>这种形式登陆的话我看传递的表单数据是你鼠标点击的坐标，这种情况暂时不知道怎么办，留给高手，我们分析上面那种，知乎登陆分为手机号登陆或者邮箱登陆，先试试邮箱登陆，查看Post数据：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E9%82%AE%E7%AE%B1%E7%99%BB%E9%99%86.png" alt="邮箱登陆"></p>
<p>然后是手机号登陆的:</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E6%89%8B%E6%9C%BA%E5%8F%B7%E7%99%BB%E9%99%86.png" alt="手机号登陆"></p>
<p>现在理一下思路，我们要登录知乎要传递的数据如下：</p>
<ul>
<li>_xsrf() 用于防伪登陆</li>
<li>password</li>
<li>captcha 验证码</li>
<li>phone_num/email  不同登陆方式传递的东西不同</li>
</ul>
<p>phone_num/email以及passsword都需要自己输入，这个好办，我们需要解决如何获取 _xsrf和captcha 的问题，先解决 _xsrf，这个更简单一点，我们在知乎<a href="http://www.zhihu.com/#signin" target="_blank" rel="external"><strong>登陆页面</strong></a> 右键查看网页源代码，直接搜_xsrf：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view view-signin"</span> <span class="attr">data-za-module</span>=<span class="string">"SignInForm"</span>&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"_xsrf"</span> <span class="attr">value</span>=<span class="string">"cf1ee28f15cea5dba3243a1c31a1b284"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"group-inputs"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>我们要做的就是解析出这个元素，直接上代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">logn_url = <span class="string">'http://www.zhihu.com/#signin'</span></div><div class="line">session = requests.session()</div><div class="line">headers = &#123;</div><div class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</div><div class="line">&#125;</div><div class="line">content = session.get(logn_url, headers=headers).content</div><div class="line">soup = BeautifulSoup(content, <span class="string">'html.parser'</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getxsrf</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">return</span> soup.find(<span class="string">'input'</span>, attrs=&#123;<span class="string">'name'</span>: <span class="string">"_xsrf"</span>&#125;)[<span class="string">'value'</span>]</div></pre></td></tr></table></figure>
<p>下面获取验证码， 我发现无论是使用哪一种登陆方式，Chrome的开发者面板都会有这么一行：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E9%AA%8C%E8%AF%81%E7%A0%81.png" alt="验证码请求"></p>
<p>当我把这个Request URL输入浏览器中就会转到这个验证码图片的界面，说明这个验证码是我们加载这个页面时候，浏览器向服务器发出请求然后下载下来的，那么现在我们有了URL地址：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E9%AA%8C%E8%AF%81%E7%A0%81GET%E8%AF%B7%E6%B1%82.png" alt="获取验证码"></p>
<p>这还是一个GET请求，这里注意这个传递的r参数是会不断变化的，这是一个当前Unix的时间戳，知道了这些可以着手获取验证码然后让用户自己输入：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"><span class="keyword">except</span>:</div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="comment"># 获取验证码</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_captcha</span><span class="params">()</span>:</span></div><div class="line">    t = str(int(time.time() * <span class="number">1000</span>))</div><div class="line">    captcha_url = <span class="string">'http://www.zhihu.com/captcha.gif?r='</span> + t + <span class="string">"&amp;type=login"</span></div><div class="line">    r = session.get(captcha_url, headers=headers)</div><div class="line">    <span class="keyword">with</span> open(<span class="string">'captcha.jpg'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">        f.write(r.content)</div><div class="line">        f.close()</div><div class="line">    <span class="comment"># 用pillow 的 Image 显示验证码</span></div><div class="line">    <span class="comment"># 如果没有安装 pillow 到源代码所在的目录去找到验证码然后手动输入</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        im = Image.open(<span class="string">'captcha.jpg'</span>)</div><div class="line">        im.show()</div><div class="line">        im.close()</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        print(<span class="string">u'请到 %s 目录找到captcha.jpg 手动输入'</span> % os.path.abspath(<span class="string">'captcha.jpg'</span>))</div><div class="line">    captcha = input(<span class="string">"please input the captcha\n&gt;"</span>)</div><div class="line">    <span class="keyword">return</span> captcha</div></pre></td></tr></table></figure>
<p>这里获取验证码的代码来自GitHub上的<a href="https://github.com/xchaoinfo/fuck-login" target="_blank" rel="external"><strong>fuck-login</strong></a>项目，在此表示感谢，接下里就是写一个方法判断用户是使用了哪一种登陆方式，然后传递相应的数据：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">def login(secret, account):</div><div class="line">    # 通过输入的用户名判断是否是手机号</div><div class="line">    if re.match(r&quot;^1\d&#123;10&#125;$&quot;, account):</div><div class="line">        print(&quot;手机号登录 \n&quot;)</div><div class="line">        post_url = &apos;http://www.zhihu.com/login/phone_num&apos;</div><div class="line">        postdata = &#123;</div><div class="line">            &apos;_xsrf&apos;: getxsrf(),</div><div class="line">            &apos;password&apos;: secret,</div><div class="line">            &apos;remember_me&apos;: &apos;true&apos;,</div><div class="line">            &apos;phone_num&apos;: account,</div><div class="line">        &#125;</div><div class="line">    else:</div><div class="line">        print(&quot;邮箱登录 \n&quot;)</div><div class="line">        post_url = &apos;http://www.zhihu.com/login/email&apos;</div><div class="line">        postdata = &#123;</div><div class="line">            &apos;_xsrf&apos;: getxsrf(),</div><div class="line">            &apos;password&apos;: secret,</div><div class="line">            &apos;remember_me&apos;: &apos;true&apos;,</div><div class="line">            &apos;email&apos;: account,</div><div class="line">        &#125;</div><div class="line">    try:</div><div class="line">        # 不需要验证码直接登录成功</div><div class="line">        login_page = session.post(post_url, data=postdata, headers=headers)</div><div class="line">        login_code = login_page.text</div><div class="line">        print(login_page.status)</div><div class="line">        print(login_code)</div><div class="line">    except:</div><div class="line">        # 需要输入验证码后才能登录成功</div><div class="line">        postdata[&quot;captcha&quot;] = get_captcha()</div><div class="line">        login_page = session.post(post_url, data=postdata, headers=headers)</div><div class="line">        login_code = eval(login_page.text)</div><div class="line">        print(login_code[&apos;msg&apos;])</div><div class="line"></div><div class="line"># 这部分代码同样来自[**fuck-login**](https://github.com/xchaoinfo/fuck-login)项目,我偷了很多懒,囧</div></pre></td></tr></table></figure>
<p>这个时候判断是否登陆成功可以随便查看一个页面发送GET请求看是否返回200，这里就不多说，接下来才是关键，为了获取我关注的人的信息，先打开开发者面板，这个地方打钩：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E6%89%93%E9%92%A9.png" alt="记得打钩"></p>
<p>因为网页有时候会跳转，这里打钩之后新跳转的页面的信息就不会覆盖之前接受到的信息，然后找到我关注的人，URL地址是：</p>
<blockquote>
<p><a href="https://www.zhihu.com/people/GitSmile/followees" target="_blank" rel="external">https://www.zhihu.com/people/GitSmile/followees</a></p>
</blockquote>
<p>最开始我走了弯路，我以为直接在这个页面解析出我关注的人的信息就行，所以一开始我是这么做的，查看网页源代码，这里随便找一个我关注的人的信息：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"死者代言人"</span></span></div><div class="line"><span class="attr">data-hovercard</span>=<span class="string">"p$t$forensic"</span></div><div class="line"><span class="attr">class</span>=<span class="string">"zm-item-link-avatar"</span></div><div class="line"><span class="attr">href</span>=<span class="string">"/people/forensic"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://pic1.zhimg.com/be39d110759e68f389b7d2934d7353bc_m.jpg"</span> <span class="attr">class</span>=<span class="string">"zm-item-img-avatar"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zm-list-content-medium"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"zm-list-content-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-hovercard</span>=<span class="string">"p$t$forensic"</span> <span class="attr">href</span>=<span class="string">"https://www.zhihu.com/people/forensic"</span> <span class="attr">class</span>=<span class="string">"zg-link author-link"</span> <span class="attr">title</span>=<span class="string">"死者代言人"</span></span></div><div class="line">&gt;死者代言人<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon icon-badge-best_answerer icon-badge"</span> <span class="attr">data-tooltip</span>=<span class="string">"s$b$优秀回答者"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ellipsis"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge-summary"</span>&gt;</span>优秀回答者<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bio"</span>&gt;</span>不养喵的爱喵法医。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"details zg-gray"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/forensic/followers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>35968 关注者<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/forensic/asks"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>2 提问<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/forensic/answers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>305 回答<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/forensic"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>51278 赞同<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在对比另一条：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">title</span>=<span class="string">"陈亦飘"</span></span></div><div class="line"><span class="attr">data-hovercard</span>=<span class="string">"p$t$chen-yi-piao"</span></div><div class="line"><span class="attr">class</span>=<span class="string">"zm-item-link-avatar"</span></div><div class="line"><span class="attr">href</span>=<span class="string">"/people/chen-yi-piao"</span>&gt;</div><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://pic2.zhimg.com/d495751efbf837b1b5b08571add7df3d_m.jpg"</span> <span class="attr">class</span>=<span class="string">"zm-item-img-avatar"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zm-list-content-medium"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"zm-list-content-title"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">data-hovercard</span>=<span class="string">"p$t$chen-yi-piao"</span> <span class="attr">href</span>=<span class="string">"https://www.zhihu.com/people/chen-yi-piao"</span> <span class="attr">class</span>=<span class="string">"zg-link author-link"</span> <span class="attr">title</span>=<span class="string">"陈亦飘"</span></span></div><div class="line">&gt;陈亦飘<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ellipsis"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"bio"</span>&gt;</span>音乐和电影是我的爱与慈悲<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"details zg-gray"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/followers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>74469 关注者<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/asks"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>0 提问<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/answers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>80 回答<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>315971 赞同<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>要分解出这些元素，只要找出他们的共同点，当时机智如我一眼就发现每一个我关注的人的名字都有这么一行元素：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class=&quot;zm-item-link-avatar&quot;</div></pre></td></tr></table></figure>
<p>而且都包含在一个<code>&lt;a&gt;&lt;/a&gt;</code>标签里面，这就好办了，使用<code>BeautifulSoup</code>先分解出每一个我关注的人的名字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">def getdetial():</div><div class="line">    followees_url = &apos;https://www.zhihu.com/people/GitSmile/followees&apos;</div><div class="line">    followees_headers = &#123;</div><div class="line">        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36&apos;,</div><div class="line">        &apos;Referer&apos;: &apos;https://www.zhihu.com/people/GitSmile/about&apos;,</div><div class="line">        &apos;Upgrade-Insecure-Requests&apos;: &apos;1&apos;,</div><div class="line">        &apos;Accept-Encoding&apos;: &apos;gzip, deflate, sdch, br&apos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    myfollowees = session.get(followees_url, headers=followees_headers)</div><div class="line">    mysoup = BeautifulSoup(myfollowees.content, &apos;html.parser&apos;)</div><div class="line">    print(mysoup.find(&apos;span&apos;, attrs=&#123;&apos;class&apos;: &apos;zm-profile-section-name&apos;&#125;).text)</div></pre></td></tr></table></figure>
<p>然后继续观察，突破点依然在这个<code>&lt;a&gt;&lt;/a&gt;</code>标签，拿”陈亦飘”的信息做个例子，看官们看这里面是不是有个<code>href=&quot;/people/chen-yi-piao</code>，然后看一下她的相关信息：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/followers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>74469 关注者<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/asks"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>0 提问<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao/answers"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>80 回答<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">/</div><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"/people/chen-yi-piao"</span> <span class="attr">class</span>=<span class="string">"zg-link-gray-normal"</span>&gt;</span>315971 赞同<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>发现没有，每一个信息里面的href元素都是我们最开始看到的<code>/people/chen-yi-piao</code>元素加上一些字符串组成的，那么我就可以在这上面做点文章：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">获取详细信息</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">getdetial</span><span class="params">()</span>:</span></div><div class="line">    followees_url = <span class="string">'https://www.zhihu.com/people/GitSmile/followees'</span></div><div class="line">    followees_headers = &#123;</div><div class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</div><div class="line">        <span class="string">'Referer'</span>: <span class="string">'https://www.zhihu.com/people/GitSmile/about'</span>,</div><div class="line">        <span class="string">'Upgrade-Insecure-Requests'</span>: <span class="string">'1'</span>,</div><div class="line">        <span class="string">'Accept-Encoding'</span>: <span class="string">'gzip, deflate, sdch, br'</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    myfollowees = session.get(followees_url, headers=followees_headers)</div><div class="line">    mysoup = BeautifulSoup(myfollowees.content, <span class="string">'html.parser'</span>)</div><div class="line">    print(mysoup.find(<span class="string">'span'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'zm-profile-section-name'</span>&#125;).text)</div><div class="line">    <span class="keyword">for</span> result <span class="keyword">in</span> mysoup.findAll(<span class="string">'a'</span>, attrs=&#123;<span class="string">'class'</span>: <span class="string">'zm-item-link-avatar'</span>&#125;):</div><div class="line">        print(result.get(<span class="string">'title'</span>))</div><div class="line">        <span class="comment"># 解析出href元素信息</span></div><div class="line">        href = str(result.get(<span class="string">'href'</span>))</div><div class="line">        <span class="comment"># 关注者</span></div><div class="line">        print(mysoup.find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'href'</span>: href + <span class="string">'/followers'</span>&#125;).text)</div><div class="line">        <span class="comment"># 提问</span></div><div class="line">        print(mysoup.find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'href'</span>: href + <span class="string">'/asks'</span>&#125;).text)</div><div class="line">        <span class="comment"># 回答</span></div><div class="line">        print(mysoup.find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'href'</span>: href + <span class="string">'/answers'</span>&#125;).text)</div><div class="line">        <span class="comment"># 赞同</span></div><div class="line">        print(mysoup.find(<span class="string">'a'</span>, attrs=&#123;<span class="string">'href'</span>: href, <span class="string">'class'</span>: <span class="string">'zg-link-gray-normal'</span>&#125;).text + <span class="string">'\n'</span>)</div></pre></td></tr></table></figure>
<p>上面的代码应该很简单了，看一看就能看懂，然后就我信心满满地在PyCharm上输出的时候，发现来来回回只输出20条信息，也就是说，我关注了26人，但是控制台只输出了20个人的信息，然后我就上网查，发现不止一个人有我这样的疑问，当然也多亏了前人踩坑，网上给出来的答案是知乎获取关注的人的时候使用了AJAX技术，也就是动态加载，但是这一部分代码不会再网页Html代码中显示出来，所以为了获取其他关注的人的信息我这里要另辟蹊径。</p>
<p>然后我翻看我关注的人的信息的时候，在开发者面板抓到这么一条POST信息：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E6%88%91%E5%85%B3%E6%B3%A8%E7%9A%84%E4%BA%BA.png" alt="抓取到的Post信息"></p>
<p>这条POST之后下面刷出来的图片是我关注的人的头像并且这些头像在我之前看到的20条数据里面是没有的，加上我总共就关注了27个人，所以我有理由相信这个Post就是浏览器向服务器发送请求的Post，看一下Post的信息：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/ajax%E8%A1%A8%E5%8D%95.png" alt="查看Post信息"></p>
<p>一个偏移量(offset)，一个哈希值(hash_id)外加一个”order_by”:”created”的键值对，这里偏移量很好理解，这个”hash_id”据我多次登陆发现是一个不变的值，或者说每一台电脑或许精确一点每一个浏览器都会有这么一个给定的值，照抄，那么改进后的代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"># 获取所有关注的人的信息</div><div class="line">def getallview():</div><div class="line">    nums = 27  # 这个是我关注的人数</div><div class="line">    followees_headers = &#123;</div><div class="line">        &apos;User-Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36&apos;,</div><div class="line">        &apos;Referer&apos;: &apos;https://www.zhihu.com/people/GitSmile/followees&apos;,</div><div class="line">        &apos;Origin&apos;: &apos;https://www.zhihu.com&apos;,</div><div class="line">        &apos;Accept-Encoding&apos;: &apos;gzip, deflate, br&apos;,</div><div class="line">        &apos;CG - Sid&apos;: &apos;57226ad5 - 793b - 4a9d - 9791 - 2a9a17e682ef&apos;,</div><div class="line">        &apos;Accept&apos;: &apos;* / *&apos;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    # 序号</div><div class="line">    count = 0</div><div class="line">    for index in range(0, nums):</div><div class="line">        fo_url = &apos;https://www.zhihu.com/node/ProfileFolloweesListV2&apos;</div><div class="line">        m_data = &#123;</div><div class="line">            &apos;method&apos;: &apos;next&apos;,</div><div class="line">            &apos;params&apos;: &apos;&#123;&quot;offset&quot;:&apos; + str(</div><div class="line">                index) + &apos;,&quot;order_by&quot;:&quot;created&quot;,&quot;hash_id&quot;:&quot;de2cb64bc1afe59cf8a6e456ee5eaebc&quot;&#125;&apos;,</div><div class="line">            &apos;_xsrf&apos;: str(getxsrf())</div><div class="line">        &#125;</div><div class="line">        result = session.post(fo_url, data=m_data, headers=followees_headers)</div><div class="line">        dic = json.loads(result.content.decode(&apos;utf-8&apos;))</div><div class="line">        li = dic[&apos;msg&apos;][0]</div><div class="line">        mysoup = BeautifulSoup(li, &apos;html.parser&apos;)</div><div class="line">        for result in mysoup.findAll(&apos;a&apos;, attrs=&#123;&apos;class&apos;: &apos;zm-item-link-avatar&apos;&#125;):</div><div class="line">            print(index + 1)</div><div class="line">            print(result.get(&apos;title&apos;))</div><div class="line">            href = str(result.get(&apos;href&apos;))</div><div class="line">            print(mysoup.find(&apos;a&apos;, attrs=&#123;&apos;href&apos;: href + &apos;/followers&apos;&#125;).text)</div><div class="line">            print(mysoup.find(&apos;a&apos;, attrs=&#123;&apos;href&apos;: href + &apos;/asks&apos;&#125;).text)</div><div class="line">            print(mysoup.find(&apos;a&apos;, attrs=&#123;&apos;href&apos;: href + &apos;/answers&apos;&#125;).text)</div><div class="line">            print(mysoup.find(&apos;a&apos;, attrs=&#123;&apos;href&apos;: href, &apos;class&apos;: &apos;zg-link-gray-normal&apos;&#125;).text + &apos;\n&apos;)</div><div class="line">            count += 1</div><div class="line">    print(&apos;一共关注了 %d人&apos; % count)</div></pre></td></tr></table></figure>
<p>放上程序的入口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line"></div><div class="line">    if isLogin():</div><div class="line">        print(&apos;您已经登录&apos;)</div><div class="line">    else:</div><div class="line">        account = input(&apos;请输入你的用户名\n&gt;  &apos;)</div><div class="line">        secret = input(&quot;请输入你的密码\n&gt;  &quot;)</div><div class="line">        login(secret, account)</div><div class="line">    getallview()</div></pre></td></tr></table></figure>
<p>看一下实际效果：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E7%99%BB%E9%99%86%E7%9F%A5%E4%B9%8E%E6%95%88%E6%9E%9C.gif" alt="结果"></p>
<p><strong>写在结尾</strong></p>
<p>虽然简单，但是提供了一些初学者的思路，下一次准备爬一些知乎上的图片，好像很多人都热衷于这种事，嘻嘻，荆轲刺秦王。</p>
<p><a href="https://github.com/GiitSmile/loginzhihu.py/blob/master/loginzhihu.py" target="_blank" rel="external">源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上次爬了教务处的成绩，接下来想去爬一爬知乎娘，好像大家都很喜欢爬知乎娘，GitHub上貌似已经有人把获取各种知乎数据的操作封装好了：&lt;a href=&quot;https://github.com/egrcc/zhihu-python&quot;&gt;&lt;strong&gt;zhihu-python&lt;/strong&gt;&lt;/a&gt; ，但是良辰表示还是想自己试一试，我就爬点简单的，难度大的我也不会，我瞄准的是我自己关注的人的数据，差不多就这些东西：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关注者 /  提问 /  回答 /  赞同&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么下面开始分析，要拿到这个数据肯定是要先登陆的，那么先找到登陆界面：&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https:///www.limuyang.cc/categories/Python/"/>
    
    
      <category term="知乎" scheme="https:///www.limuyang.cc/tags/%E7%9F%A5%E4%B9%8E/"/>
    
      <category term="爬虫" scheme="https:///www.limuyang.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="网络" scheme="https:///www.limuyang.cc/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>人生苦短，我用Python--爬虫模拟登陆教务处并且保存数据到本地</title>
    <link href="https:///www.limuyang.cc/2016/08/04/%E4%BA%BA%E7%94%9F%E8%8B%A6%E7%9F%AD%EF%BC%8C%E6%88%91%E7%94%A8Python-%E7%88%AC%E8%99%AB%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86%E6%95%99%E5%8A%A1%E5%A4%84%E5%B9%B6%E4%B8%94%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE%E5%88%B0%E6%9C%AC%E5%9C%B0/"/>
    <id>https:///www.limuyang.cc/2016/08/04/人生苦短，我用Python-爬虫模拟登陆教务处并且保存数据到本地/</id>
    <published>2016-08-04T11:26:46.000Z</published>
    <updated>2016-08-09T11:38:57.663Z</updated>
    
    <content type="html"><![CDATA[<p>刚开始接触Python，看很多人玩爬虫我也想玩，找来找去发现很多人用网络爬虫干的第一件事就是模拟登陆，增加点难度就是模拟登陆后在获取数据，但是网上好少有Python 3.x的模拟登陆Demo可以参考，加上自己也不怎么懂HTML，所以这第一个Python爬虫写的异常艰难，不过最终结果还是尽如人意的，下面把这次学习的过程整理一下。<br><a id="more"></a><br><strong>工具</strong></p>
<ul>
<li>系统：win7  64位系统</li>
<li>浏览器：Chrome</li>
<li>Python版本：Python 3.5 64-bit</li>
<li>IDE：JetBrains PyCharm (貌似很多人都用这个)</li>
</ul>
<p>我把目标瞄准了我们的教务处，这次爬虫的目的是从教务处获取成绩并且把成绩输入Excel表格中保存起来，</p>
<p>我们学校教务处的地址是：<a href="http://jwc.ecjtu.jx.cn/" target="_blank" rel="external">http://jwc.ecjtu.jx.cn/</a> ，往常每次我们获取成绩都需要先进入教务处，然后点击成绩查询，输入公共的账号密码进入，最后输入相关信息获取成绩表格，这里登陆不需要验证码省了我一番功夫，这样我们先进入成绩查询系统登陆界面，先看看怎么模拟登陆这个过程，在Chrome浏览器下按F12打开开发者面板：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E7%99%BB%E9%99%86%E7%95%8C%E9%9D%A2%E6%89%93%E5%BC%80%E5%BC%80%E5%8F%91%E8%80%85%E9%9D%A2%E6%9D%BF.png" alt="开发者面板"></p>
<p>这里我们学校的教务处查询系统的密码是公共的jwc也就是拼音缩写，我们输入用户名和密码点击登陆，这时候注意POST请求：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E7%99%BB%E9%99%86%E6%8A%93%E5%8F%96%E5%8A%A8%E7%94%BB.gif" alt="注意post请求"></p>
<p>发现了什么，好像Chrome并没有把Post提交的表单信息保留下来直接跳转到了另一个界面然后展示另一个界面的数据，这里就需要我们自己动手操作一下，注意开发者面板左上角的小红点表示这时候正在抓取数据，如果点击一下就会变成灰色，就可以变相地保存下当时抓取到的包，我在点击登陆后新界面未刷新出来之前点击了这个小红点，如愿以偿的得到了Post的表单数据：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E6%8A%93%E5%8F%96%E7%99%BB%E9%99%86%E8%A1%A8%E5%8D%95.gif" alt="得到post表单数据"></p>
<p>这样就获取了浏览器在登陆时候向服务器传递的表单数据，看一下这个表单都有些什么：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E7%99%BB%E9%99%86%E8%A1%A8%E5%8D%95.png" alt="查看表单数据"></p>
<p>这里看到我们需要传递三个参数，分别是：user、pass、Submit，可以很容易的理解这几个单词的字面意思，这样有了思路，我们就可以写出这次代码的第一步：<strong>模拟登陆教务处</strong></p>
<p>直接上代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line">url = <span class="string">'http://jwc.ecjtu.jx.cn/mis_o/login.php'</span></div><div class="line">datas = &#123;<span class="string">'user'</span>: <span class="string">'jwc'</span>,</div><div class="line">         <span class="string">'pass'</span>: <span class="string">'jwc'</span>,</div><div class="line">         <span class="string">'Submit'</span>: <span class="string">'%CC%E1%BD%BB'</span></div><div class="line">         &#125;</div><div class="line">headers = &#123;<span class="string">'Referer'</span>: <span class="string">'http://jwc.ecjtu.jx.cn/mis_o/login.htm'</span>,</div><div class="line">           <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 '</span></div><div class="line">                         <span class="string">'(KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</div><div class="line">           <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</div><div class="line">           <span class="string">'Accept-Language'</span>: <span class="string">'zh-CN,zh;q=0.8'</span>,</div><div class="line">           &#125;</div><div class="line">sessions = requests.session()</div><div class="line">response = sessions.post(url, headers=headers, data=datas)</div><div class="line">print(response.status_code)</div></pre></td></tr></table></figure>
<p>代码输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">200</div></pre></td></tr></table></figure>
<p>说明我们模拟登陆成功了，这里用到了Requests模块，还不会使用的可以查看<a href="http://docs.python-requests.org/zh_CN/latest/user/quickstart.html#cookie" target="_blank" rel="external">中文文档</a> ，它给自己的定义是：HTTP for Humans，因为简单易用易上手，我们只需要传入Url地址，构造请求头，传入post方法需要的数据，就可以模拟浏览器登陆了，这里因为有进一步获取成绩的操作所以使用了session来保持连接，这里单看最后的返回码的话我们是成功了的，具体如何还要看下一步操作，接下来：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/search.png" alt="抓包"></p>
<p>这里为了简便代码我们设定输入学号查询所有成绩，减少其他判断，同样对Post数据进行抓包：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E6%88%90%E7%BB%A9%E6%9F%A5%E8%AF%A2.png" alt="对post数据抓包"></p>
<p>同样查看Post的数据：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/querrypos.png" alt="查看post数据"></p>
<p>因为这里就分析输入学号的情况所以其他都为空，这样我们就可以写出查询成绩的代码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">score_healders = &#123;<span class="string">'Connection'</span>: <span class="string">'keep-alive'</span>,</div><div class="line">                  <span class="string">'User - Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) '</span></div><div class="line">                                  <span class="string">'AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36'</span>,</div><div class="line">                  <span class="string">'Content - Type'</span>: <span class="string">'application / x - www - form - urlencoded'</span>,</div><div class="line">                  <span class="string">'Accept'</span>: <span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</div><div class="line">                  <span class="string">'Content - Length'</span>: <span class="string">'69'</span>,</div><div class="line">                  <span class="string">'Host'</span>: <span class="string">'jwc.ecjtu.jx.cn'</span>,</div><div class="line">                  <span class="string">'Referer'</span>: <span class="string">'http: // jwc.ecjtu.jx.cn / mis_o / main.php'</span>,</div><div class="line">                  <span class="string">'Upgrade - Insecure - Requests'</span>: <span class="string">'1'</span>,</div><div class="line">                  <span class="string">'Accept - Language'</span>: <span class="string">'zh - CN, zh;q = 0.8'</span></div><div class="line">                  &#125;</div><div class="line">score_url = <span class="string">'http://jwc.ecjtu.jx.cn/mis_o/query.php?start='</span> + str(</div><div class="line">    pagenum) + <span class="string">'&amp;job=see&amp;=&amp;Name=&amp;Course=&amp;ClassID=&amp;Term=&amp;StuID='</span> + num</div><div class="line">score_data = &#123;<span class="string">'Name'</span>: <span class="string">''</span>,</div><div class="line">              <span class="string">'StuID'</span>: num,</div><div class="line">              <span class="string">'Course'</span>: <span class="string">''</span>,</div><div class="line">              <span class="string">'Term'</span>: <span class="string">''</span>,</div><div class="line">              <span class="string">'ClassID'</span>: <span class="string">''</span>,</div><div class="line">              <span class="string">'Submit'</span>: <span class="string">'%B2%E9%D1%AF'</span></div><div class="line">              &#125;</div><div class="line"></div><div class="line">score_response = sessions.post(score_url, data=score_data, headers=score_healders)</div><div class="line">content = score_response.content</div></pre></td></tr></table></figure>
<p>这里解释一下上面的代码，上面的<code>score_url</code> 并不是浏览器上显示的地址，我们要获取真正的地址，在Chrome下右键–查看网页源代码，找到这么一行：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="xml">a href=query.php?start=1&amp;job=see&amp;=&amp;Name=&amp;Course=&amp;ClassID=&amp;Term=&amp;StuID=xxxxxxx</span></div></pre></td></tr></table></figure>
<p>这个才是真正的地址，点击这个地址转入的才是真正的界面，因为这里成绩数据较多，所以这里采用了分页显示，这个<code>start=1</code>说明是第一页，这个参数是可变的需要我们传入，还有<code>StuID</code>后面的是我们输入的学号，这样我们就可以拼接出Url地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">score_url = &apos;http://jwc.ecjtu.jx.cn/mis_o/query.php?start=&apos; + str(pagenum) + &apos;&amp;job=see&amp;=&amp;Name=&amp;Course=&amp;ClassID=&amp;Term=&amp;StuID=&apos; + num</div></pre></td></tr></table></figure>
<p>同样使用Post方法传递数据并获取响应的内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">score_response = sessions.post(score_url, data=score_data,headers=score_healders)</div><div class="line">content = score_response.content</div></pre></td></tr></table></figure>
<p>这里采用<a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="external">Beautiful Soup 4.2.0</a>来解析返回的响应内容，因为我们要获取的是成绩，这里到教务处成绩查询界面，查看获取到的成绩在网页中是以表格的形式存在：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/qr.png" alt="网页源代码"><br>观察表格的网页源代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">center</span> <span class="attr">border</span>=<span class="string">1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>学期<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>课程<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>课程要求<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>学分<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>成绩<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>重考一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">009999</span>&gt;</span>重考二<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">...</div><div class="line">...</div><div class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这里拿出第一行举例，虽然我不太懂Html但是从这里可以看出来<code>&lt;tr&gt;</code> 代表的是一行，而<code>&lt;td&gt;</code>应该是代表这一行中的每一列，这样就好办了，取出每一行然后分解出每一列，打印输出就可以得到我们要的结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</div><div class="line">soup = BeautifulSoup(content, <span class="string">'html.parser'</span>)</div><div class="line"><span class="comment"># 找到每一行</span></div><div class="line">target = soup.findAll(<span class="string">'tr'</span>)</div></pre></td></tr></table></figure>
<p>这里分解每一列的时候要小心，因为这里表格分成了三页显示，每页最多显示30条数据，这里因为只是收集已经毕业的学生的成绩数据所以不对其他数据量不足的学生成绩的情况做统计，默认收集的都是大四毕业的学生成绩数据。这里采用两个变量<code>i</code>和<code>j</code>分别代表行和列：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 注:这里的print单纯是我为了验证结果打印在PyCharm的控制台上而已</span></div><div class="line">i=<span class="number">0</span>, j=<span class="number">0</span></div><div class="line"><span class="keyword">for</span> tag <span class="keyword">in</span> target[<span class="number">1</span>:]:</div><div class="line">            tds = tag.findAll(<span class="string">'td'</span>)</div><div class="line">            <span class="comment"># 每一次都是从列头开始获取</span></div><div class="line">            j = <span class="number">0</span></div><div class="line">            <span class="comment"># 学期</span></div><div class="line">            semester = str(tds[<span class="number">0</span>].string)</div><div class="line">            <span class="keyword">if</span> semester == <span class="string">'None'</span>:</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                print(semester.ljust(<span class="number">6</span>) + <span class="string">'\t\t\t'</span>, end=<span class="string">''</span>)</div><div class="line">            <span class="comment"># 学号</span></div><div class="line">            studentid = tds[<span class="number">1</span>].string</div><div class="line">            print(studentid.ljust(<span class="number">14</span>) + <span class="string">'\t\t\t'</span>, end=<span class="string">''</span>)</div><div class="line">            j += <span class="number">1</span></div><div class="line">            <span class="comment"># 姓名</span></div><div class="line">            name = tds[<span class="number">2</span>].string</div><div class="line">            print(name.ljust(<span class="number">3</span>) + <span class="string">'\t\t\t'</span>, end=<span class="string">''</span>)</div><div class="line">            j += <span class="number">1</span></div><div class="line">            <span class="comment"># 课程</span></div><div class="line">            course = tds[<span class="number">3</span>].string</div><div class="line">            print(course.ljust(<span class="number">20</span>, <span class="string">' '</span>) + <span class="string">'\t\t\t'</span>, end=<span class="string">''</span>)</div><div class="line">            j += <span class="number">1</span></div><div class="line">            <span class="comment"># 课程要求</span></div><div class="line">            requirments = tds[<span class="number">4</span>].string</div><div class="line">            print(requirments.ljust(<span class="number">10</span>, <span class="string">' '</span>) + <span class="string">'\t\t'</span>, end=<span class="string">''</span>)</div><div class="line">            j += <span class="number">1</span></div><div class="line">            <span class="comment"># 学分</span></div><div class="line">            scredit = tds[<span class="number">5</span>].string</div><div class="line">            print(scredit.ljust(<span class="number">2</span>, <span class="string">' '</span>) + <span class="string">'\t\t'</span>, end=<span class="string">''</span>)</div><div class="line">            j += <span class="number">1</span></div><div class="line">            <span class="comment"># 成绩</span></div><div class="line">            achievement = tds[<span class="number">6</span>].string</div><div class="line">            print(achievement.ljust(<span class="number">2</span>) + <span class="string">'\t\t'</span>, end=<span class="string">''</span>)</div><div class="line">            j += <span class="number">1</span></div><div class="line">            <span class="comment"># 重考一</span></div><div class="line">            reexaminef = tds[<span class="number">7</span>].string</div><div class="line">            print(reexaminef.ljust(<span class="number">2</span>) + <span class="string">'\t\t'</span>, end=<span class="string">''</span>)</div><div class="line">            j += <span class="number">1</span></div><div class="line">            <span class="comment"># 重考二</span></div><div class="line">            reexamines = tds[<span class="number">8</span>].string</div><div class="line">            print(reexamines.ljust(<span class="number">2</span>) + <span class="string">'\t\t'</span>)</div><div class="line">            j += <span class="number">1</span></div><div class="line">            i += <span class="number">1</span></div></pre></td></tr></table></figure>
<p>这里查了很多别人的博客都是用正则表达式来分解数据，表示自己的正则写的并不好也尝试了但是没成功，所以无奈选择这种方式，如果有人有测试成功的正则欢迎跟我说一声，我也学习学习。</p>
<p><strong>把数据保存到Excel</strong></p>
<p>因为已经清楚了这个网页保存成绩的具体结构，所以顺着每次循环解析将数据不断加以保存就是了，这里使用<code>xlwt</code>写入数据到Excel，因为<code>xlwt</code>模块打印输出到Excel中的样式宽度偏小，影响观看，所以这里还加入了一个方法去控制打印到Excel表格中的样式:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">file = xlwt.Workbook(encoding=<span class="string">'utf-8'</span>)</div><div class="line">table = file.add_sheet(<span class="string">'achieve'</span>)</div><div class="line"><span class="comment"># 设置Excel样式</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_style</span><span class="params">(name, height, bold=False)</span>:</span></div><div class="line">    style = xlwt.XFStyle()  <span class="comment"># 初始化样式</span></div><div class="line">    font = xlwt.Font()  <span class="comment"># 为样式创建字体</span></div><div class="line">    font.name = name  <span class="comment"># 'Times New Roman'</span></div><div class="line">    font.bold = bold</div><div class="line">    font.color_index = <span class="number">4</span></div><div class="line">    font.height = height</div><div class="line">    style.font = font</div><div class="line">    <span class="keyword">return</span> style</div></pre></td></tr></table></figure>
<p>运用到代码中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">for tag in target[1:]:</div><div class="line">            tds = tag.findAll(&apos;td&apos;)</div><div class="line">            j = 0</div><div class="line">            # 学期</div><div class="line">            semester = str(tds[0].string)</div><div class="line">            if semester == &apos;None&apos;:</div><div class="line">                break</div><div class="line">            else:</div><div class="line">                print(semester.ljust(6) + &apos;\t\t\t&apos;, end=&apos;&apos;)</div><div class="line">                table.write(i, j, semester, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 学号</div><div class="line">            studentid = tds[1].string</div><div class="line">            print(studentid.ljust(14) + &apos;\t\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, studentid, set_style(&apos;Arial&apos;, 220))</div><div class="line">            table.col(i).width = 256 * 16</div><div class="line">            # 姓名</div><div class="line">            name = tds[2].string</div><div class="line">            print(name.ljust(3) + &apos;\t\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, name, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 课程</div><div class="line">            course = tds[3].string</div><div class="line">            print(course.ljust(20, &apos; &apos;) + &apos;\t\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, course, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 课程要求</div><div class="line">            requirments = tds[4].string</div><div class="line">            print(requirments.ljust(10, &apos; &apos;) + &apos;\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, requirments, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 学分</div><div class="line">            scredit = tds[5].string</div><div class="line">            print(scredit.ljust(2, &apos; &apos;) + &apos;\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, scredit, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 成绩</div><div class="line">            achievement = tds[6].string</div><div class="line">            print(achievement.ljust(2) + &apos;\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, achievement, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 重考一</div><div class="line">            reexaminef = tds[7].string</div><div class="line">            print(reexaminef.ljust(2) + &apos;\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, reexaminef, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 重考二</div><div class="line">            reexamines = tds[8].string</div><div class="line">            print(reexamines.ljust(2) + &apos;\t\t&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, reexamines, set_style(&apos;Arial&apos;, 220))</div><div class="line">            i += 1</div><div class="line"></div><div class="line">file.save(&apos;demo.xls&apos;)</div></pre></td></tr></table></figure>
<p>最后稍加整合，写成一个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line"># 获取成绩</div><div class="line"># 这里num代表输入的学号，pagenum代表页数，总共76条数据，一页30条所以总共有三页</div><div class="line">def getScore(num, pagenum, i, j):</div><div class="line">    score_healders = &#123;&apos;Connection&apos;: &apos;keep-alive&apos;,</div><div class="line">                      &apos;User - Agent&apos;: &apos;Mozilla/5.0 (Windows NT 6.1; WOW64) &apos;</div><div class="line">                                      &apos;AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.82 Safari/537.36&apos;,</div><div class="line">                      &apos;Content - Type&apos;: &apos;application / x - www - form - urlencoded&apos;,</div><div class="line">                      &apos;Accept&apos;: &apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;,</div><div class="line">                      &apos;Content - Length&apos;: &apos;69&apos;,</div><div class="line">                      &apos;Host&apos;: &apos;jwc.ecjtu.jx.cn&apos;,</div><div class="line">                      &apos;Referer&apos;: &apos;http: // jwc.ecjtu.jx.cn / mis_o / main.php&apos;,</div><div class="line">                      &apos;Upgrade - Insecure - Requests&apos;: &apos;1&apos;,</div><div class="line">                      &apos;Accept - Language&apos;: &apos;zh - CN, zh;q = 0.8&apos;</div><div class="line">                      &#125;</div><div class="line">    score_url = &apos;http://jwc.ecjtu.jx.cn/mis_o/query.php?start=&apos; + str(</div><div class="line">        pagenum) + &apos;&amp;job=see&amp;=&amp;Name=&amp;Course=&amp;ClassID=&amp;Term=&amp;StuID=&apos; + num</div><div class="line">    score_data = &#123;&apos;Name&apos;: &apos;&apos;,</div><div class="line">                  &apos;StuID&apos;: num,</div><div class="line">                  &apos;Course&apos;: &apos;&apos;,</div><div class="line">                  &apos;Term&apos;: &apos;&apos;,</div><div class="line">                  &apos;ClassID&apos;: &apos;&apos;,</div><div class="line">                  &apos;Submit&apos;: &apos;%B2%E9%D1%AF&apos;</div><div class="line">                  &#125;</div><div class="line"></div><div class="line">    score_response = sessions.post(score_url, data=score_data, headers=score_healders)</div><div class="line">    # 输出到文本</div><div class="line">    with open(&apos;text.txt&apos;, &apos;wb&apos;) as f:</div><div class="line">        f.write(score_response.content)</div><div class="line">    content = score_response.content</div><div class="line">    soup = BeautifulSoup(content, &apos;html.parser&apos;)</div><div class="line">    target = soup.findAll(&apos;tr&apos;)</div><div class="line">    try:</div><div class="line">        for tag in target[1:]:</div><div class="line">            tds = tag.findAll(&apos;td&apos;)</div><div class="line">            j = 0</div><div class="line">            # 学期</div><div class="line">            semester = str(tds[0].string)</div><div class="line">            if semester == &apos;None&apos;:</div><div class="line">                break</div><div class="line">            else:</div><div class="line">                print(semester.ljust(6) + &apos;\t\t\t&apos;, end=&apos;&apos;)</div><div class="line">                table.write(i, j, semester, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 学号</div><div class="line">            studentid = tds[1].string</div><div class="line">            print(studentid.ljust(14) + &apos;\t\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, studentid, set_style(&apos;Arial&apos;, 220))</div><div class="line">            table.col(i).width = 256 * 16</div><div class="line">            # 姓名</div><div class="line">            name = tds[2].string</div><div class="line">            print(name.ljust(3) + &apos;\t\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, name, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 课程</div><div class="line">            course = tds[3].string</div><div class="line">            print(course.ljust(20, &apos; &apos;) + &apos;\t\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, course, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 课程要求</div><div class="line">            requirments = tds[4].string</div><div class="line">            print(requirments.ljust(10, &apos; &apos;) + &apos;\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, requirments, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 学分</div><div class="line">            scredit = tds[5].string</div><div class="line">            print(scredit.ljust(2, &apos; &apos;) + &apos;\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, scredit, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 成绩</div><div class="line">            achievement = tds[6].string</div><div class="line">            print(achievement.ljust(2) + &apos;\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, achievement, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 重考一</div><div class="line">            reexaminef = tds[7].string</div><div class="line">            print(reexaminef.ljust(2) + &apos;\t\t&apos;, end=&apos;&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, reexaminef, set_style(&apos;Arial&apos;, 220))</div><div class="line">            # 重考二</div><div class="line">            reexamines = tds[8].string</div><div class="line">            print(reexamines.ljust(2) + &apos;\t\t&apos;)</div><div class="line">            j += 1</div><div class="line">            table.write(i, j, reexamines, set_style(&apos;Arial&apos;, 220))</div><div class="line">            i += 1</div><div class="line">    except:</div><div class="line">        print(&apos;出了一点小Bug&apos;)</div><div class="line">    file.save(&apos;demo.xls&apos;)</div></pre></td></tr></table></figure>
<p>在模拟登陆操作后增加一个判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 判断是否登陆</div><div class="line">def isLogin(num):</div><div class="line">    return_code = response.status_code</div><div class="line">    if return_code == 200:</div><div class="line">        if re.match(r&quot;^\d&#123;14&#125;$&quot;, num):</div><div class="line">            print(&apos;请稍等&apos;)</div><div class="line">        else:</div><div class="line">            print(&apos;请输入正确的学号&apos;)</div><div class="line">        return True</div><div class="line">    else:</div><div class="line">        return False</div></pre></td></tr></table></figure>
<p>最后在<code>__main__</code>中这么调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">if __name__ == &apos;__main__&apos;:</div><div class="line">    num = input(&apos;请输入你的学号：&apos;)</div><div class="line">    if isLogin(num):</div><div class="line">        getScore(num, pagenum=0, i=0, j=0)</div><div class="line">        getScore(num, pagenum=1, i=31, j=0)</div><div class="line">        getScore(num, pagenum=2, i=61, j=0)</div></pre></td></tr></table></figure>
<p>在PyCharm下按<code>alt</code>+<code>shift</code>+<code>x</code>快捷键运行程序：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/inputnum.png" alt="控制台输出"></p>
<p>控制台会有如下输出(这里只截取部分，不要吐槽没有对齐，这里我也用了格式化输出还是不太行，不过最起码出来了结果，而且我们的目的是输出到Excel中不是吗)</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/achievre.png" alt="控制台输出"></p>
<p>然后去程序根目录找看看有没有生成一个叫<code>demo.xls</code>的文件，我的程序就放在桌面，所以去桌面找：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/rexls.png" alt="桌面图标"></p>
<p>点开查看是否成功获取：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/finalresult.png" alt="最终获取结果"></p>
<p>至此，大功告成</p>
<p><strong>小结</strong><br>刚开始接触Python一个星期的样子，这次写了这么一个简单的网络爬虫检验一下学习成果，虽然程序还有些许Bug，不过总归得到了一定收获，当然也为下一步学习打下了基础，嗯哼，为了接下来批量获取网络上美女图片并分类保存我会继续自学Python，荆轲刺秦王~</p>
<p><a href="https://github.com/GiitSmile/login/blob/master/login.py" target="_blank" rel="external">源码</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始接触Python，看很多人玩爬虫我也想玩，找来找去发现很多人用网络爬虫干的第一件事就是模拟登陆，增加点难度就是模拟登陆后在获取数据，但是网上好少有Python 3.x的模拟登陆Demo可以参考，加上自己也不怎么懂HTML，所以这第一个Python爬虫写的异常艰难，不过最终结果还是尽如人意的，下面把这次学习的过程整理一下。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https:///www.limuyang.cc/categories/Python/"/>
    
    
      <category term="爬虫" scheme="https:///www.limuyang.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="Python" scheme="https:///www.limuyang.cc/tags/Python/"/>
    
      <category term="模拟登陆" scheme="https:///www.limuyang.cc/tags/%E6%A8%A1%E6%8B%9F%E7%99%BB%E9%99%86/"/>
    
      <category term="保存数据" scheme="https:///www.limuyang.cc/tags/%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Python网络编程基础</title>
    <link href="https:///www.limuyang.cc/2016/07/25/Python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https:///www.limuyang.cc/2016/07/25/Python网络编程基础/</id>
    <published>2016-07-25T11:24:55.000Z</published>
    <updated>2016-08-10T11:26:59.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>原文转自</strong>：<a href="http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320037768360d53e4e935ca4a1f96eed1c896ad1217000" target="_blank" rel="external"><strong>Python教程</strong></a>          </p>
</blockquote>
<h3 id="TCP-IP简介"><a href="#TCP-IP简介" class="headerlink" title="TCP/IP简介"></a>TCP/IP简介</h3><p>虽然大家现在对互联网很熟悉，但是计算机网络的出现比互联网要早很多。</p>
<p>计算机为了联网，就必须规定通信协议，早期的计算机网络，都是由各厂商自己规定一套协议，IBM、Apple和Microsoft都有各自的网络协议，互不兼容，这就好比一群人有的说英语，有的说中文，有的说德语，说同一种语言的人可以交流，不同的语言之间就不行了。<br><a id="more"></a><br>为了把全世界的所有不同类型的计算机都连接起来，就必须规定一套全球通用的协议，为了实现互联网这个目标，互联网协议簇（Internet Protocol Suite）就是通用协议标准。Internet是由inter和net两个单词组合起来的，原意就是连接“网络”的网络，有了Internet，任何私有网络，只要支持这个协议，就可以联入互联网。</p>
<p>因为互联网协议包含了上百种协议标准，但是最重要的两个协议是TCP和IP协议，所以，大家把互联网的协议简称TCP/IP协议。</p>
<p>通信的时候，双方必须知道对方的标识，好比发邮件必须知道对方的邮件地址。互联网上每个计算机的唯一标识就是IP地址，类似<code>123.123.123.123</code>。如果一台计算机同时接入到两个或更多的网络，比如路由器，它就会有两个或多个IP地址，所以，IP地址对应的实际上是计算机的网络接口，通常是网卡。</p>
<p>IP协议负责把数据从一台计算机通过网络发送到另一台计算机。数据被分割成一小块一小块，然后通过IP包发送出去。由于互联网链路复杂，两台计算机之间经常有多条线路，因此，路由器就负责决定如何把一个IP包转发出去。IP包的特点是按块发送，途径多个路由，但不保证能到达，也不保证顺序到达。</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/1.png" alt="Alt text"></p>
<p>IP地址实际上是一个32位整数（称为IPv4），以字符串表示的IP地址如<code>192.168.0.1</code>实际上是把32位整数按8位分组后的数字表示，目的是便于阅读。<br>IPv6地址实际上是一个128位整数，它是目前使用的IPv4的升级版，以字符串表示类似于<code>2001:0db8:85a3:0042:1000:8a2e:0370:7334</code>。<br>TCP协议则是建立在IP协议之上的。TCP协议负责在两台计算机之间建立可靠连接，保证数据包按顺序到达。TCP协议会通过握手建立连接，然后，对每个IP包编号，确保对方按顺序收到，如果包丢掉了，就自动重发。</p>
<p>许多常用的更高级的协议都是建立在TCP协议基础上的，比如用于浏览器的HTTP协议、发送邮件的SMTP协议等。</p>
<p>一个IP包除了包含要传输的数据外，还包含源IP地址和目标IP地址，源端口和目标端口。</p>
<p>端口有什么作用？在两台计算机通信时，只发IP地址是不够的，因为同一台计算机上跑着多个网络程序。一个IP包来了之后，到底是交给浏览器还是QQ，就需要端口号来区分。每个网络程序都向操作系统申请唯一的端口号，这样，两个进程在两台计算机之间建立网络连接就需要各自的IP地址和各自的端口号。</p>
<p>一个进程也可能同时与多个计算机建立链接，因此它会申请很多端口。</p>
<p>了解了TCP/IP协议的基本概念，IP地址和端口的概念，我们就可以开始进行网络编程了。</p>
<h3 id="TCP编程"><a href="#TCP编程" class="headerlink" title="TCP编程"></a>TCP编程</h3><p>Socket是网络编程的一个抽象概念。通常我们用一个Socket表示“打开了一个网络链接”，而打开一个Socket需要知道目标计算机的IP地址和端口号，再指定协议类型即可。</p>
<p><strong>客户端</strong></p>
<p>大多数连接都是可靠的TCP连接。创建TCP连接时，主动发起连接的叫客户端，被动响应连接的叫服务器。</p>
<p>举个例子，当我们在浏览器中访问新浪时，我们自己的计算机就是客户端，浏览器会主动向新浪的服务器发起连接。如果一切顺利，新浪的服务器接受了我们的连接，一个TCP连接就建立起来的，后面的通信就是发送网页内容了。</p>
<p>所以，我们要创建一个基于TCP连接的Socket，可以这样做：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 导入socket库:</span></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"><span class="comment"># 创建一个socket:</span></div><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line"><span class="comment"># 建立连接:</span></div><div class="line">s.connect((<span class="string">'www.sina.com.cn'</span>, <span class="number">80</span>))</div></pre></td></tr></table></figure>
<p>创建<code>Socket</code>时，<code>AF_INET</code>指定使用IPv4协议，如果要用更先进的IPv6，就指定为<code>AF_INET6</code>。<code>SOCK_STREAM</code>指定使用面向流的TCP协议，这样，一个<code>Socket</code>对象就创建成功，但是还没有建立连接。</p>
<p>客户端要主动发起TCP连接，必须知道服务器的IP地址和端口号。新浪网站的IP地址可以用域名<code>www.sina.com.cn</code>自动转换到IP地址，但是怎么知道新浪服务器的端口号呢？</p>
<p>答案是作为服务器，提供什么样的服务，端口号就必须固定下来。由于我们想要访问网页，因此新浪提供网页服务的服务器必须把端口号固定在<code>80</code>端口，因为<code>80</code>端口是Web服务的标准端口。其他服务都有对应的标准端口号，例如SMTP服务是<code>25</code>端口，FTP服务是<code>21</code>端口，等等。端口号小于1024的是Internet标准服务的端口，端口号大于1024的，可以任意使用。</p>
<p>因此，我们连接新浪服务器的代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s.connect((<span class="string">'www.sina.com.cn'</span>, <span class="number">80</span>))</div></pre></td></tr></table></figure>
<p>注意参数是一个<code>tuple</code>，包含地址和端口号。<br>建立TCP连接后，我们就可以向新浪服务器发送请求，要求返回首页的内容：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 发送数据:</span></div><div class="line">s.send(<span class="string">b'GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n'</span>)</div></pre></td></tr></table></figure>
<p>TCP连接创建的是双向通道，双方都可以同时给对方发数据。但是谁先发谁后发，怎么协调，要根据具体的协议来决定。例如，HTTP协议规定客户端必须先发请求给服务器，服务器收到后才发数据给客户端。</p>
<p>发送的文本格式必须符合HTTP标准，如果格式没问题，接下来就可以接收新浪服务器返回的数据了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 接收数据:</span></div><div class="line">buffer = []</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 每次最多接收1k字节:</span></div><div class="line">    d = s.recv(<span class="number">1024</span>)</div><div class="line">    <span class="keyword">if</span> d:</div><div class="line">        buffer.append(d)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line">data = <span class="string">b''</span>.join(buffer)</div></pre></td></tr></table></figure>
<p>接收数据时，调用<code>recv(max)</code>方法，一次最多接收指定的字节数，因此，在一个while循环中反复接收，直到<code>recv()</code>返回空数据，表示接收完毕，退出循环。</p>
<p>当我们接收完数据后，调用<code>close()</code>方法关闭Socket，这样，一次完整的网络通信就结束了：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 关闭连接:</span></div><div class="line">s.close()</div></pre></td></tr></table></figure>
<p>接收到的数据包括HTTP头和网页本身，我们只需要把HTTP头和网页分离一下，把HTTP头打印出来，网页内容保存到文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">header, html = data.split(<span class="string">b'\r\n\r\n'</span>, <span class="number">1</span>)</div><div class="line">print(header.decode(<span class="string">'utf-8'</span>))</div><div class="line"><span class="comment"># 把接收的数据写入文件:</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'sina.html'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(html)</div></pre></td></tr></table></figure>
<p>现在，只需要在浏览器中打开这个<code>sina.html</code>文件，就可以看到新浪的首页了。</p>
<p><strong>服务器</strong></p>
<p>和客户端编程相比，服务器编程就要复杂一些。</p>
<p>服务器进程首先要绑定一个端口并监听来自其他客户端的连接。如果某个客户端连接过来了，服务器就与该客户端建立Socket连接，随后的通信就靠这个Socket连接了。</p>
<p>所以，服务器会打开固定端口（比如80）监听，每来一个客户端连接，就创建该Socket连接。由于服务器会有大量来自客户端的连接，所以，服务器要能够区分一个Socket连接是和哪个客户端绑定的。一个Socket依赖4项：服务器地址、服务器端口、客户端地址、客户端端口来唯一确定一个Socket。</p>
<p>但是服务器还需要同时响应多个客户端的请求，所以，每个连接都需要一个新的进程或者新的线程来处理，否则，服务器一次就只能服务一个客户端了。</p>
<p>我们来编写一个简单的服务器程序，它接收客户端连接，把客户端发过来的字符串加上Hello再发回去。</p>
<p>首先，创建一个基于IPv4和TCP协议的Socket：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div></pre></td></tr></table></figure>
<p>然后，我们要绑定监听的地址和端口。服务器可能有多块网卡，可以绑定到某一块网卡的IP地址上，也可以用<code>0.0.0.0</code>绑定到所有的网络地址，还可以用<code>127.0.0.1</code>绑定到本机地址。<code>127.0.0.1</code>是一个特殊的IP地址，表示本机地址，如果绑定到这个地址，客户端必须同时在本机运行才能连接，也就是说，外部的计算机无法连接进来。</p>
<p>端口号需要预先指定。因为我们写的这个服务不是标准服务，所以用<code>9999</code>这个端口号。请注意，小于1024的端口号必须要有管理员权限才能绑定：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 监听端口:</span></div><div class="line">s.bind((<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>))</div></pre></td></tr></table></figure>
<p>紧接着，调用<code>listen()</code>方法开始监听端口，传入的参数指定等待连接的最大数量：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">s.listen(<span class="number">5</span>)</div><div class="line">print(<span class="string">'Waiting for connection...'</span>)</div></pre></td></tr></table></figure>
<p>接下来，服务器程序通过一个永久循环来接受来自客户端的连接，<code>accept()</code>会等待并返回一个客户端的连接:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 接受一个新连接:</span></div><div class="line">    sock, addr = s.accept()</div><div class="line">    <span class="comment"># 创建新线程来处理TCP连接:</span></div><div class="line">    t = threading.Thread(target=tcplink, args=(sock, addr))</div><div class="line">    t.start()</div></pre></td></tr></table></figure>
<p>每个连接都必须创建新线程（或进程）来处理，否则，单线程在处理连接的过程中，无法接受其他客户端的连接：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">tcplink</span><span class="params">(sock, addr)</span>:</span></div><div class="line">    print(<span class="string">'Accept new connection from %s:%s...'</span> % addr)</div><div class="line">    sock.send(<span class="string">b'Welcome!'</span>)</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        data = sock.recv(<span class="number">1024</span>)</div><div class="line">        time.sleep(<span class="number">1</span>)</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> data.decode(<span class="string">'utf-8'</span>) == <span class="string">'exit'</span>:</div><div class="line">            <span class="keyword">break</span></div><div class="line">        sock.send((<span class="string">'Hello, %s!'</span> % data.decode(<span class="string">'utf-8'</span>)).encode(<span class="string">'utf-8'</span>))</div><div class="line">    sock.close()</div><div class="line">    print(<span class="string">'Connection from %s:%s closed.'</span> % addr)</div></pre></td></tr></table></figure>
<p>连接建立后，服务器首先发一条欢迎消息，然后等待客户端数据，并加上Hello再发送给客户端。如果客户端发送了exit字符串，就直接关闭连接。</p>
<p>要测试这个服务器程序，我们还需要编写一个客户端程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line"># 建立连接:</div><div class="line">s.connect((&apos;127.0.0.1&apos;, 9999))</div><div class="line"># 接收欢迎消息:</div><div class="line">print(s.recv(1024).decode(&apos;utf-8&apos;))</div><div class="line">for data in [b&apos;Michael&apos;, b&apos;Tracy&apos;, b&apos;Sarah&apos;]:</div><div class="line">    # 发送数据:</div><div class="line">    s.send(data)</div><div class="line">    print(s.recv(1024).decode(&apos;utf-8&apos;))</div><div class="line">s.send(b&apos;exit&apos;)</div><div class="line">s.close()</div></pre></td></tr></table></figure>
<p>我们需要打开两个命令行窗口，一个运行服务器程序，另一个运行客户端程序，就可以看到效果了：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/2.png" alt="Alt text"></p>
<p>需要注意的是，客户端程序运行完毕就退出了，而服务器程序会永远运行下去，必须按Ctrl+C退出程序。</p>
<p><strong>小结</strong></p>
<p>用TCP协议进行Socket编程在Python中十分简单，对于客户端，要主动连接服务器的IP和指定端口，对于服务器，要首先监听指定端口，然后，对每一个新的连接，创建一个线程或进程来处理。通常，服务器程序会无限运行下去。</p>
<p>同一个端口，被一个Socket绑定了以后，就不能被别的Socket绑定了。</p>
<p>源码：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line"><span class="comment"># 创建一个socket:</span></div><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</div><div class="line"></div><div class="line"><span class="comment"># 建立连接:</span></div><div class="line">s.connect((<span class="string">'www.sina.com.cn'</span>, <span class="number">80</span>))</div><div class="line"></div><div class="line"><span class="comment"># 发送数据:</span></div><div class="line">s.send(<span class="string">b'GET / HTTP/1.1\r\nHost: www.sina.com.cn\r\nConnection: close\r\n\r\n'</span>)</div><div class="line"></div><div class="line"><span class="comment"># 接收数据:</span></div><div class="line">buffer = []</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 每次最多接收1k字节:</span></div><div class="line">    d = s.recv(<span class="number">1024</span>)</div><div class="line">    <span class="keyword">if</span> d:</div><div class="line">        buffer.append(d)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">break</span></div><div class="line"></div><div class="line">data = <span class="string">b''</span>.join(buffer)</div><div class="line"></div><div class="line"><span class="comment"># 关闭连接:</span></div><div class="line">s.close()</div><div class="line"></div><div class="line">header, html = data.split(<span class="string">b'\r\n\r\n'</span>, <span class="number">1</span>)</div><div class="line">print(header.decode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line"><span class="comment"># 把接收的数据写入文件:</span></div><div class="line"><span class="keyword">with</span> open(<span class="string">'sina.html'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</div><div class="line">    f.write(html)</div></pre></td></tr></table></figure>
<h3 id="UDP编程"><a href="#UDP编程" class="headerlink" title="UDP编程"></a>UDP编程</h3><p>TCP是建立可靠连接，并且通信双方都可以以流的形式发送数据。相对TCP，UDP则是面向无连接的协议。</p>
<p>使用UDP协议时，不需要建立连接，只需要知道对方的IP地址和端口号，就可以直接发数据包。但是，能不能到达就不知道了。</p>
<p>虽然用UDP传输数据不可靠，但它的优点是和TCP比，速度快，对于不要求可靠到达的数据，就可以使用UDP协议。</p>
<p>我们来看看如何通过UDP协议传输数据。和TCP类似，使用UDP的通信双方也分为客户端和服务器。服务器首先需要绑定端口：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</div><div class="line"><span class="comment"># 绑定端口:</span></div><div class="line">s.bind((<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>))</div></pre></td></tr></table></figure>
<p>创建Socket时，<code>SOCK_DGRAM</code>指定了这个Socket的类型是UDP。绑定端口和TCP一样，但是不需要调用<code>listen()</code>方法，而是直接接收来自任何客户端的数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Bind UDP on 9999...'</span>)</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 接收数据:</span></div><div class="line">    data, addr = s.recvfrom(<span class="number">1024</span>)</div><div class="line">    print(<span class="string">'Received from %s:%s.'</span> % addr)</div><div class="line">    s.sendto(<span class="string">b'Hello, %s!'</span> % data, addr)</div></pre></td></tr></table></figure>
<p><code>recvfrom()</code>方法返回数据和客户端的地址与端口，这样，服务器收到数据后，直接调用<code>sendto()</code>就可以把数据用UDP发给客户端。</p>
<p>注意这里省掉了多线程，因为这个例子很简单。</p>
<p>客户端使用UDP时，首先仍然创建基于UDP的Socket，然后，不需要调用<code>connect()</code>，直接通过<code>sendto()</code>给服务器发数据：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</div><div class="line"><span class="keyword">for</span> data <span class="keyword">in</span> [<span class="string">b'Michael'</span>, <span class="string">b'Tracy'</span>, <span class="string">b'Sarah'</span>]:</div><div class="line">    <span class="comment"># 发送数据:</span></div><div class="line">    s.sendto(data, (<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>))</div><div class="line">    <span class="comment"># 接收数据:</span></div><div class="line">    print(s.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</div><div class="line">s.close()</div></pre></td></tr></table></figure>
<p>从服务器接收数据仍然调用<code>recv()</code>方法。<br>仍然用两个命令行分别启动服务器和客户端测试，结果如下：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/3.png" alt="Alt text"></p>
<p><strong>小结</strong></p>
<p>UDP的使用与TCP类似，但是不需要建立连接。此外，服务器绑定UDP端口和TCP端口互不冲突，也就是说，UDP的9999端口与TCP的9999端口可以各自绑定。</p>
<p>sever.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</div><div class="line"></div><div class="line"><span class="comment"># 绑定端口:</span></div><div class="line">s.bind((<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>))</div><div class="line"></div><div class="line">print(<span class="string">'Bind UDP on 9999...'</span>)</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    <span class="comment"># 接收数据:</span></div><div class="line">    data, addr = s.recvfrom(<span class="number">1024</span>)</div><div class="line">    print(<span class="string">'Received from %s:%s.'</span> % addr)</div><div class="line">    reply = <span class="string">'Hello, %s!'</span> % data.decode(<span class="string">'utf-8'</span>)</div><div class="line">    s.sendto(reply.encode(<span class="string">'utf-8'</span>), addr)</div></pre></td></tr></table></figure>
<p>client.py</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python3</span></div><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> socket</div><div class="line"></div><div class="line">s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</div><div class="line"></div><div class="line"><span class="keyword">for</span> data <span class="keyword">in</span> [<span class="string">b'Michael'</span>, <span class="string">b'Tracy'</span>, <span class="string">b'Sarah'</span>]:</div><div class="line">    <span class="comment"># 发送数据:</span></div><div class="line">    s.sendto(data, (<span class="string">'127.0.0.1'</span>, <span class="number">9999</span>))</div><div class="line">    <span class="comment"># 接收数据:</span></div><div class="line">    print(s.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</div><div class="line"></div><div class="line">s.close()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;原文转自&lt;/strong&gt;：&lt;a href=&quot;http://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320037768360d53e4e935ca4a1f96eed1c896ad1217000&quot;&gt;&lt;strong&gt;Python教程&lt;/strong&gt;&lt;/a&gt;          &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;TCP-IP简介&quot;&gt;&lt;a href=&quot;#TCP-IP简介&quot; class=&quot;headerlink&quot; title=&quot;TCP/IP简介&quot;&gt;&lt;/a&gt;TCP/IP简介&lt;/h3&gt;&lt;p&gt;虽然大家现在对互联网很熟悉，但是计算机网络的出现比互联网要早很多。&lt;/p&gt;
&lt;p&gt;计算机为了联网，就必须规定通信协议，早期的计算机网络，都是由各厂商自己规定一套协议，IBM、Apple和Microsoft都有各自的网络协议，互不兼容，这就好比一群人有的说英语，有的说中文，有的说德语，说同一种语言的人可以交流，不同的语言之间就不行了。&lt;br&gt;
    
    </summary>
    
      <category term="Python" scheme="https:///www.limuyang.cc/categories/Python/"/>
    
    
      <category term="Python" scheme="https:///www.limuyang.cc/tags/Python/"/>
    
      <category term="计算机网络" scheme="https:///www.limuyang.cc/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Android Design Support Library--FloatingActionButton及其Behavior的使用</title>
    <link href="https:///www.limuyang.cc/2016/05/31/Android-Design-Support-Library-FloatingActionButton%E5%8F%8A%E5%85%B6Behavior%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https:///www.limuyang.cc/2016/05/31/Android-Design-Support-Library-FloatingActionButton及其Behavior的使用/</id>
    <published>2016-05-30T16:20:19.000Z</published>
    <updated>2016-10-27T15:05:38.201Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>如果说前面提到的TextInputLayout、SnackBar的应用还不是很常见的话，那么今天提到的FloatingActionButton绝对是一个随处可见的Material Design控件了，无论是我们常用的知乎、印象笔记或者是可爱的谷歌全家桶套装都可以见到FloatingActionButton的身影，今天就来说说FloatingActionButton。</p>
<h4 id="关于使用"><a href="#关于使用" class="headerlink" title="关于使用"></a>关于使用</h4><p>其实我相信很多人都用过了Material Design控件了，但是还是要说一下，毕竟有些人接触的晚一些，一些人接触的早一些，先从最简单的使用看起：<br><a id="more"></a></p>
<table>
<thead>
<tr>
<th style="text-align:center">属性值</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">app:elevation</td>
<td style="text-align:center">设置FAB未按下时的景深</td>
</tr>
<tr>
<td style="text-align:center">app:pressedTranslationZ</td>
<td style="text-align:center">设置FAB按下时的景深</td>
</tr>
<tr>
<td style="text-align:center">app:fabSize</td>
<td style="text-align:center">设置FAB的大小，默认只有normal和mini两种选项</td>
</tr>
<tr>
<td style="text-align:center">app:borderWidth</td>
<td style="text-align:center">设置FAB的边框宽度</td>
</tr>
<tr>
<td style="text-align:center">android:src</td>
<td style="text-align:center">设置FAB的drawaber</td>
</tr>
<tr>
<td style="text-align:center">app:rippleColor</td>
<td style="text-align:center">设置FAB按下时的背景色</td>
</tr>
<tr>
<td style="text-align:center">app:backgroundTint</td>
<td style="text-align:center">设置FAB未按下时的背景色</td>
</tr>
<tr>
<td style="text-align:center">app:layout_anchor</td>
<td style="text-align:center">设置FAB的锚点</td>
</tr>
<tr>
<td style="text-align:center">app:layout_anchorGravity</td>
<td style="text-align:center">设置FAB相对于锚点的位置</td>
</tr>
<tr>
<td style="text-align:center">app:layout_behavior</td>
<td style="text-align:center">设置FAB的Behavior行为属性</td>
</tr>
</tbody>
</table>
<p>大部分的属性还是很好理解的，这里要提一下几个注意的点</p>
<ul>
<li><strong>app:borderWidth</strong> :这个一般设置为0dp，不然的话在4.1的sdk上FAB会显示为正方形，而且在5.0以后的sdk没有阴影效果</li>
<li><strong>app:rippleColor</strong>：当我使用<code>com.android.support:design:23.2.0</code> 的时候这个属性会失效，建议使用最新的 <code>com.android.support:design:23.3.0&#39;</code> 或者适当的降低版本</li>
<li><strong>android:layout_marginBottom</strong> :由于FAB 支持库仍然存在一些 bug，在 Kitkat 和 Lollipop 中分别运行示例代码，可以看到如下结果：</li>
</ul>
<p>Lollipop 中的 FAB：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-7f8ca975b3c3ea12.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Lollipop 中的 FAB"></p>
<p>Kitkat 中的 FAB：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-eeef434197918cee.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Kitkat 中的 FAB"></p>
<p>很容易看出，Lollipop 中存在边缘显示的问题。为了解决此问题，API21+ 的版本统一定义底部与右边缘空白为 16dp，Lollipop 以下版本统一设置为 0dp.解决办法：</p>
<p><strong>values/dimens.xml</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"fab_margin_right"</span>&gt;</span>0dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"fab_margin_bottom"</span>&gt;</span>0dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>values-v21/dimens.xml</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"fab_margin_right"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dimen</span> <span class="attr">name</span>=<span class="string">"fab_margin_bottom"</span>&gt;</span>16dp<span class="tag">&lt;/<span class="name">dimen</span>&gt;</span></div></pre></td></tr></table></figure>
<p>布局文件的 FAB 中，也设置相应的值：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">    <span class="attr">...</span></div><div class="line">    <span class="attr">...</span></div><div class="line">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"@dimen/fab_margin_bottom"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"@dimen/fab_margin_right"</span>/&gt;</div></pre></td></tr></table></figure>
<p><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0713/3182.html" target="_blank" rel="external"><strong>以上这段话出处</strong></a></p>
<ul>
<li><strong>app:layout_anchor</strong>：和<code>app:layout_anchorGravity</code>属性一起搭配使用，可以做出不同的效果：</li>
</ul>
<p>最简单的使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.FloatingActionButton</div><div class="line">       ...</div><div class="line">       ...</div><div class="line">       app:layout_anchor=<span class="string">"@id/mRecycleView"</span></div><div class="line">       app:layout_anchorGravity=<span class="string">"bottom|right|end"</span></div><div class="line">       ...</div><div class="line">        /&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-59d7a7715b7b404f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="最简单的使用"></p>
<p>更酷炫的效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.FloatingActionButton  </div><div class="line">      ...</div><div class="line">      app:layout_anchor=&quot;@id/collapsingToolbarLayout&quot;  </div><div class="line">      app:layout_anchorGravity=&quot;bottom|center&quot;  </div><div class="line">      ...</div><div class="line">       /&gt;</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-5b05a2607b053ab1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="更酷炫的效果"></p>
<p><a href="http://blog.csdn.net/u010687392/article/details/46954213" target="_blank" rel="external">这张图片出处</a></p>
<p>可以看出我们只要使用<code>app:layout_anchor</code>属性设置一个控件作为FAB的锚，然后通过<code>app:layout_anchorGravity</code> 属性放置FAB在这个相对的锚的位置，就能做出你想要的效果。</p>
<ul>
<li><strong>app:layout_behavior</strong>：这个属性接下来会重点讲，也就是这个属性成就了Material Design的众多动画交互效果，我们熟知的SnackBar配合FAB可以侧滑以及APPBarLayout等动画效果都是通过Behavior做出来的 </li>
</ul>
<h4 id="自定义Behavior"><a href="#自定义Behavior" class="headerlink" title="自定义Behavior"></a>自定义Behavior</h4><p>如果你还记得这张图的话：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-0412fef046d56bc2.jpg?imageMogr2/auto-orient/strip" alt="交互效果"></p>
<p>或者说你见过这种交互效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-b7811a2ad183a2d8.jpg?imageMogr2/auto-orient/strip" alt="交互效果"></p>
<p>其实这些都是通过<code>Behavior</code>这个类做出来的，以上的两种动画都是默认自带的Behavior，在<code>CoordinatorLayout</code> 内部有对<code>Behavior</code>类的描述：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Interaction behavior plugin for child views of &#123;<span class="doctag">@link</span> CoordinatorLayout&#125;.</div><div class="line">     *</div><div class="line">     * &lt;p&gt;A Behavior implements one or more interactions that a user can take on a child view.</div><div class="line">     * These interactions may include drags, swipes, flings, or any other gestures.&lt;/p&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> &lt;V&gt; The View type that this Behavior operates on</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Behavior</span>&lt;<span class="title">V</span> <span class="keyword">extends</span> <span class="title">View</span>&gt; </span>&#123;</div></pre></td></tr></table></figure>
<p>可以看到这是一个抽象类，我们可以在各个Material Design去实现这个类，这里提到FAB，我们可以找一下FAB中的默认Behavior交互的实现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Behavior designed for use with &#123;<span class="doctag">@link</span> FloatingActionButton&#125; instances. It's main function</div><div class="line">    * is to move &#123;<span class="doctag">@link</span> FloatingActionButton&#125; views so that any displayed &#123;<span class="doctag">@link</span> Snackbar&#125;s do</div><div class="line">    * not cover them.</div><div class="line">    */</div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Behavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">FloatingActionButton</span>&gt; </span>&#123;</div><div class="line">       <span class="comment">// We only support the FAB &lt;&gt; Snackbar shift movement on Honeycomb and above. This is</span></div><div class="line">       <span class="comment">// because we can use view translation properties which greatly simplifies the code.</span></div><div class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> SNACKBAR_BEHAVIOR_ENABLED = Build.VERSION.SDK_INT &gt;= <span class="number">11</span>;</div></pre></td></tr></table></figure>
<p>这里只贴出一部分，如果英文不差的话看得懂注释的意思：大致就是说我们这里只提供API 11以上的Snackbar和FAB的运动交互效果，也就是我们上面动图中看到的效果：当出现了一个SnackBar时候，FAB会自动向上移动一段距离，当SnackBar消失的时候FAB会回到原来位置，那么如何定义一个属于我们自己的Behavior，先来看看需要用到的知识：</p>
<p>其实细分的话有两种情况：<br>1、当一个View的变化依赖于另一个View的尺寸、位置等变化的时候，我们只需要关注以下两种方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">* @param parent 第一个参数不用解释吧</div><div class="line">* @param 你要依赖别的View的那个View</div><div class="line">* @param dependency 你要依赖的View</div><div class="line">* @return return 如果找到了你依赖的那个View就返回true</div><div class="line">        * @see #onDependentViewChanged(CoordinatorLayout, android.view.View, android.view.View)</div><div class="line">        */</div><div class="line">       public boolean layoutDependsOn(CoordinatorLayout parent, V child, View dependency) &#123;</div><div class="line">           return false;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">* <span class="meta">@param</span> parent 同上，不解释</div><div class="line">* <span class="meta">@param</span> child 同上</div><div class="line">* <span class="meta">@param</span> dependency 同上</div><div class="line">* <span class="meta">@return</span> 如果这个Behavior改变了child的位置或者尺寸大小就返回<span class="keyword">true</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, V child, View dependency)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>其实FAB里面就是实现了这两种方法来与SnackBar交互的，看一下标准写法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent,</span></span></div><div class="line">               FloatingActionButton child, View dependency) &#123;</div><div class="line">           <span class="comment">// We're dependent on all SnackbarLayouts (if enabled)</span></div><div class="line">           <span class="keyword">return</span> SNACKBAR_BEHAVIOR_ENABLED &amp;&amp; dependency <span class="keyword">instanceof</span> Snackbar.SnackbarLayout;</div><div class="line">       &#125;</div><div class="line">       ...</div><div class="line">       ...</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, FloatingActionButton child,</span></span></div><div class="line">               View dependency) &#123;</div><div class="line">           <span class="keyword">if</span> (dependency <span class="keyword">instanceof</span> Snackbar.SnackbarLayout) &#123;</div><div class="line">               updateFabTranslationForSnackbar(parent, child, dependency);</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dependency <span class="keyword">instanceof</span> AppBarLayout) &#123;</div><div class="line">               <span class="comment">// If we're depending on an AppBarLayout we will show/hide it automatically</span></div><div class="line">               <span class="comment">// if the FAB is anchored to the AppBarLayout</span></div><div class="line">               updateFabVisibility(parent, (AppBarLayout) dependency, child);</div><div class="line">           &#125;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>2、另一种情况是当一个View监听CoordinatorLayout内部滑动的View进行交互时，我们需要关注的方法稍微多一点，这些方法都写在了NestedScrollingParent接口里面，而且CoordinatorLayout已经对这个接口有了默认实现：</p>
<p><strong>onStartNestedScroll</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> * @param coordinatorLayout the CoordinatorLayout parent of the view this Behavior is</div><div class="line"> *                          associated with</div><div class="line"> * @param child the child view of the CoordinatorLayout this Behavior is associated with</div><div class="line"> * @param directTargetChild the child view of the CoordinatorLayout that either is or</div><div class="line"> *                          contains the target of the nested scroll operation</div><div class="line"> * @param target the descendant view of the CoordinatorLayout initiating the nested scroll</div><div class="line"> * @param nestedScrollAxes the axes that this nested scroll applies to. See</div><div class="line"> *                         &#123;@link ViewCompat#SCROLL_AXIS_HORIZONTAL&#125;,</div><div class="line"> *                         &#123;@link ViewCompat#SCROLL_AXIS_VERTICAL&#125; 滑动时是横轴和纵轴</div><div class="line"> * @return true if the Behavior wishes to accept this nested scroll</div><div class="line"> *</div><div class="line"> * @see NestedScrollingParent#onStartNestedScroll(View, View, int)</div><div class="line"> */</div><div class="line">public boolean onStartNestedScroll(CoordinatorLayout coordinatorLayout,</div><div class="line">        V child, View directTargetChild, View target, int nestedScrollAxes) &#123;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>onNestedPreScroll</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"> * @param coordinatorLayout the CoordinatorLayout parent of the view this Behavior is</div><div class="line"> *                          associated with</div><div class="line"> * @param child the child view of the CoordinatorLayout this Behavior is associated with</div><div class="line"> * @param target the descendant view of the CoordinatorLayout performing the nested scroll</div><div class="line"> * @param dx the raw horizontal number of pixels that the user attempted to scroll</div><div class="line"> * @param dy the raw vertical number of pixels that the user attempted to scroll</div><div class="line"> * @param consumed out parameter. consumed[0] should be set to the distance of dx that</div><div class="line"> *                 was consumed, consumed[1] should be set to the distance of dy that</div><div class="line"> *                 was consumed</div><div class="line"> *</div><div class="line"> * @see NestedScrollingParent#onNestedPreScroll(View, int, int, int[])</div><div class="line"> */</div><div class="line">public void onNestedPreScroll(CoordinatorLayout coordinatorLayout, V child, View target,</div><div class="line">        int dx, int dy, int[] consumed) &#123;</div><div class="line">    // Do nothing</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>onNestedFling</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> * @param coordinatorLayout the CoordinatorLayout parent of the view this Behavior is</div><div class="line"> *                          associated with</div><div class="line"> * @param child the child view of the CoordinatorLayout this Behavior is associated with</div><div class="line"> * @param target the descendant view of the CoordinatorLayout performing the nested scroll</div><div class="line"> * @param velocityX horizontal velocity of the attempted fling</div><div class="line"> * @param velocityY vertical velocity of the attempted fling</div><div class="line"> * @param consumed true if the nested child view consumed the fling</div><div class="line"> * @return true if the Behavior consumed the fling</div><div class="line"> *</div><div class="line"> * @see NestedScrollingParent#onNestedFling(View, float, float, boolean)</div><div class="line"> */</div><div class="line">public boolean onNestedFling(CoordinatorLayout coordinatorLayout, V child, View target,</div><div class="line">        float velocityX, float velocityY, boolean consumed) &#123;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>onNestedScroll</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> * @param coordinatorLayout the CoordinatorLayout parent of the view this Behavior is</div><div class="line"> *                          associated with</div><div class="line"> * @param child the child view of the CoordinatorLayout this Behavior is associated with</div><div class="line"> * @param target the descendant view of the CoordinatorLayout performing the nested scroll</div><div class="line"> * @param dxConsumed horizontal pixels consumed by the target's own scrolling operation</div><div class="line"> * @param dyConsumed vertical pixels consumed by the target's own scrolling operation</div><div class="line"> * @param dxUnconsumed horizontal pixels not consumed by the target's own scrolling</div><div class="line"> *                     operation, but requested by the user</div><div class="line"> * @param dyUnconsumed vertical pixels not consumed by the target's own scrolling operation,</div><div class="line"> *                     but requested by the user</div><div class="line"> *</div><div class="line"> * @see NestedScrollingParent#onNestedScroll(View, int, int, int, int)</div><div class="line"> */</div><div class="line">public void onNestedScroll(CoordinatorLayout coordinatorLayout, V child, View target,</div><div class="line">        int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed) &#123;</div><div class="line">    // Do nothing</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>如果是码农的话上面的英文注释应该不难吧，这四个方法的区别如下：</p>
<ul>
<li><strong>onStartNestedScroll</strong> ：当你想要初始化一个滑动的时候调用</li>
<li><strong>onNestedPreScroll</strong> 和<strong>onNestedScroll</strong>：存在着两个方法的原因是一些Behaviors（比如和AppBarLayout使用的）可能会消费掉部分滚动事件，我们可以在onNestedPreScroll方法内部计算需要滚动的距离，具体的话<a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0818/3315.html" target="_blank" rel="external">请看这里</a></li>
<li><strong>onNestedScroll</strong>：当target正尝试滑动或者已经滑动时候调用这个方法</li>
<li><strong>onNestedFling</strong>：看到Fling就明白是这是Fling情况下调用的方法，Fling最直观的体现是你滑动一个ListView时松手的时候ListView还会因为惯性自动滑动一小段距离</li>
</ul>
<p>这么看可能太笼统了，看一下这一类Behavior的实际体现，我们自己自定义一个Behavior：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FadeBehavior</span> <span class="keyword">extends</span> <span class="title">FloatingActionButton</span>.<span class="title">Behavior</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 因为是在XML中使用app:layout_behavior定义静态的这种行为,</div><div class="line">     * 必须实现一个构造函数使布局的效果能够正常工作。</div><div class="line">     * 否则 Could not inflate Behavior subclass error messages.</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> attrs</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FadeBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理垂直方向上的滚动事件</div><div class="line">     *</div><div class="line">     *  <span class="doctag">@param</span> coordinatorLayout</div><div class="line">     *  <span class="doctag">@param</span> child</div><div class="line">     *  <span class="doctag">@param</span> directTargetChild</div><div class="line">     *  <span class="doctag">@param</span> target</div><div class="line">     *  <span class="doctag">@param</span> nestedScrollAxes</div><div class="line">     *  <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout,</span></span></div><div class="line">                                       FloatingActionButton child, View directTargetChild, View target, <span class="keyword">int</span> nestedScrollAxes) &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Ensure we react to vertical scrolling</span></div><div class="line">        <span class="keyword">return</span> nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL ||</div><div class="line">                <span class="keyword">super</span>.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target,</div><div class="line">                        nestedScrollAxes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检查Y的位置，并决定按钮是否动画进入或退出</div><div class="line">     * <span class="doctag">@param</span> coordinatorLayout</div><div class="line">     * <span class="doctag">@param</span> child</div><div class="line">     * <span class="doctag">@param</span> target</div><div class="line">     * <span class="doctag">@param</span> dxConsumed</div><div class="line">     * <span class="doctag">@param</span> dyConsumed</div><div class="line">     * <span class="doctag">@param</span> dxUnconsumed</div><div class="line">     * <span class="doctag">@param</span> dyUnconsumed</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(CoordinatorLayout coordinatorLayout, FloatingActionButton child,</span></span></div><div class="line">                               View target, <span class="keyword">int</span> dxConsumed, <span class="keyword">int</span> dyConsumed, <span class="keyword">int</span> dxUnconsumed, <span class="keyword">int</span> dyUnconsumed) &#123;</div><div class="line">        <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed,</div><div class="line">                dyUnconsumed);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dyConsumed &gt; <span class="number">0</span> &amp;&amp; child.getVisibility() == View.VISIBLE) &#123;</div><div class="line">            <span class="comment">// User scrolled down and the FAB is currently visible -&gt; hide the FAB</span></div><div class="line">            child.hide();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dyConsumed &lt; <span class="number">0</span> &amp;&amp; child.getVisibility() != View.VISIBLE) &#123;</div><div class="line">            <span class="comment">// User scrolled up and the FAB is currently not visible -&gt; show the FAB</span></div><div class="line">            child.show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里继承了FAB的Behavior写了一个我们自己的实现，注意实现自己的Behavior的时候一定要重写两个参数的构造方法，因为CoordinatorLayout会从我们在XML中定义的app:layout_behavior属性去找这个Behavior，了解自定义View的对这个应该不会陌生，一般的写法是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_behavior=<span class="string">".FadeBehavior "</span></div></pre></td></tr></table></figure>
<p>在查资料的过程中发现很多人把自定义Behavior类所在的包名也写进去了，其实亲测没必要这样做，而且CoordinatorLayout里面也有专门的方法去解析：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> Behavior <span class="title">parseBehavior</span><span class="params">(Context context, AttributeSet attrs, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(name)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> String fullName;</div><div class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">"."</span>)) &#123;</div><div class="line">            <span class="comment">// Relative to the app package. Prepend the app package name.</span></div><div class="line">            fullName = context.getPackageName() + name;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.indexOf(<span class="string">'.'</span>) &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">// Fully qualified package name.</span></div><div class="line">            fullName = name;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Assume stock behavior in this package (if we have one)</span></div><div class="line">            fullName = !TextUtils.isEmpty(WIDGET_PACKAGE_NAME)</div><div class="line">                    ? (WIDGET_PACKAGE_NAME + <span class="string">'.'</span> + name)</div><div class="line">                    : name;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Map&lt;String, Constructor&lt;Behavior&gt;&gt; constructors = sConstructors.get();</div><div class="line">            <span class="keyword">if</span> (constructors == <span class="keyword">null</span>) &#123;</div><div class="line">                constructors = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">                sConstructors.set(constructors);</div><div class="line">            &#125;</div><div class="line">            Constructor&lt;Behavior&gt; c = constructors.get(fullName);</div><div class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">final</span> Class&lt;Behavior&gt; clazz = (Class&lt;Behavior&gt;) Class.forName(fullName, <span class="keyword">true</span>,</div><div class="line">                        context.getClassLoader());</div><div class="line">                c = clazz.getConstructor(CONSTRUCTOR_PARAMS);</div><div class="line">                c.setAccessible(<span class="keyword">true</span>);</div><div class="line">                constructors.put(fullName, c);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> c.newInstance(context, attrs);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Could not inflate Behavior subclass "</span> + fullName, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看到用这种方式的系统会自动给我们加上包名，写太多反而显的累赘，这个自定义Behavior应该很好理解，效果就是随着RecycleView的滑动FAB会隐藏/显示，是一个很常见的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-8e9af07adf1d369e.jpg?imageMogr2/auto-orient/strip" alt="常见效果"></p>
<p>只要向上滚动FAB就会消失，向下滚动FAB就是显示，这里要注意的是FAB可以与RecycleView形成这种效果，但是暂时并不支持ListView，没关系，反正RecycleView当成ListView来用就好，接下来仿照实现知乎的FAB效果的实现，先看一下知乎的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-08e8d14c491535e9.jpg?imageMogr2/auto-orient/strip" alt="知乎的效果"></p>
<p>可以很清楚的看到FAB随着RecycleView的滑动呈现出滚动推出的效果，并且点击FAB会出现旋转效果并且弹出一个蒙版，我们可以先自定义一个用于执行FAB旋转的Behavior，可以看到这里FAB是逆时针旋转135度，那么代码就可以这么写：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RotateBehavior</span> <span class="keyword">extends</span> <span class="title">CoordinatorLayout</span>.<span class="title">Behavior</span>&lt;<span class="title">FloatingActionButton</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = RotateBehavior.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RotateBehavior</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RotateBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, FloatingActionButton child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> Snackbar.SnackbarLayout;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, FloatingActionButton child, View dependency)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> translationY = getFabTranslationYForSnackBar(parent, child);</div><div class="line">        <span class="keyword">float</span> percentComplete = -translationY / dependency.getHeight();</div><div class="line">        child.setRotation(-<span class="number">135</span> * percentComplete);</div><div class="line">        child.setTranslationY(translationY);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">float</span> <span class="title">getFabTranslationYForSnackBar</span><span class="params">(CoordinatorLayout parent,</span></span></div><div class="line">                                                FloatingActionButton fab) &#123;</div><div class="line">        <span class="keyword">float</span> minOffset = <span class="number">0</span>;</div><div class="line">        <span class="keyword">final</span> List&lt;View&gt; dependencies = parent.getDependencies(fab);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, z = dependencies.size(); i &lt; z; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View view = dependencies.get(i);</div><div class="line">            <span class="keyword">if</span> (view <span class="keyword">instanceof</span> Snackbar.SnackbarLayout &amp;&amp; parent.doViewsOverlap(fab, view)) &#123;</div><div class="line">                <span class="comment">//view.getHeight()固定为144</span></div><div class="line">                <span class="comment">//ViewCompat.getTranslationY(view)从144-0，再从0-144</span></div><div class="line">                minOffset = Math.min(minOffset,</div><div class="line">                        ViewCompat.getTranslationY(view) - view.getHeight());</div><div class="line">                Log.d(<span class="string">"TranslationY"</span>,ViewCompat.getTranslationY(view)+<span class="string">""</span>);</div><div class="line">                Log.d(<span class="string">"Height"</span>,view.getHeight()+<span class="string">""</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> minOffset;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可能就这段代码比较难理解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">minOffset = Math.min(minOffset,</div><div class="line">                        ViewCompat.getTranslationY(view) - view.getHeight());</div></pre></td></tr></table></figure>
<p>我在上面打了两个Log，分别得出了<code>ViewCompat.getTranslationY(view)</code> 和<code>view.getHeight()</code> ，这样看代码就比较容易看懂，但是为什么<code>ViewCompat.getTranslationY(view)</code> 是正数呢，这里的的View我们都知道指的是SnackBar，我们都知道向上移动的话<code>getTranslationY</code> 应该是负数啊，其实SnackBar的源代码中有一个这样的动作：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ViewCompat.setTranslationY(mView, mView.getHeight());</div><div class="line">            ViewCompat.animate(mView)</div><div class="line">                    .translationY(<span class="number">0f</span>)</div><div class="line">                    .setInterpolator(FAST_OUT_SLOW_IN_INTERPOLATOR)</div><div class="line">                    .setDuration(ANIMATION_DURATION)</div></pre></td></tr></table></figure>
<p>也就是说SnackBar一开始就向下移动了mView.getHeight()的长度，当SnackBar出现的时候只是向着它原来的位置移动，本质上还是相当于从它原来的位置移动了一段距离，只是这个距离随着SnackBar向上浮动的越来越多而变得越来越小，直至回到原来的位置，这么说应该可以理解了，接下来我们在XML文件中加入一个TextView作为蒙版：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/hide&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;#ffff&quot;</div><div class="line">    android:visibility=&quot;gone&quot; /&gt;</div></pre></td></tr></table></figure>
<p>因为CoordinatorLayout相当于帧布局是一层一层叠加的所以这个蒙版放在RecycleView和FAB中间，整个布局代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:id=&quot;@+id/coor&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v7.widget.RecyclerView</div><div class="line">        android:id=&quot;@+id/mRecycleView&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.v7.widget.RecyclerView&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/hide&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:background=&quot;#ffff&quot;</div><div class="line">        android:visibility=&quot;gone&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.FloatingActionButton</div><div class="line">        android:id=&quot;@+id/fab&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_marginBottom=&quot;@dimen/fab_margin_bottom&quot;</div><div class="line">        android:layout_marginEnd=&quot;@dimen/fab_margin_right&quot;</div><div class="line">        android:src=&quot;@mipmap/plus&quot;</div><div class="line">        app:backgroundTint=&quot;#0767C8&quot;</div><div class="line">        app:borderWidth=&quot;0dp&quot;</div><div class="line">        app:elevation=&quot;6dp&quot;</div><div class="line">        app:fabSize=&quot;normal&quot;</div><div class="line">        app:layout_anchor=&quot;@id/mRecycleView&quot;</div><div class="line">        app:layout_anchorGravity=&quot;bottom|right|end&quot;</div><div class="line">        app:layout_behavior=&quot;.FadeBehavior&quot;</div><div class="line">        app:pressedTranslationZ=&quot;12dp&quot;</div><div class="line">        app:rippleColor=&quot;#0767C8&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p>看看效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-85f0b2d01a407941.jpg?imageMogr2/auto-orient/strip" alt="效果"></p>
<p>是不是有一个很奇怪的地方，知乎的FAB并没有SnackBar弹出啊，那就说明一开始的思路错了，但是一个FAB只能设置一个<code>app:layout_behavior</code> ，如果我们把这个Behavior用作FAB的旋转效果那么FAB的滚动移出视图的效果就没了，所以换一种思路，用Object动画来做FAB的旋转效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">  <span class="comment">//开始旋转</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnLeft</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(v, <span class="string">"rotation"</span>, <span class="number">0</span>, -<span class="number">155</span>, -<span class="number">135</span>);</div><div class="line">        objectAnimator.setDuration(<span class="number">300</span>);</div><div class="line">        objectAnimator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</div><div class="line">        objectAnimator.start();</div><div class="line">        hide.setVisibility(View.VISIBLE);</div><div class="line">        AlphaAnimation alphaAnimation = <span class="keyword">new</span> AlphaAnimation(<span class="number">0</span>, <span class="number">0.75f</span>);</div><div class="line">        alphaAnimation.setDuration(<span class="number">300</span>);</div><div class="line">        alphaAnimation.setFillAfter(<span class="keyword">true</span>);</div><div class="line">        hide.startAnimation(alphaAnimation);</div><div class="line">        hide.setClickable(<span class="keyword">true</span>);</div><div class="line">        isOpen = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//回到起始位置</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">turnRight</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        ObjectAnimator objectAnimator = ObjectAnimator.ofFloat(v, <span class="string">"rotation"</span>, -<span class="number">135</span>, <span class="number">20</span>, <span class="number">0</span>);</div><div class="line">        objectAnimator.setDuration(<span class="number">300</span>);</div><div class="line">        objectAnimator.setInterpolator(<span class="keyword">new</span> AccelerateDecelerateInterpolator());</div><div class="line">        objectAnimator.start();</div><div class="line">        hide.setVisibility(View.GONE);</div><div class="line">        AlphaAnimation alphaAnimation = <span class="keyword">new</span> AlphaAnimation(<span class="number">0.75f</span>, <span class="number">0</span>);</div><div class="line">        alphaAnimation.setDuration(<span class="number">300</span>);</div><div class="line">        alphaAnimation.setFillAfter(<span class="keyword">true</span>);</div><div class="line">        hide.startAnimation(alphaAnimation);</div><div class="line">        hide.setClickable(<span class="keyword">false</span>);</div><div class="line">        isOpen = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"><span class="comment">//注:hide就是TextView控件(蒙版)</span></div></pre></td></tr></table></figure>
<p>然后实现FAB的滚动移出视图效果的Behavior：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollAwareFABBehavior</span> <span class="keyword">extends</span> <span class="title">FloatingActionButton</span>.<span class="title">Behavior</span> </span>&#123;</div><div class="line">    <span class="comment">//先慢后快再慢</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Interpolator INTERPOLATOR = <span class="keyword">new</span> FastOutSlowInInterpolator();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsAnimatingOut = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollAwareFABBehavior</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//初始条件</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onStartNestedScroll</span><span class="params">(<span class="keyword">final</span> CoordinatorLayout coordinatorLayout, <span class="keyword">final</span> FloatingActionButton child,</span></span></div><div class="line">                                       <span class="keyword">final</span> View directTargetChild, <span class="keyword">final</span> View target, <span class="keyword">final</span> <span class="keyword">int</span> nestedScrollAxes) &#123;</div><div class="line">        <span class="comment">//垂直滚动</span></div><div class="line">        <span class="keyword">return</span> nestedScrollAxes == ViewCompat.SCROLL_AXIS_VERTICAL</div><div class="line">                || <span class="keyword">super</span>.onStartNestedScroll(coordinatorLayout, child, directTargetChild, target, nestedScrollAxes);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNestedScroll</span><span class="params">(<span class="keyword">final</span> CoordinatorLayout coordinatorLayout, <span class="keyword">final</span> FloatingActionButton child,</span></span></div><div class="line">                               <span class="keyword">final</span> View target, <span class="keyword">final</span> <span class="keyword">int</span> dxConsumed, <span class="keyword">final</span> <span class="keyword">int</span> dyConsumed,</div><div class="line">                               <span class="keyword">final</span> <span class="keyword">int</span> dxUnconsumed, <span class="keyword">final</span> <span class="keyword">int</span> dyUnconsumed) &#123;</div><div class="line">        <span class="keyword">super</span>.onNestedScroll(coordinatorLayout, child, target, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed);</div><div class="line">        <span class="keyword">if</span> (dyConsumed &gt; <span class="number">0</span> &amp;&amp; !<span class="keyword">this</span>.mIsAnimatingOut &amp;&amp; child.getVisibility() == View.VISIBLE) &#123;</div><div class="line">            <span class="comment">// User scrolled down and the FAB is currently visible -&gt; hide the FAB</span></div><div class="line">            animateOut(child);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dyConsumed &lt; <span class="number">0</span> &amp;&amp; child.getVisibility() != View.VISIBLE) &#123;</div><div class="line">            <span class="comment">// User scrolled up and the FAB is currently not visible -&gt; show the FAB</span></div><div class="line">            animateIn(child);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Same animation that FloatingActionButton.Behavior uses to hide the FAB when the AppBarLayout exits</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animateOut</span><span class="params">(<span class="keyword">final</span> FloatingActionButton button)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">14</span>) &#123;</div><div class="line">            <span class="comment">//withLayer()使动画中的某些操作变得更顺畅,加速渲染,API 14以后</span></div><div class="line">            ViewCompat.animate(button).translationY(button.getHeight() + getMarginBottom(button)).setInterpolator(INTERPOLATOR).withLayer()</div><div class="line">                    .setListener(<span class="keyword">new</span> ViewPropertyAnimatorListener() &#123;</div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationStart</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                            ScrollAwareFABBehavior.<span class="keyword">this</span>.mIsAnimatingOut = <span class="keyword">true</span>;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationCancel</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                            ScrollAwareFABBehavior.<span class="keyword">this</span>.mIsAnimatingOut = <span class="keyword">false</span>;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationEnd</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                            ScrollAwareFABBehavior.<span class="keyword">this</span>.mIsAnimatingOut = <span class="keyword">false</span>;</div><div class="line">                            view.setVisibility(View.GONE);</div><div class="line">                        &#125;</div><div class="line">                    &#125;).start();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// Same animation that FloatingActionButton.Behavior uses to show the FAB when the AppBarLayout enters</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">animateIn</span><span class="params">(FloatingActionButton button)</span> </span>&#123;</div><div class="line">        button.setVisibility(View.VISIBLE);</div><div class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">14</span>) &#123;</div><div class="line">            ViewCompat.animate(button).translationY(<span class="number">0</span>)</div><div class="line">                    .setInterpolator(INTERPOLATOR).withLayer().setListener(<span class="keyword">null</span>)</div><div class="line">                    .start();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getMarginBottom</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> marginBottom = <span class="number">0</span>;</div><div class="line">        <span class="keyword">final</span> ViewGroup.LayoutParams layoutParams = v.getLayoutParams();</div><div class="line">        <span class="keyword">if</span> (layoutParams <span class="keyword">instanceof</span> ViewGroup.MarginLayoutParams) &#123;</div><div class="line">            marginBottom = ((ViewGroup.MarginLayoutParams) layoutParams).bottomMargin;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> marginBottom;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>最后实现的效果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-dfaae781fc36cd63.jpg?imageMogr2/auto-orient/strip" alt="最终效果"></p>
<p>这里部分参考了<a href="http://blog.csdn.net/qq_22770457/article/details/50978774" target="_blank" rel="external"><strong>仿知乎FloatingActionButton浮动按钮动画效果实现</strong></a></p>
<p>至于FAB弹出的InBox这里就不去实现了，比较麻烦，可以参考第三方的实现：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/735909-22e7010e0101db39.jpg?imageMogr2/auto-orient/strip" alt="第三方实现"><br><a href="https://github.com/550609334/FloatingActionButtonPlus" target="_blank" rel="external"><strong>FloatingActionButtonPlus</strong></a></p>
<h4 id="写在末尾"><a href="#写在末尾" class="headerlink" title="写在末尾"></a>写在末尾</h4><p><strong>主要参考：</strong><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0716/3194.html" target="_blank" rel="external">浮动操作按钮的选择</a><br><a href="http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/FloatingActionButton.Behavior.html" target="_blank" rel="external">FloatingActionButton.Behavior</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0718/3197.html" target="_blank" rel="external">codepath教程：浮动操作按钮详解</a><br><a href="http://antonioleiva.com/floating-action-button/" target="_blank" rel="external">Design Support Library (II): Floating Action Button</a><br><a href="http://blog.csdn.net/qibin0506/article/details/50290421" target="_blank" rel="external">CoordinatorLayout高级用法-自定义Behavior</a></p>
<p><a href="http://download.csdn.net/detail/wei_smile/9517147" target="_blank" rel="external">项目源代码</a><br><a href="https://github.com/GiitSmile/FloatingActionButtonDemo/blob/master/README.md" target="_blank" rel="external">GitHub地址</a></p>
<p>写文章不容易，如果可以的话请给个赞</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;如果说前面提到的TextInputLayout、SnackBar的应用还不是很常见的话，那么今天提到的FloatingActionButton绝对是一个随处可见的Material Design控件了，无论是我们常用的知乎、印象笔记或者是可爱的谷歌全家桶套装都可以见到FloatingActionButton的身影，今天就来说说FloatingActionButton。&lt;/p&gt;
&lt;h4 id=&quot;关于使用&quot;&gt;&lt;a href=&quot;#关于使用&quot; class=&quot;headerlink&quot; title=&quot;关于使用&quot;&gt;&lt;/a&gt;关于使用&lt;/h4&gt;&lt;p&gt;其实我相信很多人都用过了Material Design控件了，但是还是要说一下，毕竟有些人接触的晚一些，一些人接触的早一些，先从最简单的使用看起：&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="Material Design" scheme="https:///www.limuyang.cc/tags/Material-Design/"/>
    
      <category term="Google" scheme="https:///www.limuyang.cc/tags/Google/"/>
    
      <category term="FloatingActionButton" scheme="https:///www.limuyang.cc/tags/FloatingActionButton/"/>
    
  </entry>
  
  <entry>
    <title>Android Design Support Library--简约而不简单的SnackBar</title>
    <link href="https:///www.limuyang.cc/2016/05/07/Android-Design-Support-Library-%E7%AE%80%E7%BA%A6%E8%80%8C%E4%B8%8D%E7%AE%80%E5%8D%95%E7%9A%84SnackBar/"/>
    <id>https:///www.limuyang.cc/2016/05/07/Android-Design-Support-Library-简约而不简单的SnackBar/</id>
    <published>2016-05-07T12:15:16.000Z</published>
    <updated>2017-09-12T12:19:25.801Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>在之前我有提到这一篇Android Design Support Library系列文章是关于SnackBar的，但是由于要用到CoordinatorLayout所以先翻译了一篇相关文章，如果还不了解的可以先看一下<strong><a href="http://blog.csdn.net/wei_smile/article/details/51306688" target="_blank" rel="external">Android Design Support Library–使用CoordinatorLayout来处理滚动</a></strong> ，这一篇我们讲SnackBar，SnackBar其实就是Toast的升级版，他们之间最大的不同就是：SnackBar会对我们的操作提供一个轻量级的反馈，并且可以对点击事件做出响应，如果是在手机上使用一个SnackBar的话，我们会看到在屏幕底部出现一条简短的信息，如果是在更大的屏幕上这条信息应该会显示在左下角，并且当一个SnackBar显示的时候它是凌驾于当前所有屏幕元素之上的，我们在屏幕上一次只能显示一个SnackBar，如果这么讲不是很清楚的话，我们先来看一个小Demo，通过代码驱动理解是比较好的方式。<br><a id="more"></a></p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>根据SnackBar的特点，在屏幕上显示出不同的SnackBar，效果如下：</p>
<p><img src="http://img.blog.csdn.net/20160507110336476" alt="这里写图片描述"></p>
<p>先看一下相关的API文档：</p>
<table>
<thead>
<tr>
<th style="text-align:center">方法类型</th>
<th style="text-align:center">方法</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">void</td>
<td style="text-align:center">dismiss()</td>
<td style="text-align:center">使SnackBar消失</td>
</tr>
<tr>
<td style="text-align:center">int</td>
<td style="text-align:center">getDuration()</td>
<td style="text-align:center">返回SnackBar的持续时间</td>
</tr>
<tr>
<td style="text-align:center">View</td>
<td style="text-align:center">getView()</td>
<td style="text-align:center">返回当前SnackBar的View</td>
</tr>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">isShown()</td>
<td style="text-align:center">判断该SnackBar是否正在显示</td>
</tr>
<tr>
<td style="text-align:center">boolean</td>
<td style="text-align:center">isShownOrQueued()</td>
<td style="text-align:center">判断该SnackBar是否正在显示或者排队等待即将要显示</td>
</tr>
<tr>
<td style="text-align:center">static Snackbar</td>
<td style="text-align:center">make(View view, int resId, int duration)</td>
<td style="text-align:center">新建一个用来显示信息的SnackBar</td>
</tr>
<tr>
<td style="text-align:center">static Snackbar</td>
<td style="text-align:center">make(View view, CharSequence text, int duration)</td>
<td style="text-align:center">同上</td>
</tr>
<tr>
<td style="text-align:center">Snackbar</td>
<td style="text-align:center">setAction(int resId, View.OnClickListener listener)</td>
<td style="text-align:center">设置这个即将显示的SnackBar的动作</td>
</tr>
<tr>
<td style="text-align:center">Snackbar</td>
<td style="text-align:center">setAction(CharSequence text, View.OnClickListener listener)</td>
<td style="text-align:center">同上</td>
</tr>
<tr>
<td style="text-align:center">Snackbar</td>
<td style="text-align:center">setActionTextColor(ColorStateList colors)</td>
<td style="text-align:center">设置action的文字颜色(右边的)</td>
</tr>
<tr>
<td style="text-align:center">Snackbar</td>
<td style="text-align:center">setActionTextColor(int color)</td>
<td style="text-align:center">同上</td>
</tr>
<tr>
<td style="text-align:center">Snackbar</td>
<td style="text-align:center">setCallback(Snackbar.Callback callback)</td>
<td style="text-align:center">设置一个回调，当SnackBar的可见性改变的时候调用</td>
</tr>
<tr>
<td style="text-align:center">Snackbar</td>
<td style="text-align:center">setDuration(int duration)</td>
<td style="text-align:center">设置SnackBar信息的显示时间</td>
</tr>
<tr>
<td style="text-align:center">Snackbar</td>
<td style="text-align:center">setText(int resId)</td>
<td style="text-align:center">更新SnackBar上显示的文字</td>
</tr>
<tr>
<td style="text-align:center">Snackbar</td>
<td style="text-align:center">setText(CharSequence message)</td>
<td style="text-align:center">同上</td>
</tr>
<tr>
<td style="text-align:center">void</td>
<td style="text-align:center">show()</td>
<td style="text-align:center">显示SnackBar，最后一定要调用这个方法，不然SnackBar不显示，联想Toast</td>
</tr>
</tbody>
</table>
<hr>
<p>可以看到Demo上显示了三种不同的SnackBar，我们都知道SnackBar是Toast的升级版，但也说明了一个问题那就是SnackBar是用来显示消息的，同时根据你的需求不同可以对这些消息做出一定的响应动作，下面分析三种显示消息方式的不同：</p>
<ul>
<li>普通的SnackBar</li>
</ul>
<p>也许有的人并没有过多的需求，只是单纯地想把SnackBar当作一个显示消息的控件而已，那么可以很简单的在代码中这么使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Snackbar.make(mCoor, R.string.normal, Snackbar.LENGTH_SHORT).show();</div></pre></td></tr></table></figure>
<p>对比一下我们的Toast方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>,R.string.normal,Toast.LENGTH_SHORT).show();</div></pre></td></tr></table></figure>
<p>是不是很像，没错简单的使用的话SnackBar跟Toast并没有多大区别，但是动画效果上是有差异的，如果你注意到了这一点：</p>
<p><img src="http://img.blog.csdn.net/20160507111906669" alt="这里写图片描述"></p>
<p>看，这个侧边滑动消失的效果只有当你使用CoordinatorLayout作为根布局才有，这就是为什么在写SnackBar之前我要先说明一下CoordinatorLayout的原因，如果你使用普通的LinearLayout或者RelativeLayout是不会有这种动画交互效果的，另外，<strong>注意</strong><br>SnackBar的make方法有两种重载方法，分别是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make(View view, <span class="keyword">int</span> resId, <span class="keyword">int</span> duration)</div></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make(View view, CharSequence text, <span class="keyword">int</span> duration)</div></pre></td></tr></table></figure>
<p>这里有三个参数，第一个参数View表示的意思是我们传入一个View，然后SnackBar会遍历整个View Tree来找到一个合适的View承载SnackBar的View，如果你想要实现上面的动画交互效果的话最好是传入CoordinatorLayout对象，第二个参数的话是两个重载方法不同的地方，有一种是我们熟知的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Snackbar.make(mCoor, <span class="string">"普通的SnackBar"</span>, Snackbar.LENGTH_SHORT).show();</div></pre></td></tr></table></figure>
<p>还有一种要求传入一个ID，注意这个ID并不是指其他的什么，就是你在string.xml文件中定义的字符串资源的ID，比如这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Snackbar.make(mCoor, R.string.normal, Snackbar.LENGTH_SHORT).show();</div></pre></td></tr></table></figure>
<p>然后第三个参数是SnackBar的持续时间，只有三种：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、Snackbar.LENGTH_INDEFINITE 一直显示直到另一个SnackBar出现或者主动调用了dismiss()方法</div><div class="line">2、Snackbar.LENGTH_SHORT 显示较短的时间</div><div class="line">3、Snackbar.LENGTH_LONG  显示较长的时间</div></pre></td></tr></table></figure>
<p>但是官方文档是这么描述的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">either be one of the predefined lengths: LENGTH_SHORT, LENGTH_LONG, or a custom duration in milliseconds.</div></pre></td></tr></table></figure>
<p>说是可以自定义显示时间，但是我自己试了确实不可以，应该是API文档的一个小bug，如果谁试成功了赶紧告诉我~~<br>如果使用过Toast的话上面的应该很好理解，好了，如果你的业务中对SnackBar并没有更多的要求，那么最普通的SnackBar应该满足了，接下来看稍微高级一点的：</p>
<ul>
<li>带回调的SnackBar：</li>
</ul>
<p>如果还不太清楚回调的话可以看看这个<strong><a href="http://blog.csdn.net/wei_smile/article/details/51040034" target="_blank" rel="external">Android回调函数机制那点事</a></strong> ，讲这个之前先提一点，如果我们想更加灵活的使用Snackbar的话最好是先持有它的引用，也就是：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Snackbar mSnackBar</div></pre></td></tr></table></figure>
<p>原因很简单，你会发现上面提供的常用API中很多方法都是非静态方法并不是静态方法，你要调用的话只能通过SnackBar对象去调用。</p>
<p>然后说SnackBar回调之前先说一下Action，SnackBar提供了一个setAction方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>、setAction(<span class="keyword">int</span> resId, View.OnClickListener listener)</div><div class="line"><span class="number">2</span>、setAction(CharSequence text, View.OnClickListener listener)</div></pre></td></tr></table></figure>
<p>同样是两个重载方法，第一个参数跟前面解释的一样，第二个参数是我们熟知的对点击事件的监听，使用方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Snackbar.make(mCoor,R.string.callback,Snackbar.LENGTH_SHORT)</div><div class="line">                        .setAction(R.string.UNDO, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">                            &#125;</div><div class="line">                        &#125;).show();</div></pre></td></tr></table></figure>
<p>看一下效果：</p>
<p><img src="http://img.blog.csdn.net/20160507114025959" alt="这里写图片描述"></p>
<p>当我们调用了setAction方法并且传入一个字符串之后，SnackBar的右下角就会呈现出我们传入的字符串，并且这个字符串是可点击的，我们可以在点击事件里面做出响应，比如说跳转Activity或者弹出一个Toast等等，这里默认你点击了这个Action这个SnackBar是会消失的。也就是无论你的duration参数设置的是一直显示还是显示多长时间都会消失。</p>
<p>有些人可能对右下角这个文字的颜色不满足想要改变，没问题，你想到的Google都给你想好了，SnackBar专门提供了方法来更改Action的文字颜色:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">1、setActionTextColor(ColorStateList colors)</div><div class="line">2、setActionTextColor(int color)</div></pre></td></tr></table></figure>
<p>这里第一种方式不建议用，太复杂，你要想这么用也行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Resources resource = (Resources) getBaseContext().getResources();</div><div class="line">       ColorStateList csl = (ColorStateList) resource.getColorStateList(R.color.PeachPuff);</div><div class="line">       mSnackBar.setActionTextColor(csl);</div></pre></td></tr></table></figure>
<p>这是网上找到的一种方式，但是我还是推荐使用第二种方式来更改Action的文字颜色，可以看到是我们熟悉的传入一个int型的值，我提供如下几种方式更改：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1、mSnackBar.setActionTextColor(Color.rgb(232,44,123))</div><div class="line">2、mSnackBar.setActionTextColor(Color.BLUE)</div><div class="line">3、mSnackBar.setActionTextColor(Color.parseColor(&quot;#FFDAB9&quot;));</div></pre></td></tr></table></figure>
<p>对了，我还发现一种额外的方式，我们现在使用Android Studio创建新的Project时候系统都会默认在style.xml文件夹下面生成这个：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar"&gt;</div><div class="line">        &lt;!-- Customize your theme here. --&gt;</div><div class="line">        &lt;item name="colorPrimary"&gt;@color/colorPrimary&lt;/item&gt;</div><div class="line">        &lt;item name="colorPrimaryDark"&gt;@color/colorPrimaryDark&lt;/item&gt;</div><div class="line">        &lt;item name="colorAccent"&gt;@color/colorAccent&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div></pre></td></tr></table></figure>
<p>这里的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;item name=&quot;colorAccent&quot;&gt;@color/colorAccent&lt;/item&gt;</div></pre></td></tr></table></figure>
<p>其实也可以更改Action文字颜色，而且默认的Action文字颜色就是这里设置的颜色，但是有一个缺点就是如果你改动了这里，那么很多Material Design控件的相关颜色都会改变，如果你看过我之前写的<a href="http://blog.csdn.net/wei_smile/article/details/51284964" target="_blank" rel="external"><strong>Android Design Support Library–TextInputLayout的使用</strong></a>你会知道TextInputLayout下划线的颜色也是通过这个属性来更改的，所以为了稳定起见还是使用官方提供的方法去更改吧，我这纯属抖个机灵。</p>
<p>那么回到正题，讲讲SnackBar的回调，眼尖的朋友可能发现了，我的Demo里面带回调的SnackBar在弹出和消失的时候都会有Toast通知出现，其实就是使用了SnackBar自带的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setCallback(Snackbar.Callback callback)</div></pre></td></tr></table></figure>
<p>方法，这里需要传入一个<code>Snackbar.Callback callback</code> 参数，其实这个，这个Callback 是SnackBar内部的一个抽象类，它内部有两个空实现的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">onDismissed(Snackbar snackbar, <span class="keyword">int</span> event)</div><div class="line"></div><div class="line">onShown(Snackbar snackbar)</div></pre></td></tr></table></figure>
<p>顾名思义，我们可以可以分别在这两个方法中定义出当SnackBar消失和产生时我们需要做的事，这两个方法会在SnackBar消失和产生时被回调，打个比方：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mSnackBar.setCallback(<span class="keyword">new</span> Snackbar.Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDismissed</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> event)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onDismissed(snackbar, event);</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"SnackBar Dismiss"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShown</span><span class="params">(Snackbar snackbar)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onShown(snackbar);</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"SnackBar Show"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这样就实现了在SnackBar消失和产生时弹出Toast通知的动作，其他具体的逻辑可以自己去实现。</p>
<h4 id="完全自定义你自己的SnackBar"><a href="#完全自定义你自己的SnackBar" class="headerlink" title="完全自定义你自己的SnackBar"></a>完全自定义你自己的SnackBar</h4><p>如果你对上述使用还是不甚满意，那么接下来我教你怎么自定义你自己的SnackBar，说实话用到的场景并不多，但是学了就学个透彻，这一部分知识的灵感来自于<a href="http://www.jianshu.com/p/cd1e80e64311" target="_blank" rel="external"><strong>没时间解释了，快使用Snackbar!</strong></a> ，SnackBar并没有提供更改背景或者其他样式的方法，但是我们可以通过查看源码来试试可不可以自定义自己样式，我们找到这么一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="title">Snackbar</span><span class="params">(ViewGroup parent)</span> </span>&#123;</div><div class="line">    mTargetParent = parent;</div><div class="line">    mContext = parent.getContext();</div><div class="line"></div><div class="line">    ThemeUtils.checkAppCompatTheme(mContext);</div><div class="line"></div><div class="line">    LayoutInflater inflater = LayoutInflater.from(mContext);</div><div class="line">    mView = (SnackbarLayout) inflater.inflate(</div><div class="line">            R.layout.design_layout_snackbar, mTargetParent, <span class="keyword">false</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后一行的inflate是不是很熟悉，我们可不可以认为Snackbar的布局就是这么加载的，这个SnackBarLayout是在SnackBar内部定义的一个继承自LinearLayout的内部类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SnackbarLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">       <span class="keyword">private</span> TextView mMessageView;</div><div class="line">       <span class="keyword">private</span> Button mActionView;</div><div class="line"></div><div class="line">       <span class="keyword">private</span> <span class="keyword">int</span> mMaxWidth;</div><div class="line">       <span class="keyword">private</span> <span class="keyword">int</span> mMaxInlineActionWidth;</div></pre></td></tr></table></figure>
<p>看到这几个变量的定义，我已经确定了上面的想法，接下来我们找到上面代码加载的那段布局：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;merge xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line">&lt;TextView</div><div class="line">        android:id="@+id/snackbar_text"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_weight="1"</div><div class="line">        android:paddingTop="14dp"</div><div class="line">        android:paddingBottom="14dp"</div><div class="line">        android:paddingLeft="12dp"</div><div class="line">        android:paddingRight="12dp"</div><div class="line">        android:textAppearance="@style/TextAppearance.Design.Snackbar.Message"</div><div class="line">        android:maxLines="2"</div><div class="line">        android:layout_gravity="center_vertical|left|start"</div><div class="line">        android:ellipsize="end"</div><div class="line">        android:textAlignment="viewStart"/&gt;</div><div class="line"></div><div class="line">&lt;Button</div><div class="line">        android:id="@+id/snackbar_action"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_marginLeft="0dp"</div><div class="line">        android:layout_marginStart="0dp"</div><div class="line">        android:layout_gravity="center_vertical|right|end"</div><div class="line">        android:paddingTop="14dp"</div><div class="line">        android:paddingBottom="14dp"</div><div class="line">        android:paddingLeft="12dp"</div><div class="line">        android:paddingRight="12dp"</div><div class="line">        android:visibility="gone"</div><div class="line">        android:textColor="?attr/colorAccent"</div><div class="line">        style="?attr/borderlessButtonStyle"/&gt;</div><div class="line">&lt;/merge&gt;</div></pre></td></tr></table></figure>
<p>看到这两个控件的ID了么</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">android:id=<span class="string">"@+id/snackbar_text"</span></div><div class="line">android:id=<span class="string">"@+id/snackbar_action"</span></div></pre></td></tr></table></figure>
<p>那么第一个就是SnackBar左边显示的message，第二个就是我们设置了action时候显示的Button咯，这就简单了，如果你仔细看了上面提供的API文档你会发现有这么一个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span> <span class="params">()</span></span></div><div class="line"></div><div class="line">Returns the Snackbar's view.</div></pre></td></tr></table></figure>
<p>这个方法可以返回我们SnackBar的View，那么这个View是什么，看源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Returns the &#123;<span class="doctag">@link</span> Snackbar&#125;'s view.</div><div class="line"> */</div><div class="line"><span class="meta">@NonNull</span></div><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> mView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>找一下mView在哪里定义的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> SnackbarLayout mView;</div><div class="line">mView = (SnackbarLayout) inflater.inflate(</div><div class="line">                R.layout.design_layout_snackbar, mTargetParent, <span class="keyword">false</span>);</div></pre></td></tr></table></figure>
<p>好了，这下一切都清楚了，接下里示范一下怎么自定义你自己的SnackBar：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> View view;</div><div class="line"></div><div class="line">     ....省略中间代码</div><div class="line">     </div><div class="line"> view = mCustomSnackBar.getView();</div><div class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">            view.setBackgroundColor(Color.parseColor(<span class="string">"#7B68EE"</span>));</div><div class="line">            <span class="comment">//获取Snackbar的message控件，修改字体颜色</span></div><div class="line">            ((TextView) view.findViewById(R.id.snackbar_text)).setTextColor(Color.parseColor(<span class="string">"#FFDAB9"</span>));</div><div class="line">            <span class="comment">//添加图标</span></div><div class="line">            Snackbar.SnackbarLayout snackbarLayout = (Snackbar.SnackbarLayout) view;</div><div class="line">            <span class="comment">//添加自定义布局，这里布局就包含了一个ImageView</span></div><div class="line">            <span class="comment">//custom_layout是你自定义的布局</span></div><div class="line">            View add_view = LayoutInflater.from(view.getContext()).inflate(R.layout.custom_layout, <span class="keyword">null</span>);</div><div class="line">            LinearLayout.LayoutParams p = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">            p.gravity = Gravity.CENTER_VERTICAL;</div><div class="line">            <span class="comment">//数字表示新加的布局在SnackBar中的位置，从0开始,取决于你SnackBar里面有多少个子View</span></div><div class="line">            snackbarLayout.addView(add_view, <span class="number">0</span>, p);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p><strong>最后一行，addView方法第二个参数表示新加的布局在SnackBar中的位置，注意不要超过总的View的个数不然会报错</strong>，message和Action text分别算一个View，其他的话注释已经写得很清楚就不一一解释了，这个代码呈现的效果如下：</p>
<p><img src="http://img.blog.csdn.net/20160507124757478" alt="这里写图片描述"></p>
<p>为了方便自定义样式，发现这一特性的作者还给我们封装了成为一个工具类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by 赵晨璞 on 2016/5/1.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnackbarUtil</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>   <span class="keyword">int</span> Info = <span class="number">1</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> Confirm = <span class="number">2</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> Warning = <span class="number">3</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span>  <span class="keyword">int</span> Alert = <span class="number">4</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> red = <span class="number">0xfff44336</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> green = <span class="number">0xff4caf50</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> blue = <span class="number">0xff2195f3</span>;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">int</span> orange = <span class="number">0xffffc107</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 短显示Snackbar，自定义颜色</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> * <span class="doctag">@param</span> message</div><div class="line"> * <span class="doctag">@param</span> messageColor</div><div class="line"> * <span class="doctag">@param</span> backgroundColor</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">ShortSnackbar</span><span class="params">(View view, String message, <span class="keyword">int</span> messageColor, <span class="keyword">int</span> backgroundColor)</span></span>&#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view,message, Snackbar.LENGTH_SHORT);</div><div class="line">    setSnackbarColor(snackbar,messageColor,backgroundColor);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 长显示Snackbar，自定义颜色</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> * <span class="doctag">@param</span> message</div><div class="line"> * <span class="doctag">@param</span> messageColor</div><div class="line"> * <span class="doctag">@param</span> backgroundColor</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">LongSnackbar</span><span class="params">(View view, String message, <span class="keyword">int</span> messageColor, <span class="keyword">int</span> backgroundColor)</span></span>&#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view,message, Snackbar.LENGTH_LONG);</div><div class="line">    setSnackbarColor(snackbar,messageColor,backgroundColor);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义时常显示Snackbar，自定义颜色</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> * <span class="doctag">@param</span> message</div><div class="line"> * <span class="doctag">@param</span> messageColor</div><div class="line"> * <span class="doctag">@param</span> backgroundColor</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">IndefiniteSnackbar</span><span class="params">(View view, String message,<span class="keyword">int</span> duration,<span class="keyword">int</span> messageColor, <span class="keyword">int</span> backgroundColor)</span></span>&#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view,message, Snackbar.LENGTH_INDEFINITE).setDuration(duration);</div><div class="line">    setSnackbarColor(snackbar,messageColor,backgroundColor);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 短显示Snackbar，可选预设类型</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> * <span class="doctag">@param</span> message</div><div class="line"> * <span class="doctag">@param</span> type</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">ShortSnackbar</span><span class="params">(View view, String message, <span class="keyword">int</span> type)</span></span>&#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view,message, Snackbar.LENGTH_SHORT);</div><div class="line">    switchType(snackbar,type);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 长显示Snackbar，可选预设类型</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> * <span class="doctag">@param</span> message</div><div class="line"> * <span class="doctag">@param</span> type</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">LongSnackbar</span><span class="params">(View view, String message,<span class="keyword">int</span> type)</span></span>&#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view,message, Snackbar.LENGTH_LONG);</div><div class="line">    switchType(snackbar,type);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义时常显示Snackbar，可选预设类型</div><div class="line"> * <span class="doctag">@param</span> view</div><div class="line"> * <span class="doctag">@param</span> message</div><div class="line"> * <span class="doctag">@param</span> type</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Snackbar <span class="title">IndefiniteSnackbar</span><span class="params">(View view, String message,<span class="keyword">int</span> duration,<span class="keyword">int</span> type)</span></span>&#123;</div><div class="line">    Snackbar snackbar = Snackbar.make(view,message, Snackbar.LENGTH_INDEFINITE).setDuration(duration);</div><div class="line">    switchType(snackbar,type);</div><div class="line">    <span class="keyword">return</span> snackbar;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//选择预设类型</span></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">switchType</span><span class="params">(Snackbar snackbar,<span class="keyword">int</span> type)</span></span>&#123;</div><div class="line">    <span class="keyword">switch</span> (type)&#123;</div><div class="line">        <span class="keyword">case</span> Info:</div><div class="line">            setSnackbarColor(snackbar,blue);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> Confirm:</div><div class="line">            setSnackbarColor(snackbar,green);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> Warning:</div><div class="line">            setSnackbarColor(snackbar,orange);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> Alert:</div><div class="line">            setSnackbarColor(snackbar,Color.YELLOW,red);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置Snackbar背景颜色</div><div class="line"> * <span class="doctag">@param</span> snackbar</div><div class="line"> * <span class="doctag">@param</span> backgroundColor</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSnackbarColor</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> backgroundColor)</span> </span>&#123;</div><div class="line">    View view = snackbar.getView();</div><div class="line">    <span class="keyword">if</span>(view!=<span class="keyword">null</span>)&#123;</div><div class="line">        view.setBackgroundColor(backgroundColor);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 设置Snackbar文字和背景颜色</div><div class="line"> * <span class="doctag">@param</span> snackbar</div><div class="line"> * <span class="doctag">@param</span> messageColor</div><div class="line"> * <span class="doctag">@param</span> backgroundColor</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSnackbarColor</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> messageColor, <span class="keyword">int</span> backgroundColor)</span> </span>&#123;</div><div class="line">    View view = snackbar.getView();</div><div class="line">    <span class="keyword">if</span>(view!=<span class="keyword">null</span>)&#123;</div><div class="line">        view.setBackgroundColor(backgroundColor);</div><div class="line">        ((TextView) view.findViewById(R.id.snackbar_text)).setTextColor(messageColor);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 向Snackbar中添加view</div><div class="line"> * <span class="doctag">@param</span> snackbar</div><div class="line"> * <span class="doctag">@param</span> layoutId</div><div class="line"> * <span class="doctag">@param</span> index 新加布局在Snackbar中的位置</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SnackbarAddView</span><span class="params">( Snackbar snackbar,<span class="keyword">int</span> layoutId,<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    View snackbarview = snackbar.getView();</div><div class="line">    Snackbar.SnackbarLayout snackbarLayout=(Snackbar.SnackbarLayout)snackbarview;</div><div class="line"></div><div class="line">    View add_view = LayoutInflater.from(snackbarview.getContext()).inflate(layoutId,<span class="keyword">null</span>);</div><div class="line"></div><div class="line">    LinearLayout.LayoutParams p = <span class="keyword">new</span> LinearLayout.LayoutParams( LinearLayout.LayoutParams.WRAP_CONTENT,LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">    p.gravity= Gravity.CENTER_VERTICAL;</div><div class="line"></div><div class="line">    snackbarLayout.addView(add_view,index,p);</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SnackbarUtil.ShortSnackbar(coordinator,<span class="string">"妹子向你发来一条消息"</span>,SnackbarUtil.Info).show();</div></pre></td></tr></table></figure>
<p>在此要非常感谢<a href="http://www.jianshu.com/users/990c16f1edc0/latest_articles" target="_blank" rel="external"><strong>简名</strong></a> 给我们提供这么好的工具类，那么还有什么不懂得可以留言探讨，下面上整个项目的代码：</p>
<p><strong>MainActivity.java</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.muyang.snackbardemo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.graphics.Color;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.CoordinatorLayout;</div><div class="line"><span class="keyword">import</span> android.support.design.widget.Snackbar;</div><div class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</div><div class="line"><span class="keyword">import</span> android.view.Gravity;</div><div class="line"><span class="keyword">import</span> android.view.LayoutInflater;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"><span class="keyword">import</span> android.widget.LinearLayout;</div><div class="line"><span class="keyword">import</span> android.widget.TextView;</div><div class="line"><span class="keyword">import</span> android.widget.Toast;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button btn_normal, btn_callback, btn_custom;</div><div class="line">    <span class="keyword">private</span> CoordinatorLayout mCoor;</div><div class="line">    <span class="keyword">private</span> Snackbar mSnackBar, mCustomSnackBar;</div><div class="line">    <span class="keyword">private</span> View view;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initWidget();</div><div class="line">        mSnackBar = Snackbar.make(mCoor, R.string.callback, Snackbar.LENGTH_SHORT)</div><div class="line">                .setAction(R.string.UNDO, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        <span class="comment">//SnackBar回调方法</span></div><div class="line">        mSnackBar.setCallback(<span class="keyword">new</span> Snackbar.Callback() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDismissed</span><span class="params">(Snackbar snackbar, <span class="keyword">int</span> event)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onDismissed(snackbar, event);</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"SnackBar Dismiss"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onShown</span><span class="params">(Snackbar snackbar)</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onShown(snackbar);</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,<span class="string">"SnackBar Show"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line"><span class="comment">//       1、Resources resource = (Resources) getBaseContext().getResources();</span></div><div class="line"><span class="comment">//       ColorStateList csl = (ColorStateList) resource.getColorStateList(R.color.PeachPuff);</span></div><div class="line"><span class="comment">//       mSnackBar.setActionTextColor(csl);</span></div><div class="line"><span class="comment">//       2、mSnackBar.setActionTextColor(Color.rgb(232,44,123))</span></div><div class="line"><span class="comment">//       3、mSnackBar.setActionTextColor(Color.BLUE)</span></div><div class="line">        mSnackBar.setActionTextColor(Color.parseColor(<span class="string">"#FFDAB9"</span>));</div><div class="line"></div><div class="line">        <span class="comment">//自定义SnackBar样式</span></div><div class="line">        mCustomSnackBar = Snackbar.make(mCoor, R.string.custom, Snackbar.LENGTH_SHORT)</div><div class="line">                .setAction(R.string.UNDO, <span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        mCustomSnackBar.setActionTextColor(Color.parseColor(<span class="string">"#FFDAB9"</span>));</div><div class="line">        <span class="comment">//获得SnackBar这个View</span></div><div class="line">        view = mCustomSnackBar.getView();</div><div class="line">        <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">            view.setBackgroundColor(Color.parseColor(<span class="string">"#7B68EE"</span>));</div><div class="line">            <span class="comment">//获取Snackbar的message控件，修改字体颜色</span></div><div class="line">            ((TextView) view.findViewById(R.id.snackbar_text)).setTextColor(Color.parseColor(<span class="string">"#FFDAB9"</span>));</div><div class="line">            <span class="comment">//添加图标</span></div><div class="line">            Snackbar.SnackbarLayout snackbarLayout = (Snackbar.SnackbarLayout) view;</div><div class="line">            <span class="comment">//custom_layout是你自定义的布局</span></div><div class="line">            View add_view = LayoutInflater.from(view.getContext()).inflate(R.layout.custom_layout, <span class="keyword">null</span>);</div><div class="line">            LinearLayout.LayoutParams p = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">            p.gravity = Gravity.CENTER_VERTICAL;</div><div class="line">            <span class="comment">//数字表示新加的布局在SnackBar中的位置，从0开始,取决于你SnackBar里面有多少个子View</span></div><div class="line">            snackbarLayout.addView(add_view, <span class="number">0</span>, p);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWidget</span><span class="params">()</span> </span>&#123;</div><div class="line">        btn_normal = (Button) findViewById(R.id.btn_normal);</div><div class="line">        btn_normal.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        btn_callback = (Button) findViewById(R.id.btn_callback);</div><div class="line">        btn_callback.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        btn_custom = (Button) findViewById(R.id.btn_custom);</div><div class="line">        btn_custom.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mCoor = (CoordinatorLayout) findViewById(R.id.coordinatorLayout);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.btn_normal:</div><div class="line">                Snackbar.make(mCoor, R.string.normal, Snackbar.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.btn_callback:</div><div class="line"></div><div class="line"><span class="comment">//                Snackbar.make(mCoor,R.string.callback,Snackbar.LENGTH_SHORT)</span></div><div class="line"><span class="comment">//                        .setAction(R.string.UNDO, new View.OnClickListener() &#123;</span></div><div class="line"><span class="comment">//                            @Override</span></div><div class="line"><span class="comment">//                            public void onClick(View v) &#123;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">//                            &#125;</span></div><div class="line"><span class="comment">//                        &#125;).show();</span></div><div class="line">                mSnackBar.show();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.btn_custom:</div><div class="line">                mCustomSnackBar.show();</div><div class="line"><span class="comment">//                if (mSnackBar.isShown()) &#123;</span></div><div class="line"><span class="comment">//                    mSnackBar.dismiss();</span></div><div class="line"><span class="comment">//                &#125;</span></div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>activity_main.xml</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:id="@+id/coordinatorLayout"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:id="@+id/btn_normal"</div><div class="line">            android:layout_width="150dp"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignParentTop="true"</div><div class="line">            android:layout_centerHorizontal="true"</div><div class="line">            android:layout_marginTop="80dp"</div><div class="line">            android:background="@drawable/btn_bg"</div><div class="line">            android:text="@string/normal"</div><div class="line">            android:textSize="15sp" /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:id="@+id/btn_callback"</div><div class="line">            android:layout_width="150dp"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignStart="@+id/btn_normal"</div><div class="line">            android:layout_below="@+id/btn_normal"</div><div class="line">            android:layout_marginTop="38dp"</div><div class="line">            android:background="@drawable/btn_bg"</div><div class="line">            android:text="@string/callback"</div><div class="line">            android:textSize="15sp" /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:id="@+id/btn_custom"</div><div class="line">            android:layout_width="150dp"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignStart="@+id/btn_callback"</div><div class="line">            android:layout_below="@+id/btn_callback"</div><div class="line">            android:layout_marginTop="45dp"</div><div class="line">            android:background="@drawable/btn_bg"</div><div class="line">            android:text="@string/custom"</div><div class="line">            android:textSize="15sp" /&gt;</div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p><strong>custom_layout.xml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_gravity=&quot;center_vertical&quot;</div><div class="line">    &gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:layout_width=&quot;35dp&quot;</div><div class="line">        android:layout_height=&quot;35dp&quot;</div><div class="line">        android:layout_gravity=&quot;center_vertical&quot;</div><div class="line">        android:src=&quot;@drawable/header&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h4 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h4><p><a href="https://github.com/android/platform_frameworks_support/blob/62eb3105e51335cf9074a5506d8d2b220aeb95dc/design/src/android/support/design/widget/Snackbar.java" target="_blank" rel="external">SnackBar源码</a></p>
<p><a href="http://download.csdn.net/detail/wei_smile/9512799" target="_blank" rel="external">项目源码</a><br><a href="https://github.com/GiitSmile/SnackBarDemo" target="_blank" rel="external">项目GitHub地址</a></p>
<hr>
<p><strong>参考</strong><br><a href="http://www.jianshu.com/p/cd1e80e64311" target="_blank" rel="external">没时间解释了，快使用Snackbar!</a><br><a href="http://www.androidhive.info/2015/09/android-material-design-snackbar-example/" target="_blank" rel="external">Android Material Design Snackbar Example</a></p>
<p>喜欢Android Design Support Library系列的朋友欢迎关注我的微信公众号未央进化论，第一时间通知博客更新，荆轲刺秦王(＾－＾)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;在之前我有提到这一篇Android Design Support Library系列文章是关于SnackBar的，但是由于要用到CoordinatorLayout所以先翻译了一篇相关文章，如果还不了解的可以先看一下&lt;strong&gt;&lt;a href=&quot;http://blog.csdn.net/wei_smile/article/details/51306688&quot;&gt;Android Design Support Library–使用CoordinatorLayout来处理滚动&lt;/a&gt;&lt;/strong&gt; ，这一篇我们讲SnackBar，SnackBar其实就是Toast的升级版，他们之间最大的不同就是：SnackBar会对我们的操作提供一个轻量级的反馈，并且可以对点击事件做出响应，如果是在手机上使用一个SnackBar的话，我们会看到在屏幕底部出现一条简短的信息，如果是在更大的屏幕上这条信息应该会显示在左下角，并且当一个SnackBar显示的时候它是凌驾于当前所有屏幕元素之上的，我们在屏幕上一次只能显示一个SnackBar，如果这么讲不是很清楚的话，我们先来看一个小Demo，通过代码驱动理解是比较好的方式。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="Material Design" scheme="https:///www.limuyang.cc/tags/Material-Design/"/>
    
      <category term="Google" scheme="https:///www.limuyang.cc/tags/Google/"/>
    
      <category term="Android" scheme="https:///www.limuyang.cc/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>译Android Design Support Library--使用CoordinatorLayout来处理滚动</title>
    <link href="https:///www.limuyang.cc/2016/05/03/%E8%AF%91Android-Design-Support-Library-%E4%BD%BF%E7%94%A8CoordinatorLayout%E6%9D%A5%E5%A4%84%E7%90%86%E6%BB%9A%E5%8A%A8/"/>
    <id>https:///www.limuyang.cc/2016/05/03/译Android-Design-Support-Library-使用CoordinatorLayout来处理滚动/</id>
    <published>2016-05-03T12:32:58.000Z</published>
    <updated>2017-09-12T12:42:32.633Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>本来这一次想写关于<code>SnackBar</code>的，但是因为官方都推荐使用Material Design控件最好使用<code>CoordinatorLayout</code> 来作为它们的父布局，所以就先讲解一下<code>CoordinatorLayout</code> 的知识，本来想自己去理解的，但是发现网上已经有一份很好的材料了就给搬过来了，原文是CodePath的，我给翻译了一遍，如果有出入的话欢迎指正—<a href="https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout" target="_blank" rel="external">英文原文地址</a><br><img src="http://olivyw4lw.bkt.clouddn.com/333.png" alt=""><br><a id="more"></a><br><strong>概述</strong><br><a href="https://developer.android.com/intl/zh-cn/reference/android/support/design/widget/CoordinatorLayout.html" target="_blank" rel="external">CoordinatorLayout</a> 可以实现在Google Material Design中提到的<a href="http://www.google.com/design/spec/patterns/scrolling-techniques.html" target="_blank" rel="external">滚动特效</a> ，目前，这个框架提供了好几种让你不用去写自定义动画效果代码就能实现的特效，这些特效包括如下几个方面：</p>
<ul>
<li><p>可以自动的让浮动按钮上下滑动，来为SnackBar预留出一定的空间</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/donghua1.gif" alt="这里写图片描述"></p>
</li>
<li><p>扩大或者缩小ToolBar或者头部来为主要内容布局预留出一定的空间</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/X5AIH0P.gif" alt="这里写图片描述"></p>
</li>
<li><p>控制哪一个View需要展开或者折叠以及展开或者折叠的速率，包括视察滚动的动画效果</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/1JHP0cP.gif" alt="这里写图片描述"></p>
</li>
</ul>
<p><strong>代码示例</strong></p>
<p>来自Google的Chris Banes已经把CoordinatorLayout和其他<a href="https://guides.codepath.com/android/Design-Support-Library" target="_blank" rel="external">Design Support Library</a> 控件结合在一起写了一个Demo。</p>
<p><img src="http://i.imgur.com/aA8aGSg.png" alt="这里写图片描述"></p>
<p>你可以在<a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">GitHub</a>上找到这个Demo的源码，通过这个源码你可以很好的理解CoordinatorLayout的相关知识。</p>
<p><strong>配置</strong><br>首先你得保证你遵循了<a href="https://guides.codepath.com/android/Design-Support-Library" target="_blank" rel="external">Design Support Library</a> 规范。</p>
<p><strong>浮动操作按钮和SnackBar</strong></p>
<p>CoordinatorLayout可以结合<code>layout_anchor</code> 和<code>layout_gravity</code> 属性来做出浮动特效，想了解更多的话可以查看<a href="https://guides.codepath.com/android/Floating-Action-Buttons" target="_blank" rel="external">浮动操作按钮指南</a> 。</p>
<p>当显示一个<a href="https://guides.codepath.com/android/Displaying-the-Snackbar" target="_blank" rel="external">SnackBar</a>的时候，它通常出现在我们屏幕的底部，为了预留出足够的空间，我们的浮动操作按钮不得不向上移动一段距离：</p>
<p><img src="http://imgur.com/zF9GGsK.gif" alt="这里写图片描述"></p>
<p>只要你把CoordinatorLayout作为你的根布局，这个动画效果会自动产生，浮动操作按钮有一个<a href="https://developer.android.com/intl/zh-cn/reference/android/support/design/widget/FloatingActionButton.Behavior.html" target="_blank" rel="external">预设的行为属性</a> ，那就是自动检测SnackBar是否被添加到屏幕上，如果是则浮动操作按钮会产生一个向上移动一个等于SnackBar高度的距离的动画效果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/main_content"</span></div><div class="line">       <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">       <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/rvToDoList"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.RecyclerView</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">android.support.design.widget.FloatingActionButton</span></span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">       <span class="attr">android:layout_gravity</span>=<span class="string">"bottom|right"</span></div><div class="line">       <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></div><div class="line">       <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">       <span class="attr">app:layout_anchor</span>=<span class="string">"@id/rvToDoList"</span></div><div class="line">       <span class="attr">app:layout_anchorGravity</span>=<span class="string">"bottom|right|end"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>展开或折叠ToolBar</strong></p>
<p><img src="http://imgur.com/X5AIH0P.gif" alt="这里写图片描述"></p>
<p>首先要注意的一点是你不是使用已经过时的ActionBar，确保遵守了<a href="https://guides.codepath.com/android/Using-the-App-ToolBar#using-toolbar-as-actionbar" target="_blank" rel="external">用ToolBar代替ActionBar</a> 的指南，同样，你也得确保使用CoordinatorLayout作为主布局容器。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line"> xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">    android:id="@+id/main_content"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:fitsSystemWindows="true"&gt;</div><div class="line"></div><div class="line">      &lt;android.support.v7.widget.Toolbar</div><div class="line">                android:id="@+id/toolbar"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="?attr/actionBarSize"</div><div class="line">                app:popupTheme="@style/ThemeOverlay.AppCompat.Light" /&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p><strong>对滚动事件作出响应</strong></p>
<p>接下来，我们需要使用一个叫<a href="http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/AppBarLayout.html" target="_blank" rel="external">AppBarLayout</a>的容器布局来为ToolBar添加对滚动事件的响应：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/appbar"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/detail_backdrop_height"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span> /&gt;</div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>注意</strong>：根据<a href="http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/AppBarLayout.html" target="_blank" rel="external">Google官方文档</a> ，AppBarLayout目前被指定为第一个嵌套在CoordinatorLayout里面的子布局。</p>
<p>接下来，我们需要定义出AppBarLayout和滚动视图之间的联系，给RecyclerView 或者任意其他一个可以实现嵌套滚动的View比如说<a href="http://stackoverflow.com/questions/25136481/what-are-the-new-nested-scrolling-apis-for-android-l" target="_blank" rel="external">NestedScrollView</a> 添加一个<code>app:layout_behavior</code> 属性，support library包含了一个特殊的同<a href="https://developer.android.com/intl/zh-cn/reference/android/support/design/widget/AppBarLayout.ScrollingViewBehavior.html" target="_blank" rel="external">AppBarLayout.ScrollingViewBehavior</a> 一一对应的字符串资源文件<code>@string/appbar_scrolling_view_behavior</code> ，用来通知<code>AppBarLayout</code> 这个特殊的View何时发生了滚动事件，这个behavior 需要建立在触发了这个滚动事件的View上。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></div><div class="line">       <span class="attr">android:id</span>=<span class="string">"@+id/rvToDoList"</span></div><div class="line">       <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">       <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span>&gt;</div></pre></td></tr></table></figure>
<p>当一个CoordinatorLayout 发现在RecyclerView中定义了这个属性之后，它会在自己所包含的组件中逐个搜索看是否有与这个behavior相关联的View，在此个别情况中，<code>AppBarLayout.ScrollingViewBehavior</code> 描述了RecyclerView和AppBarLayout中的一种依赖关系，RecyclerView 的任何滚动事件都将会触发AppBarLayout布局或它包含的子View 的改变。<br>要想让RecyclerView 的滚动事件触发AppBarLayout内部声明的View的改变只需要用到<code>app:layout_scrollFlags</code> 这个属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span>/&gt;</div><div class="line"></div><div class="line"> <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在<code>app:layout_scrollFlags</code> 属性中我们必须要设定<code>scroll</code> 这个滑动标志来使任何滑动事件生效，这个标志可以配合<code>enterAlways</code>、<code>enterAlwaysCollapsed</code>、<code>exitUntilCollapsed</code>、或者 <code>snap</code> 这几种标志来一起使用。</p>
<ul>
<li><p>enterAlways：当向上滑动的时候View就会变为可见，这个标志在你从一个列表的底部向上滚动并且想要立刻显示ToolBar的时候会很有用：</p>
<p><img src="http://imgur.com/sGltNwr.png" alt="这里写图片描述"></p>
</li>
</ul>
<ul>
<li><p>一般情况下，ToolBar只有当你滚动到列表顶部的时候才会显示：</p>
<p><img src="http://i.imgur.com/IZzcL1C.png" alt="这里写图片描述"></p>
</li>
<li><p>enterAlwaysCollapsed：正常情况下，只有当你用了enterAlways这个标志位，你的ToolBar才会随着你的向下滚动继续扩展：</p>
<p><img src="http://imgur.com/nVtheyw.png" alt="这里写图片描述"></p>
</li>
<li><p>假定你已经声明了enterAlways 标志位，并且你已经制定了一个最小高度minHeight，你还可以指定enterAlwaysCollapsed，这样的话你的View将在达到这个最小高度minHeight时候开始显示，并且随着你的滚动你的View会慢慢的展开直到你滑动到了View的顶部：</p>
<p><img src="http://imgur.com/HqR8Nx5.png" alt="这里写图片描述"></p>
</li>
<li><p>exitUntilCollapsed：当你已经设置了scroll 标志位，向下滚动会导致整个内容视图产生滚动：<br><img src="http://imgur.com/qpEr4x5.png" alt="这里写图片描述"></p>
</li>
<li><p>通过指定最小高度minHeight和exitUntilCollapsed标志，ToolBar会隐藏到minHeight的高度：</p>
<p><img src="http://imgur.com/dTDPztp.png" alt="这里写图片描述"></p>
<ul>
<li>注意：如果滚动结束View视图尺寸减小少于最开始部分的50%，那么这个View会回到原始大小，但是如果大于原始尺寸的50%的话，那么这个View会完全消失：<br><img src="http://i.imgur.com/9hnupWJ.png" alt="这里写图片描述"></li>
<li>记住你所有的View都需要把scroll 标志放在第一位，这样需要折叠的View会先行退出然而固定的元素会留在顶部，此时你应该已经注意到了我们的ToolBar响应滚动事件。</li>
</ul>
<p><img src="http://imgur.com/Hl2Asb1.gif" alt="这里写图片描述"></p>
</li>
</ul>
<p><strong>制造出折叠效果</strong></p>
<p>如果我们想做出ToolBar的折叠效果，我们必须使用CollapsingToolbarLayout布局来包裹ToolBar：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">            <span class="attr">app:expandedTitleMarginEnd</span>=<span class="string">"64dp"</span></div><div class="line">            <span class="attr">app:expandedTitleMarginStart</span>=<span class="string">"48dp"</span></div><div class="line">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line">            </div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>结果显示如下：</p>
<p><img src="http://imgur.com/X5AIH0P.gif" alt="这里写图片描述"></p>
<p>通常我们都是设置ToolBar的Title，但是现在我们需要把Title设置在CollapsingToolBarLayout 上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CollapsingToolbarLayout collapsingToolbar =</div><div class="line">             (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</div><div class="line">collapsingToolbar.setTitle(<span class="string">"Title"</span>);</div></pre></td></tr></table></figure>
<p>注意当我们使用CollapsingToolbarLayout的时候，我们的状态栏需要设置为半透明(API 19)或者透明(API 21),就好像<a href="https://github.com/chrisbanes/cheesesquare/blob/master/app/src/main/res/values-v21/styles.xml" target="_blank" rel="external">这个文件</a>展示的，特别的，我们还需要在<code>res/values-xx/styles.xml</code> 设置如下的style：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- res/values-v19/styles.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Base.AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowTranslucentStatus"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- res/values-v21/styles.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Base.AppTheme"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowDrawsSystemBarBackgrounds"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:statusBarColor"</span>&gt;</span>@android:color/transparent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果你照着上面来设置，你的布局有一部分会隐藏在system bar后面，这个时候你需要设置<code>android:fitsSystemWindow</code> 属性，<a href="http://blog.raffaeu.com/archive/2015/04/11/android-and-the-transparent-status-bar.aspx" target="_blank" rel="external">详情查看</a></p>
<p><strong>制造视差滚动动画效果</strong></p>
<p>CollapsingToolbarLayout 布局还允许让我们做出更多更高级的动画效果，譬如在它内部加入一个ImageView，当它折叠的时候这个ImageView会产生一个淡出的效果，当用户滚动的时候title的高度也能随之改变：</p>
<p><img src="http://imgur.com/ah4l5oj.gif" alt="这里写图片描述"></p>
<p>为了生成这种效果，我们加入了一个ImageView并且声明了<code>app:layout_collapseMode=&quot;parallax&quot;</code> 属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/collapsing_toolbar"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></div><div class="line">    <span class="attr">app:contentScrim</span>=<span class="string">"?attr/colorPrimary"</span></div><div class="line">    <span class="attr">app:expandedTitleMarginEnd</span>=<span class="string">"64dp"</span></div><div class="line">    <span class="attr">app:expandedTitleMarginStart</span>=<span class="string">"48dp"</span></div><div class="line">    <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"?attr/actionBarSize"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways"</span>&gt;<span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">                <span class="attr">android:src</span>=<span class="string">"@drawable/cheese_1"</span></div><div class="line">                <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|enterAlways|enterAlwaysCollapsed"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:scaleType</span>=<span class="string">"centerCrop"</span></div><div class="line">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"parallax"</span></div><div class="line">                <span class="attr">android:minHeight</span>=<span class="string">"100dp"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>自定义Behaviors</strong></p>
<p>一个关于自定义behavior的例子在我们讨论<a href="https://guides.codepath.com/android/Floating-Action-Buttons#using-coordinatorlayout" target="_blank" rel="external">CoordinatorLayou和浮动操作按钮</a>的时候，CoordinatorLayout是通过搜索任意一个包含了 <a href="http://developer.android.com/intl/zh-cn/reference/android/support/design/widget/CoordinatorLayout.Behavior.html" target="_blank" rel="external">CoordinatorLayout Behavior</a> 的子View来工作的，无论是通过在XML文件中使用<code>app:layout_behavior</code> 属性来定义还是以编码的方式对View类使用<code>@DefaultBehavior</code> 注释，当滚动事件发生的时候，CoordinatorLayout 将会尝试去触发那些声明了依赖的子View。</p>
<p>想要定义你自己的CoordinatorLayout Behavior，你需要实现<code>layoutDependsOn()</code>和<code>onDependentViewChanged()</code> 这两个方法，比如，AppBarLayout.Behavior就定义了这两个关键的方法，这个behavior 用来触发AppBarLayout 的变化当滚动事件发生的时候：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">layoutDependsOn</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line">          <span class="keyword">return</span> dependency <span class="keyword">instanceof</span> AppBarLayout;</div><div class="line">      &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onDependentViewChanged</span><span class="params">(CoordinatorLayout parent, View child, View dependency)</span> </span>&#123;</div><div class="line">          <span class="comment">// check the behavior triggered</span></div><div class="line">          android.support.design.widget.CoordinatorLayout.Behavior behavior = ((android.support.design.widget.CoordinatorLayout.LayoutParams)dependency.getLayoutParams()).getBehavior();</div><div class="line">          <span class="keyword">if</span>(behavior <span class="keyword">instanceof</span> AppBarLayout.Behavior) &#123;</div><div class="line">          <span class="comment">// do stuff here</span></div><div class="line">          &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>理解如何实现这些自定义behavior的最好途径是研究AppBarLayout.Behavior 和 FloatingActionButtion.Behavior。虽然这些源代码还没有放出来，但是你可以使用Android Studio 1.2集成的反编译器来查看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;本来这一次想写关于&lt;code&gt;SnackBar&lt;/code&gt;的，但是因为官方都推荐使用Material Design控件最好使用&lt;code&gt;CoordinatorLayout&lt;/code&gt; 来作为它们的父布局，所以就先讲解一下&lt;code&gt;CoordinatorLayout&lt;/code&gt; 的知识，本来想自己去理解的，但是发现网上已经有一份很好的材料了就给搬过来了，原文是CodePath的，我给翻译了一遍，如果有出入的话欢迎指正—&lt;a href=&quot;https://guides.codepath.com/android/Handling-Scrolls-with-CoordinatorLayout&quot;&gt;英文原文地址&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://olivyw4lw.bkt.clouddn.com/333.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="Material Design" scheme="https:///www.limuyang.cc/tags/Material-Design/"/>
    
      <category term="CoordinatorLayout" scheme="https:///www.limuyang.cc/tags/CoordinatorLayout/"/>
    
  </entry>
  
  <entry>
    <title>Android Design Support Library--TextInputLayout的使用</title>
    <link href="https:///www.limuyang.cc/2016/04/30/Android-Design-Support-Library-TextInputLayout%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https:///www.limuyang.cc/2016/04/30/Android-Design-Support-Library-TextInputLayout的使用/</id>
    <published>2016-04-29T16:20:19.000Z</published>
    <updated>2016-08-20T02:52:12.100Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>Google在2015的IO大会上，给我们带来了更加详细的Material Design设计规范，同时，也给我们带来了全新的Android Design Support Library，Android Design Support Library的兼容性更广，直接可以向下兼容到Android 2.2，我准备从最简单的控件开始，逐渐延伸，把新控件都给熟悉一遍。<br><a id="more"></a><br>先从看起来最简单的控件开始，也就是<code>TextInputLayout</code>，说实话<code>TextInputLayout</code> 我所见到的平常用的并不多，它的大体作用是在我们正常的EditText左上角显示出一个浮动标签，这个标签的内容就是我们设置的<code>android:hint</code> 属性的值。<br>先来看一下它的继承结构：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/TextInput_1.jpg" alt="继承结构"></p>
<p>可以很清晰的看到我们的<code>TextInputLayout</code> 继承于<code>LinearLayout</code> ，那么很明显这是一个布局，需要配合它的子控件来显示出想要的效果，这里谷歌把它专门设计用来包裹<code>EditText</code>(或者<code>EditText</code>的子类)，然后当用户进行输入动作的时候我们设置的<code>android:hint</code> 提示就会以动画的形式运动到左上角，谷歌官方提供的最简单的使用示例如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.TextInputEditText</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:hint</span>=<span class="string">"@string/form_username"</span>/&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>有些人可能会奇怪，之前说好的<code>TextInputLayout</code> 是用来包裹<code>EditText</code> 的，为什么这里出现了<code>TextInputEditText</code> ，先别急，我们看一下谷歌官方对这个控件的描述：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">A special sub-<span class="class"><span class="keyword">class</span> <span class="title">of</span> <span class="title">EditText</span> <span class="title">designed</span> <span class="title">for</span> <span class="title">use</span> <span class="title">as</span> <span class="title">a</span> <span class="title">child</span> <span class="title">of</span> <span class="title">TextInputLayout</span>.</span></div><div class="line"></div><div class="line"><span class="title">Using</span> <span class="title">this</span> <span class="title">class</span> <span class="title">allows</span> <span class="title">us</span> <span class="title">to</span> <span class="title">display</span> <span class="title">a</span> <span class="title">hint</span> <span class="title">in</span> <span class="title">the</span> <span class="title">IME</span> <span class="title">when</span> <span class="title">in</span> '<span class="title">extract</span>' <span class="title">mode</span>.</div></pre></td></tr></table></figure>
<p>大意是说，这只是一种特殊的<code>EditText</code> 的子类，用来在<code>&#39;extract&#39; mode</code> 下在输入法编辑器中显示我们的<code>hint</code>提示信息，这里的<code>&#39;extract&#39; mode</code> 其实就是全屏模式，谷歌官方对它的解释是有时候你的输入框的UI界面很大，大的不能与你自己的应用程序的UI结合起来，这时候就可以切换到全屏模式来输入，这么说可能不太明白，上图：<br>比如说，下面这种情况使用的是<code>EditText</code>：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/TextInput_2.jpg" alt="使用EditText"></p>
<p>我们看到下面那里输入框已经很大了，然后你点击输入框进行输入，会发现这个现象：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/TextInput_3.jpg" alt="点击输入"></p>
<p>你进入到了全屏模式输入，但是界面上空空如也，对比一下使用<code>TextInputEditText</code> 的情况：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/TextInput_4.jpg" alt="使用TextInputEditText"></p>
<p>看到左上角的文字了嘛，这是我们在之前设置的<code>android:hint</code> 属性的值，这么一看这两者的区别的就一目了然了，但是说实话<code>TextInputEditText</code> 用到的地方还是很有限的，所以日常开发我们还是使用<code>TextInputLayout</code> 去包裹<code>EditText</code> 来实现浮动标签的功能。</p>
<blockquote>
<p><a href="http://stackoverflow.com/questions/35775919/edittext-added-is-not-a-textinputedittext-please-switch-to-using-that-class-ins" target="_blank" rel="external"><strong>以上图片出处</strong></a> 感谢万能的<strong>stackoverflow</strong></p>
</blockquote>
<h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>因为它是继承自<code>LinearLayout</code>的所以理论上<code>LinearLayout</code> 有的属性它全都有，这里我们只看有关它本身的属性：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th>相关方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>app:counterEnabled</td>
<td>setCounterEnabled(boolean)</td>
<td>设置是否显示一个计数器，布尔值</td>
</tr>
<tr>
<td>app:counterMaxLength</td>
<td>setCounterMaxLength(int)</td>
<td>设置计数器的最大计数数值，整型</td>
</tr>
<tr>
<td>app:errorEnabled</td>
<td>setErrorEnabled(boolean)</td>
<td>设置是否显示一个错误信息，布尔值</td>
</tr>
<tr>
<td>app:hintAnimationEnabled</td>
<td>setHintAnimationEnabled(boolean)</td>
<td>设置是否要显示输入状态时候的动画效果，布尔值</td>
</tr>
<tr>
<td>app:hintEnabled</td>
<td>setHintEnabled(boolean)</td>
<td>设置是否要用这个浮动标签的功能，布尔值</td>
</tr>
<tr>
<td>app:hintTextAppearance</td>
<td>setHintTextAppearance(int)</td>
<td>设置提示文字的样式(注意这里是运行了动画效果之后的样式)</td>
</tr>
</tbody>
</table>
<hr>
<p>这里我们通过一个简单的Demo来了解以上这些属性，简单起见我们就做一个登录界面，这个界面长这样：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/TextInput_5.jpg" alt="这里写图片描述登录界面"></p>
<p>先上布局文件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:paddingLeft</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">android:paddingRight</span>=<span class="string">"@dimen/activity_horizontal_margin"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.test.textinputlayoutdemo.MainActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"65dp"</span></div><div class="line">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/layout_name"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:counterEnabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">app:counterMaxLength</span>=<span class="string">"5"</span></div><div class="line">            <span class="attr">app:counterOverflowTextAppearance</span>=<span class="string">"@style/MyOverflowText"</span></div><div class="line">            <span class="attr">app:errorTextAppearance</span>=<span class="string">"@style/MyErrorStyle"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/input_name"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:hint</span>=<span class="string">"@string/EnterName"</span></div><div class="line">                <span class="attr">android:singleLine</span>=<span class="string">"true"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/layout_password"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:counterEnabled</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">app:counterMaxLength</span>=<span class="string">"11"</span></div><div class="line">            <span class="attr">app:counterOverflowTextAppearance</span>=<span class="string">"@style/MyOverflowText"</span></div><div class="line">            <span class="attr">app:errorTextAppearance</span>=<span class="string">"@style/MyErrorStyle"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/input_password"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:hint</span>=<span class="string">"@string/EnterPassWord"</span></div><div class="line">                <span class="attr">android:inputType</span>=<span class="string">"textPassword"</span></div><div class="line">                <span class="attr">android:singleLine</span>=<span class="string">"true"</span> /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.TextInputLayout</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/layout_email"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">app:counterOverflowTextAppearance</span>=<span class="string">"@style/MyOverflowText"</span></div><div class="line">            <span class="attr">app:errorTextAppearance</span>=<span class="string">"@style/MyErrorStyle"</span>&gt;</div><div class="line"></div><div class="line">            <span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">                <span class="attr">android:id</span>=<span class="string">"@+id/input_email"</span></div><div class="line">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">                <span class="attr">android:hint</span>=<span class="string">"@string/EnterEmail"</span></div><div class="line">                <span class="attr">android:inputType</span>=<span class="string">"textEmailAddress"</span></div><div class="line">                 /&gt;</div><div class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.TextInputLayout</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/login"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_marginTop</span>=<span class="string">"50dp"</span></div><div class="line">            <span class="attr">android:background</span>=<span class="string">"@color/colorPrimary"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"@string/login"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#ffffff"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"20sp"</span></div><div class="line">            <span class="attr">android:textStyle</span>=<span class="string">"bold"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> EditText input_name, input_password, input_email;</div><div class="line">    <span class="keyword">private</span> TextInputLayout layout_name, layout_password, layout_email;</div><div class="line">    <span class="keyword">private</span> Button btn_login;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initWidget();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initWidget</span><span class="params">()</span> </span>&#123;</div><div class="line">        input_name = (EditText) findViewById(R.id.input_name);</div><div class="line">        input_password = (EditText) findViewById(R.id.input_password);</div><div class="line">        input_email = (EditText) findViewById(R.id.input_email);</div><div class="line"></div><div class="line">        layout_name = (TextInputLayout) findViewById(R.id.layout_name);</div><div class="line">        layout_password = (TextInputLayout) findViewById(R.id.layout_password);</div><div class="line">        layout_email = (TextInputLayout) findViewById(R.id.layout_email);</div><div class="line"></div><div class="line">        btn_login = (Button) findViewById(R.id.login);</div><div class="line">        btn_login.setOnClickListener(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="comment">//添加监听</span></div><div class="line">        input_name.addTextChangedListener(<span class="keyword">new</span> MyTextWatcher(input_name));</div><div class="line">        input_password.addTextChangedListener(<span class="keyword">new</span> MyTextWatcher(input_password));</div><div class="line">        input_email.addTextChangedListener(<span class="keyword">new</span> MyTextWatcher(input_email));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.login:</div><div class="line">                canLogin();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断是否可以登录的方法</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">canLogin</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isNameValid()) &#123;</div><div class="line">            Toast.makeText(<span class="keyword">this</span>, getString(R.string.check), Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!isPasswordValid()) &#123;</div><div class="line">            Toast.makeText(<span class="keyword">this</span>, getString(R.string.check), Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (!isEmailValid()) &#123;</div><div class="line">            Toast.makeText(<span class="keyword">this</span>, getString(R.string.check), Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, getString(R.string.login_success), Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNameValid</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (input_name.getText().toString().trim().equals(<span class="string">""</span>) || input_name.getText().toString().trim().isEmpty()) &#123;</div><div class="line">            layout_name.setError(getString(R.string.error_name));</div><div class="line">            input_name.requestFocus();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        layout_name.setErrorEnabled(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPasswordValid</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (input_password.getText().toString().trim().equals(<span class="string">""</span>) || input_password.getText().toString().trim().isEmpty()) &#123;</div><div class="line">            layout_password.setErrorEnabled(<span class="keyword">true</span>);</div><div class="line">            layout_password.setError(getResources().getString(R.string.error_password));</div><div class="line">            input_password.requestFocus();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        layout_password.setErrorEnabled(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmailValid</span><span class="params">()</span> </span>&#123;</div><div class="line">        String email = input_email.getText().toString().trim();</div><div class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(email) || !android.util.Patterns.EMAIL_ADDRESS.matcher(email).matches()) &#123;</div><div class="line">            layout_email.setErrorEnabled(<span class="keyword">true</span>);</div><div class="line">            layout_email.setError(getString(R.string.error_email));</div><div class="line">            layout_email.requestFocus();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        layout_email.setErrorEnabled(<span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//动态监听输入过程</span></div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextWatcher</span> <span class="keyword">implements</span> <span class="title">TextWatcher</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> View view;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">private</span> <span class="title">MyTextWatcher</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.view = view;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (view.getId()) &#123;</div><div class="line">                <span class="keyword">case</span> R.id.input_name:</div><div class="line">                    isNameValid();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> R.id.input_password:</div><div class="line">                    isPasswordValid();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> R.id.input_email:</div><div class="line">                    isEmailValid();</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p>先来看一下最终的实现效果：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/TextInput_6.gif" alt="实现效果"></p>
<p>可以很明显的看到，当我们同时设置了<code>app:counterEnabled</code> 和<code>app:counterMaxLength</code> 属性时，我们输入的<code>EditText</code> 右下角会出现一个计数器还有一个最大输入字符数的数字显示，我们在输入名字这一栏设置最大输入为5个字符，所以当超过了5个字符的时候，<code>EditText</code> 的整个样式的颜色都会改变以示警告，如果我们只设置了<code>app:counterEnabled</code> 属性的话<code>EditText</code> 右下角一开始会出现一个0，随着输入字符的增多而逐步进行计数，注意如果设置了整个属性我们<code>EditText</code> 布局的高度会有一定的增大，具体的可以自己实践一下。</p>
<p>另外，我们在代码中设置了不同的饿输入类型，如果输入类型错误，我们就可以通过设置<code>app:errorEnabled</code> 来开启错误显示，此时需要通过在代码中调用 <code>setError(string)</code> 方法来设置显示的错误提示文字，当不需要的时候记得设置<code>app:errorEnabled(false)</code> 来取消错误提示，不然错误提示会一直存在。</p>
<p><strong>注意：</strong> 当我们使用<code>app:counterMaxLength</code> 这个属性的时候，一定要设置 <code>app:counterOverflowTextAppearance</code> 属性，不然的话程序运行会报错，这个属性是设置当我们输入字符超过限定的个数时候<code>EditText</code>控件整体显示的样式，需要在style.xml文件里面定义一个自己的style，注意我们自定义的style的parent是<code>TextAppearance.AppCompat.Small</code> ，拿我上面的程序举例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyOverflowText"</span> <span class="attr">parent</span>=<span class="string">"TextAppearance.AppCompat.Small"</span>&gt;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#f3672b<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>这样定义好后再在<code>app:counterOverflowTextAppearance</code> 里面设置这个style就行</p>
<h4 id="关于自定义样式"><a href="#关于自定义样式" class="headerlink" title="关于自定义样式"></a>关于自定义样式</h4><p>有些人可能不喜欢官方提供的默认样式想要自己定义，下面说一下自定义几种样式的方法：</p>
<ul>
<li>如果你想更改下划线的颜色，只要在style.xml文件里面找到AppTheme：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span><span class="xml"></span></div><div class="line">       <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimary"</span>&gt;</span>@color/colorPrimary<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorPrimaryDark"</span>&gt;</span>@color/colorPrimaryDark<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"colorAccent"</span>&gt;</span>@color/colorAccent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>更改里面的colorAccent属性就行了</p>
<ul>
<li>如果你想更改错误提示的样式的话，也是在style.xml文件里面，自定义一个style，同样拿上面的程序举例：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"MyErrorStyle"</span>&gt;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:textColor"</span>&gt;</span>#ec4722<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后在xml文件<code>TextInputLayout</code>控件里面这么设置一下就行了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:errorTextAppearance=&quot;@style/MyErrorStyle&quot;</div></pre></td></tr></table></figure>
<p>包括前面提到的设置当输入字符大于我们限定个数字符时的样式，基本上我们可以很好地自定义出自己想要的style了，以上两种不提供演示，都很简单，可以自己去尝试。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>下一次准备分析SnackBar控件，很多东西说简单也简单，说不简单也不简单，就像做这个Demo我之前光看官方文档根本没有告诉有<code>app:counterOverflowTextAppearance</code> 这个属性的存在，也是一直查资料，还是要亲自去尝试一下才好，下面上源码(注意是AS文件)</p>
<p>参考：<a href="http://www.androidhive.info/2015/09/android-material-design-floating-labels-for-edittext/" target="_blank" rel="external"><strong>Android Material Design Floating Labels for EditText</strong></a></p>
<p><a href="https://github.com/GiitSmile/TextInputLayoutDemo/tree/master" target="_blank" rel="external"><strong>项目GitHub地址</strong></a></p>
<p>最后来个小提示，当我们在Android Studio中导入support design开发包的时候，版本号最好和v7包的版本号一致，不然有些时候会出现莫名其妙的错误：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:appcompat-v7:23.0.1'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'com.android.support:design:23.0.1'</span></div></pre></td></tr></table></figure>
<p>有任何问题欢迎留言探讨~</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h4&gt;&lt;p&gt;Google在2015的IO大会上，给我们带来了更加详细的Material Design设计规范，同时，也给我们带来了全新的Android Design Support Library，Android Design Support Library的兼容性更广，直接可以向下兼容到Android 2.2，我准备从最简单的控件开始，逐渐延伸，把新控件都给熟悉一遍。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="Material Design" scheme="https:///www.limuyang.cc/tags/Material-Design/"/>
    
      <category term="Google" scheme="https:///www.limuyang.cc/tags/Google/"/>
    
      <category term="TextInputLayout" scheme="https:///www.limuyang.cc/tags/TextInputLayout/"/>
    
  </entry>
  
  <entry>
    <title>使用ViewPager动画来做出不一样的引导页</title>
    <link href="https:///www.limuyang.cc/2016/04/16/%E4%BD%BF%E7%94%A8ViewPager%E5%8A%A8%E7%94%BB%E6%9D%A5%E5%81%9A%E5%87%BA%E4%B8%8D%E4%B8%80%E6%A0%B7%E7%9A%84%E5%BC%95%E5%AF%BC%E9%A1%B5/"/>
    <id>https:///www.limuyang.cc/2016/04/16/使用ViewPager动画来做出不一样的引导页/</id>
    <published>2016-04-16T12:29:26.000Z</published>
    <updated>2017-09-12T12:32:27.165Z</updated>
    
    <content type="html"><![CDATA[<p>就算Google从很早开始就自带了设置引导页动画的接口，但是就我目前看来市面上使用引导页动画的还是很少的，也不知道是为什么，一想到Material Design的使用率也这么少表示很心塞。<br>首先来看看市面上千篇一律的引导页效果，诺：</p>
<p><img src="http://img.my.csdn.net/uploads/201604/16/1460774446_5006.gif" alt="这里写图片描述"></p>
<p>很单调对不对，你们没看吐我都看吐了，再看一份加了引导页动画效果的：<br><img src="http://img.my.csdn.net/uploads/201604/16/1460774609_1329.gif" alt="这里写图片描述"></p>
<p>有没有瞬间耳目一新的感觉，下面就谈谈如何做出这样的引导页动画。</p>
<a id="more"></a>
<p>其实从Android 3.0也就是API 11开始Android就自带了一个PageTransformer接口用来实现ViewPager动画效果并为之加入了setPageTransformer方法来自定义我们自己的动画效果，用的时候很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">viewpager.setPageTransformer(<span class="keyword">false</span>, <span class="keyword">new</span> ViewPager.PageTransformer() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View page, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">// do transformation here</span></div><div class="line">        &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>这里setPageTransformer传入了两个参数，第一个布尔型参数表示的意思就是在两个页面切换产生动画效果时候是否要反转一下让下一个页面在上一个页面底下，因为ViewPager默认下一个页面是绘制在上一个页面的上面，这里一般传入true，第二次参数才是重点，这里实现了PageTransformer接口，然后我们所有需要的动画效果都在transformPage这个接口方法里面实现，现在我们来看看这个方法。</p>
<p>我们发现transformPage方法也有两个参数，第一个参数就表示当前显示在屏幕上的Activity或者Fragment，这个不管，后一个参数是重点，这个position并不是我们引导页页面的position，下面借用一张图来说明这个position参数：<br><img src="http://img.blog.csdn.net/20160416110043276" alt="这里写图片描述"></p>
<blockquote>
<p><a href="http://chiemy.com/android/great-animation-with-pagetranformer" target="_blank" rel="external">图片出处</a></p>
</blockquote>
<p>谷歌官方对这个参数的解释是，这个参数表明了一个给定的页面相对于屏幕中心的位置，并且这个参数随着我们的滑动会动态的变化，最重要的一点是这个position参数是相对于我们的屏幕左边缘来说的，如果当前的页面刚好占满了整个屏幕，就如上图所示的1界面，那么这个页面的position参数就是0，如果一个页面刚从屏幕右边缘划出来，可以理解为上图中页面1和页面2的交界线刚冒头的情况，那么这个页面的position值就是1，如果某个时刻我们把页面1向左滑动一半，导致屏幕中央既有一半页面1显示又有一半页面2显示的时候，这时候页面1的position值就是-0.5，页面2的position值就是0.5，都是相对于左边缘来说的，而且左边缘的值固定是0，就是下面这种情况：<br><img src="http://img.my.csdn.net/uploads/201604/16/1460776252_2170.gif" alt="这里写图片描述"></p>
<p>那么知道这个值有什么用呢，其实多亏了这个值我们才能做出更好的动画效果，要知道这个值是动态变化的，有了一个动态变化的值就可以做出动态变化的效果，我们可以看看谷歌是怎么用它的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZoomOutPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_SCALE = <span class="number">0.85f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> MIN_ALPHA = <span class="number">0.5f</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> pageWidth = view.getWidth();</div><div class="line">        <span class="keyword">int</span> pageHeight = view.getHeight();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">            <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">            view.setAlpha(<span class="number">0</span>);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// [-1,1]</span></div><div class="line">            <span class="comment">// Modify the default slide transition to shrink the page as well</span></div><div class="line">            <span class="keyword">float</span> scaleFactor = Math.max(MIN_SCALE, <span class="number">1</span> - Math.abs(position));</div><div class="line">            <span class="keyword">float</span> vertMargin = pageHeight * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">float</span> horzMargin = pageWidth * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</div><div class="line">                view.setTranslationX(horzMargin - vertMargin / <span class="number">2</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                view.setTranslationX(-horzMargin + vertMargin / <span class="number">2</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></div><div class="line">            view.setScaleX(scaleFactor);</div><div class="line">            view.setScaleY(scaleFactor);</div><div class="line"></div><div class="line">            <span class="comment">// Fade the page relative to its size.</span></div><div class="line">            view.setAlpha(MIN_ALPHA +</div><div class="line">                    (scaleFactor - MIN_SCALE) /</div><div class="line">                    (<span class="number">1</span> - MIN_SCALE) * (<span class="number">1</span> - MIN_ALPHA));</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">            <span class="comment">// This page is way off-screen to the right.</span></div><div class="line">            view.setAlpha(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这份代码的实际效果如下：<br><img src="http://img.my.csdn.net/uploads/201604/16/1460776900_4978.gif" alt="这里写图片描述"><br>可以看到很明显的缩放以及透明度的变换，我们看看代码是怎么利用这个position参数的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">           <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">           view.setAlpha(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>首先这里判断如果position参数是负无穷到-1的时候，也就是此时这个page划出了屏幕左边缘之外不可见得情况，直接设置为透明的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// [-1,1]</span></div><div class="line">            <span class="comment">// Modify the default slide transition to shrink the page as well</span></div><div class="line">            <span class="keyword">float</span> scaleFactor = Math.max(MIN_SCALE, <span class="number">1</span> - Math.abs(position));</div><div class="line">            <span class="keyword">float</span> vertMargin = pageHeight * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">float</span> horzMargin = pageWidth * (<span class="number">1</span> - scaleFactor) / <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> (position &lt; <span class="number">0</span>) &#123;</div><div class="line">                view.setTranslationX(horzMargin - vertMargin / <span class="number">2</span>);</div></pre></td></tr></table></figure>
<p>接下里判断如果这个页面的position处于-1到1之间，也就是最极端的情况是这个页面即将向左边滑出屏幕之外，或者说这个页面还在屏幕右边缘即将滑入我们的视线，这时就用到了我们的position参数，这里谷歌把它当成了一个缩放系数来用;</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> scaleFactor = Math.max(MIN_SCALE, <span class="number">1</span> - Math.abs(position));</div></pre></td></tr></table></figure>
<p>这里<code>1 - Math.abs(position))</code> 的值在0~1之间，并且代码判断了MIN_SCALE和<code>1 - Math.abs(position))</code> 的大小并取其中的最大值，MIN_SCALE是最上面定义的最小缩放系数，可以看到这一行代码得出来的缩放系数是处于MIN_SCALE和1之间的，然后下面的代码就是根据position位置参数的变化来进行page的水平移动效果，其实ViewPager提供了相当多的方法共给我们去操作，诸如:setScale设置缩放啦，setRotation设置旋转效果，还有这里的setTranslationX设置水平移动效果等等，结合position这个动态变化的参数可以做出很多意想不到的动画，比如下面这个旋转动画：<br><img src="http://img.my.csdn.net/uploads/201604/16/1460777751_3362.gif" alt="这里写图片描述"><br>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">RotateDownPageTransformer</span> <span class="keyword">implements</span> <span class="title">ViewPager</span>.<span class="title">PageTransformer</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> ROT_MAX = <span class="number">20.0f</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mRot;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span></span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        Log.e(<span class="string">"TAG"</span>, view + <span class="string">" , "</span> + position + <span class="string">""</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (position &lt; -<span class="number">1</span>)</div><div class="line">        &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">            <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">            ViewHelper.setRotation(view, <span class="number">0</span>);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) <span class="comment">// a页滑动至b页 ； a页从 0.0 ~ -1 ；b页从1 ~ 0.0</span></div><div class="line">        &#123; <span class="comment">// [-1,1]</span></div><div class="line">            <span class="comment">// Modify the default slide transition to shrink the page as well</span></div><div class="line">            <span class="keyword">if</span> (position &lt; <span class="number">0</span>)</div><div class="line">            &#123;</div><div class="line"></div><div class="line">                mRot = (ROT_MAX * position);</div><div class="line">                ViewHelper.setPivotX(view, view.getMeasuredWidth() * <span class="number">0.5f</span>);</div><div class="line">                ViewHelper.setPivotY(view, view.getMeasuredHeight());</div><div class="line">                ViewHelper.setRotation(view, mRot);</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line"></div><div class="line">                mRot = (ROT_MAX * position);</div><div class="line">                ViewHelper.setPivotX(view, view.getMeasuredWidth() * <span class="number">0.5f</span>);</div><div class="line">                ViewHelper.setPivotY(view, view.getMeasuredHeight());</div><div class="line">                ViewHelper.setRotation(view, mRot);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">// Scale the page down (between MIN_SCALE and 1)</span></div><div class="line"></div><div class="line">            <span class="comment">// Fade the page relative to its size.</span></div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">            <span class="comment">// This page is way off-screen to the right.</span></div><div class="line">            ViewHelper.setRotation(view, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：这里的ViewHelper类需要引用nineoldandroids第三方动画库来实现，具体的东西我都打包好了在最下面有下载链接，需要的自行取用。</p>
<h4 id="更酷炫的效果"><a href="#更酷炫的效果" class="headerlink" title="更酷炫的效果"></a>更酷炫的效果</h4><p>其实除了对position这个参数进行处理，我们还可以对view进行动画处理，前面提到transformPage这个接口方法第一个参数view就是当前可见的Activity或Fragment，那么我们还可以对这个Activity或Fragment内部的元素进行处理来达到视察动画的效果，一个很好地例子：</p>
<div><img src="https://d262ilb51hltx0.cloudfront.net/max/600/1*zD4p2a5gBqt63PQH9ZLNdQ.gif"></div>

<hr>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transformPage</span><span class="params">(View view, <span class="keyword">float</span> position)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> pageWidth = view.getWidth();</div><div class="line">        </div><div class="line">    <span class="keyword">if</span> (position &lt; -<span class="number">1</span>) &#123; <span class="comment">// [-Infinity,-1)</span></div><div class="line">        <span class="comment">// This page is way off-screen to the left.</span></div><div class="line">        view.setAlpha(<span class="number">0</span>);</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position &lt;= <span class="number">1</span>) &#123; <span class="comment">// [-1,1]</span></div><div class="line">          </div><div class="line">		  </div><div class="line">        mBlur.setTranslationX((<span class="keyword">float</span>) (-(<span class="number">1</span> - position) * <span class="number">0.5</span> * pageWidth));</div><div class="line">		mBlurLabel.setTranslationX((<span class="keyword">float</span>) (-(<span class="number">1</span> - position) * <span class="number">0.5</span> * pageWidth));</div><div class="line"></div><div class="line">		mDim.setTranslationX((<span class="keyword">float</span>) (-(<span class="number">1</span> - position) * pageWidth));</div><div class="line">		mDimLabel.setTranslationX((<span class="keyword">float</span>) (-(<span class="number">1</span> - position) * pageWidth));</div><div class="line"></div><div class="line">		mCheck.setTranslationX((<span class="keyword">float</span>) (-(<span class="number">1</span> - position) * <span class="number">1.5</span> * pageWidth));</div><div class="line">		mDoneButton.setTranslationX((<span class="keyword">float</span>) (-(<span class="number">1</span> - position) * <span class="number">1.7</span> * pageWidth)); </div><div class="line">		<span class="comment">// The 0.5, 1.5, 1.7 values you see here are what makes the view move in a different speed.</span></div><div class="line">		<span class="comment">// The bigger the number, the faster the view will translate.</span></div><div class="line">		<span class="comment">// The result float is preceded by a minus because the views travel in the opposite direction of the movement.</span></div><div class="line"></div><div class="line">		mFirstColor.setTranslationX((position) * (pageWidth / <span class="number">4</span>));</div><div class="line"></div><div class="line">		mSecondColor.setTranslationX((position) * (pageWidth / <span class="number">1</span>));</div><div class="line"></div><div class="line">		mTint.setTranslationX((position) * (pageWidth / <span class="number">2</span>));</div><div class="line"></div><div class="line">		mDesaturate.setTranslationX((position) * (pageWidth / <span class="number">1</span>));</div><div class="line">		<span class="comment">// This is another way to do it</span></div><div class="line">		  </div><div class="line">		  </div><div class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// (1,+Infinity]</span></div><div class="line">        <span class="comment">// This page is way off-screen to the right.</span></div><div class="line">        view.setAlpha(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="https://github.com/chiemy/PageTransformerDemo" target="_blank" rel="external">工程地址</a></p>
<p>最后，附上整个项目的地址：<a href="http://download.csdn.net/detail/wei_smile/9492930" target="_blank" rel="external">项目地址</a><br>有任何问题可以留言探讨</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;就算Google从很早开始就自带了设置引导页动画的接口，但是就我目前看来市面上使用引导页动画的还是很少的，也不知道是为什么，一想到Material Design的使用率也这么少表示很心塞。&lt;br&gt;首先来看看市面上千篇一律的引导页效果，诺：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201604/16/1460774446_5006.gif&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;很单调对不对，你们没看吐我都看吐了，再看一份加了引导页动画效果的：&lt;br&gt;&lt;img src=&quot;http://img.my.csdn.net/uploads/201604/16/1460774609_1329.gif&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;有没有瞬间耳目一新的感觉，下面就谈谈如何做出这样的引导页动画。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="引导页" scheme="https:///www.limuyang.cc/tags/%E5%BC%95%E5%AF%BC%E9%A1%B5/"/>
    
      <category term="ViewPager" scheme="https:///www.limuyang.cc/tags/ViewPager/"/>
    
      <category term="动画" scheme="https:///www.limuyang.cc/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>ViewGroup的事件分发机制</title>
    <link href="https:///www.limuyang.cc/2016/04/04/ViewGroup%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>https:///www.limuyang.cc/2016/04/04/ViewGroup的事件分发机制/</id>
    <published>2016-04-04T13:08:19.000Z</published>
    <updated>2016-08-20T02:51:24.052Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>上一次我在<strong><a href="http://www.limuyang.cc/2016/07/24/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/" target="_blank" rel="external">View的事件分发机制</a></strong>里完整的分析了<code>View</code>对于触屏点击事件的分发过程，接下来继续探索之旅，紧接着分析<code>ViewGroup</code>的事件分发机制，<code>ViewGroup</code>其实就是一组<code>View</code>的集合，它也是继承于View的，它本身也可以包含<code>View</code>和<code>ViewGroup</code>，方便起见我们还是延用上一次的布局，不过这一次我们给根布局也设置了点击事件和触摸事件：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity implements OnClickListener,OnTouchListener&#123;</div><div class="line"></div><div class="line">	private RelativeLayout re_Layout;</div><div class="line">	private Button btn;</div><div class="line">	@Override</div><div class="line">	protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">		super.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_main);</div><div class="line">		btn=(Button) findViewById(R.id.btn);</div><div class="line">		re_Layout=(RelativeLayout) findViewById(R.id.re_layout);</div><div class="line">		btn.setOnClickListener(this);</div><div class="line">		btn.setOnTouchListener(this);</div><div class="line">		re_Layout.setOnClickListener(this);</div><div class="line">		re_Layout.setOnTouchListener(this);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public void onClick(View v) &#123;</div><div class="line">		Log.d(&quot;TAG&quot;, &quot;OnClick--&quot;+v);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">		Log.d(&quot;TAG&quot;, &quot;onTouch--&quot;+event.getAction()+&quot;--&quot;+v);</div><div class="line">		return false;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E7%82%B9%E5%87%BB%E6%95%88%E6%9E%9C%E5%9B%BE.jpg" alt="效果图"></p>
<p>效果图也依旧没有变，现在我们先点击一下Button,查看Log输出：<br><img src="http://oasusatoz.bkt.clouddn.com/Log%E8%BE%93%E5%87%BA.jpg" alt="Log输出"></p>
<p>可以很清楚的看到这里和上一节分析得情况一样：当点击事件发生时<code>onTouch()</code>方法是优先于<code>onClick()</code>方法执行的，并且如果<code>onTouch()</code>返回False既不消耗点击事件那么如果控件设置了<code>setOnClickListener</code>最终是会执行到<code>onClick()</code>方法的，可是我很好奇ViewGroup的点击事件和View的到底有什么区别，点击事件事件的分发到底是从<code>ViewGroup</code>开始还是从<code>View</code>开始的呢，于是我点击了Button以外的空白区域，捕捉到如下信息(注:我的根布局就是<code>RelativeLayout</code>)：<br><img src="http://oasusatoz.bkt.clouddn.com/%E7%A9%BA%E7%99%BD%E5%8C%BA%E5%9F%9FLog%E8%BE%93%E5%87%BA.jpg" alt="Log输出"></p>
<p>说明根布局也就是<code>Viewroup</code>也是可以响应点击事件的，但是我们点击<code>View</code>的时候为什么没有<code>ViewGroup</code>的Log输出，这是不是说明android事件分发是先传到<code>View</code>的，当<code>View</code>消耗的这个事件它的<code>ViewGroup</code>就无法接收这个事件了呢，为了彻底的谈清楚原因，我们先重写一个<code>ViewGroup</code>，然后重写这个<code>ViewGroup</code>里面的<code>onInterceptTouchEvent(MotionEvent ev)</code>、<code>dispatchTouchEvent(MotionEvent event)</code>还有onTouchEvent(MotionEvent event)这三个方法通过Log输出信息来判断：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class MyLayout extends RelativeLayout&#123;</div><div class="line"></div><div class="line">	public MyLayout(Context context,AttributeSet attrs) &#123;</div><div class="line">		super(context,attrs);</div><div class="line"></div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</div><div class="line">		Log.d(&quot;TAG&quot;, ev.getAction()+&quot; action&quot;+&quot;MyLayout onInterceptTouchEvent&quot;);</div><div class="line">		return super.onInterceptTouchEvent(ev);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">		Log.d(&quot;TAG&quot;, event.getAction()+&quot; action&quot;+&quot;MyLayout onTouchEvent&quot;);</div><div class="line">		return super.onTouchEvent(event);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">		Log.d(&quot;TAG&quot;, ev.getAction()+&quot; action&quot;+&quot;MyLayout dispatchTouchEvent&quot;);</div><div class="line">		return super.dispatchTouchEvent(ev);</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>同理我们还需要重写一个Button：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class MyButton extends Button&#123;</div><div class="line">	public MyButton(Context context,AttributeSet attrs)&#123;</div><div class="line">		super(context,attrs);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">		Log.d(&quot;TAG&quot;, event.getAction()+&quot; action&quot;+&quot;MyButton onTouchEvent&quot;);</div><div class="line">		return super.onTouchEvent(event);</div><div class="line">	&#125;</div><div class="line">	@Override</div><div class="line">	public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">		Log.d(&quot;TAG&quot;, ev.getAction()+&quot; action&quot;+&quot;MyButton dispatchTouchEvent&quot;);</div><div class="line">		return super.dispatchTouchEvent(ev);</div><div class="line">	&#125;</div><div class="line">	//这里注意View是没有onInterceptTouchEvent方法的</div></pre></td></tr></table></figure>
<p>效果图是一样的这里就不再贴了，为了验证刚才的想法我们直接点击一下界面上的Button，Log输出如下：<br><img src="http://oasusatoz.bkt.clouddn.com/%E5%86%8D%E6%AC%A1%E7%82%B9%E5%87%BB%E6%97%B6Log%E8%BE%93%E5%87%BA.jpg" alt="Log输出"></p>
<p>发现了什么，我们点击的是Button,然而这个事件最开始是传到了我们的根布局MyLayout，并且还按照：<br><code>dispatchTouchEvent</code>、<code>onInterceptTouchEvent</code>、<code>dispatchTouchEvent</code>的顺序执行，紧接着执行<code>View</code>的<code>onTouch()</code>和<code>onTouchEvent()</code>方法，还有一点很奇怪的事只有最开始ACTION_DOWN的时候调用了ViewGroup的<code>onInterceptTouchEvent</code>方法，在后面的ACTION_UP事件派发过程中却没有调用，这里给出一个合理的猜想：一旦一个View开始处理这个触摸事件，那么接下来的ACTION_MOVE和ACTION_UP事件都会交给它去处理，就好比你在公司里面做事，分到你做的事你已经做了一些，那么接下来的事你的完完整整的做好，那么如果做到一半不做了会怎么样(即View不消耗ACTION<em>DOWN事件)？我们可以大胆的假设如果上级交给你做的事没有做好，那么上级</em>在短期内肯定不敢交代事情给你做了(后续的ACTION_MOVE、ACTION_DOWN事件这个View都接收不到了)，那么究竟如何我们还是从源码看起。</p>
<h3 id="对源码的分析"><a href="#对源码的分析" class="headerlink" title="对源码的分析"></a>对源码的分析</h3><p>我们已经知道当一个点击操作发生时事件是先传给<code>ViewGroup</code>处理的并且首先执行的是<code>ViewGroup</code>的<code>dispatchTouchEvent</code>,那么我们就先来看看它的源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * &#123;@inheritDoc&#125;</div><div class="line">    */</div><div class="line">   @Override</div><div class="line">   public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">       if (mInputEventConsistencyVerifier != null) &#123;</div><div class="line">           mInputEventConsistencyVerifier.onTouchEvent(ev, 1);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       // If the event targets the accessibility focused view and this is it, start</div><div class="line">       // normal event dispatch. Maybe a descendant is what will handle the click.</div><div class="line">       if (ev.isTargetAccessibilityFocus() &amp;&amp; isAccessibilityFocusedViewOrHost()) &#123;</div><div class="line">           ev.setTargetAccessibilityFocus(false);</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       boolean handled = false;</div><div class="line">       if (onFilterTouchEventForSecurity(ev)) &#123;</div><div class="line">           final int action = ev.getAction();</div><div class="line">           final int actionMasked = action &amp; MotionEvent.ACTION_MASK;</div><div class="line"></div><div class="line">           // Handle an initial down.</div><div class="line">           if (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">               // Throw away all previous state when starting a new touch gesture.</div><div class="line">               // The framework may have dropped the up or cancel event for the previous gesture</div><div class="line">               // due to an app switch, ANR, or some other state change.</div><div class="line">               cancelAndClearTouchTargets(ev);</div><div class="line">               resetTouchState();</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           // Check for interception.</div><div class="line">           final boolean intercepted;</div><div class="line">           if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                   || mFirstTouchTarget != null) &#123;</div><div class="line">               final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</div><div class="line">               if (!disallowIntercept) &#123;</div><div class="line">                   intercepted = onInterceptTouchEvent(ev);</div><div class="line">                   ev.setAction(action); // restore action in case it was changed</div><div class="line">               &#125; else &#123;</div><div class="line">                   intercepted = false;</div><div class="line">               &#125;</div><div class="line">           &#125; else &#123;</div><div class="line">               // There are no touch targets and this action is not an initial down</div><div class="line">               // so this view group continues to intercept touches.</div><div class="line">               intercepted = true;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           // If intercepted, start normal event dispatch. Also if there is already</div><div class="line">           // a view that is handling the gesture, do normal event dispatch.</div><div class="line">           if (intercepted || mFirstTouchTarget != null) &#123;</div><div class="line">               ev.setTargetAccessibilityFocus(false);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           // Check for cancelation.</div><div class="line">           final boolean canceled = resetCancelNextUpFlag(this)</div><div class="line">                   || actionMasked == MotionEvent.ACTION_CANCEL;</div><div class="line"></div><div class="line">           // Update list of touch targets for pointer down, if needed.</div><div class="line">           final boolean split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != 0;</div><div class="line">           TouchTarget newTouchTarget = null;</div><div class="line">           boolean alreadyDispatchedToNewTouchTarget = false;</div><div class="line">           if (!canceled &amp;&amp; !intercepted) &#123;</div><div class="line"></div><div class="line">               // If the event is targeting accessiiblity focus we give it to the</div><div class="line">               // view that has accessibility focus and if it does not handle it</div><div class="line">               // we clear the flag and dispatch the event to all children as usual.</div><div class="line">               // We are looking up the accessibility focused host to avoid keeping</div><div class="line">               // state since these events are very rare.</div><div class="line">               View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus()</div><div class="line">                       ? findChildWithAccessibilityFocus() : null;</div><div class="line"></div><div class="line">               if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                       || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</div><div class="line">                       || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class="line">                   final int actionIndex = ev.getActionIndex(); // always 0 for down</div><div class="line">                   final int idBitsToAssign = split ? 1 &lt;&lt; ev.getPointerId(actionIndex)</div><div class="line">                           : TouchTarget.ALL_POINTER_IDS;</div><div class="line"></div><div class="line">                   // Clean up earlier touch targets for this pointer id in case they</div><div class="line">                   // have become out of sync.</div><div class="line">                   removePointersFromTouchTargets(idBitsToAssign);</div><div class="line"></div><div class="line">                   final int childrenCount = mChildrenCount;</div><div class="line">                   if (newTouchTarget == null &amp;&amp; childrenCount != 0) &#123;</div><div class="line">                       final float x = ev.getX(actionIndex);</div><div class="line">                       final float y = ev.getY(actionIndex);</div><div class="line">                       // Find a child that can receive the event.</div><div class="line">                       // Scan children from front to back.</div><div class="line">                       final ArrayList&lt;View&gt; preorderedList = buildOrderedChildList();</div><div class="line">                       final boolean customOrder = preorderedList == null</div><div class="line">                               &amp;&amp; isChildrenDrawingOrderEnabled();</div><div class="line">                       final View[] children = mChildren;</div><div class="line">                       for (int i = childrenCount - 1; i &gt;= 0; i--) &#123;</div><div class="line">                           final int childIndex = customOrder</div><div class="line">                                   ? getChildDrawingOrder(childrenCount, i) : i;</div><div class="line">                           final View child = (preorderedList == null)</div><div class="line">                                   ? children[childIndex] : preorderedList.get(childIndex);</div><div class="line"></div><div class="line">                           // If there is a view that has accessibility focus we want it</div><div class="line">                           // to get the event first and if not handled we will perform a</div><div class="line">                           // normal dispatch. We may do a double iteration but this is</div><div class="line">                           // safer given the timeframe.</div><div class="line">                           if (childWithAccessibilityFocus != null) &#123;</div><div class="line">                               if (childWithAccessibilityFocus != child) &#123;</div><div class="line">                                   continue;</div><div class="line">                               &#125;</div><div class="line">                               childWithAccessibilityFocus = null;</div><div class="line">                               i = childrenCount - 1;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           if (!canViewReceivePointerEvents(child)</div><div class="line">                                   || !isTransformedTouchPointInView(x, y, child, null)) &#123;</div><div class="line">                               ev.setTargetAccessibilityFocus(false);</div><div class="line">                               continue;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           newTouchTarget = getTouchTarget(child);</div><div class="line">                           if (newTouchTarget != null) &#123;</div><div class="line">                               // Child is already receiving touch within its bounds.</div><div class="line">                               // Give it the new pointer in addition to the ones it is handling.</div><div class="line">                               newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                               break;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           resetCancelNextUpFlag(child);</div><div class="line">                           if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123;</div><div class="line">                               // Child wants to receive touch within its bounds.</div><div class="line">                               mLastTouchDownTime = ev.getDownTime();</div><div class="line">                               if (preorderedList != null) &#123;</div><div class="line">                                   // childIndex points into presorted list, find original index</div><div class="line">                                   for (int j = 0; j &lt; childrenCount; j++) &#123;</div><div class="line">                                       if (children[childIndex] == mChildren[j]) &#123;</div><div class="line">                                           mLastTouchDownIndex = j;</div><div class="line">                                           break;</div><div class="line">                                       &#125;</div><div class="line">                                   &#125;</div><div class="line">                               &#125; else &#123;</div><div class="line">                                   mLastTouchDownIndex = childIndex;</div><div class="line">                               &#125;</div><div class="line">                               mLastTouchDownX = ev.getX();</div><div class="line">                               mLastTouchDownY = ev.getY();</div><div class="line">                               newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                               alreadyDispatchedToNewTouchTarget = true;</div><div class="line">                               break;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           // The accessibility focus didn&apos;t handle the event, so clear</div><div class="line">                           // the flag and do a normal dispatch to all children.</div><div class="line">                           ev.setTargetAccessibilityFocus(false);</div><div class="line">                       &#125;</div><div class="line">                       if (preorderedList != null) preorderedList.clear();</div><div class="line">                   &#125;</div><div class="line"></div><div class="line">                   if (newTouchTarget == null &amp;&amp; mFirstTouchTarget != null) &#123;</div><div class="line">                       // Did not find a child to receive the event.</div><div class="line">                       // Assign the pointer to the least recently added target.</div><div class="line">                       newTouchTarget = mFirstTouchTarget;</div><div class="line">                       while (newTouchTarget.next != null) &#123;</div><div class="line">                           newTouchTarget = newTouchTarget.next;</div><div class="line">                       &#125;</div><div class="line">                       newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           // Dispatch to touch targets.</div><div class="line">           if (mFirstTouchTarget == null) &#123;</div><div class="line">               // No touch targets so treat this as an ordinary view.</div><div class="line">               handled = dispatchTransformedTouchEvent(ev, canceled, null,</div><div class="line">                       TouchTarget.ALL_POINTER_IDS);</div><div class="line">           &#125; else &#123;</div><div class="line">               // Dispatch to touch targets, excluding the new touch target if we already</div><div class="line">               // dispatched to it.  Cancel touch targets if necessary.</div><div class="line">               TouchTarget predecessor = null;</div><div class="line">               TouchTarget target = mFirstTouchTarget;</div><div class="line">               while (target != null) &#123;</div><div class="line">                   final TouchTarget next = target.next;</div><div class="line">                   if (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</div><div class="line">                       handled = true;</div><div class="line">                   &#125; else &#123;</div><div class="line">                       final boolean cancelChild = resetCancelNextUpFlag(target.child)</div><div class="line">                               || intercepted;</div><div class="line">                       if (dispatchTransformedTouchEvent(ev, cancelChild,</div><div class="line">                               target.child, target.pointerIdBits)) &#123;</div><div class="line">                           handled = true;</div><div class="line">                       &#125;</div><div class="line">                       if (cancelChild) &#123;</div><div class="line">                           if (predecessor == null) &#123;</div><div class="line">                               mFirstTouchTarget = next;</div><div class="line">                           &#125; else &#123;</div><div class="line">                               predecessor.next = next;</div><div class="line">                           &#125;</div><div class="line">                           target.recycle();</div><div class="line">                           target = next;</div><div class="line">                           continue;</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   predecessor = target;</div><div class="line">                   target = next;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           // Update list of touch targets for pointer up or cancel, if needed.</div><div class="line">           if (canceled</div><div class="line">                   || actionMasked == MotionEvent.ACTION_UP</div><div class="line">                   || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class="line">               resetTouchState();</div><div class="line">           &#125; else if (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_UP) &#123;</div><div class="line">               final int actionIndex = ev.getActionIndex();</div><div class="line">               final int idBitsToRemove = 1 &lt;&lt; ev.getPointerId(actionIndex);</div><div class="line">               removePointersFromTouchTargets(idBitsToRemove);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (!handled &amp;&amp; mInputEventConsistencyVerifier != null) &#123;</div><div class="line">           mInputEventConsistencyVerifier.onUnhandledEvent(ev, 1);</div><div class="line">       &#125;</div><div class="line">       return handled;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>相当长，还是一点点来看，源码这种东西看不懂肯定会觉得很枯燥，所以能弄懂的尽量弄懂，最开始只是一些对View是否可以获得焦点的判断、设置标志位以及初始化一些布尔值，并且在ACTION_DOWN事件产生的时候清楚以外的状态并且准备开始新一轮的手势操作，不重要：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">if (mInputEventConsistencyVerifier != null) &#123;</div><div class="line">       mInputEventConsistencyVerifier.onTouchEvent(ev, 1);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   // If the event targets the accessibility focused view and this is it, start</div><div class="line">   // normal event dispatch. Maybe a descendant is what will handle the click.</div><div class="line">   if (ev.isTargetAccessibilityFocus() &amp;&amp; isAccessibilityFocusedViewOrHost()) &#123;</div><div class="line">       ev.setTargetAccessibilityFocus(false);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   boolean handled = false;</div><div class="line">   if (onFilterTouchEventForSecurity(ev)) &#123;</div><div class="line">       final int action = ev.getAction();</div><div class="line">       final int actionMasked = action &amp; MotionEvent.ACTION_MASK;</div><div class="line"></div><div class="line">       // Handle an initial down.</div><div class="line">       if (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">           // Throw away all previous state when starting a new touch gesture.</div><div class="line">           // The framework may have dropped the up or cancel event for the previous gesture</div><div class="line">           // due to an app switch, ANR, or some other state change.</div><div class="line">           cancelAndClearTouchTargets(ev);</div><div class="line">           resetTouchState();</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>先看这一段：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// Check for interception.</div><div class="line">          final boolean intercepted;</div><div class="line">          if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                  || mFirstTouchTarget != null) &#123;</div><div class="line">              final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</div><div class="line">              if (!disallowIntercept) &#123;</div><div class="line">                  intercepted = onInterceptTouchEvent(ev);</div><div class="line">                  ev.setAction(action); // restore action in case it was changed</div><div class="line">              &#125; else &#123;</div><div class="line">                  intercepted = false;</div><div class="line">              &#125;</div><div class="line">          &#125; else &#123;</div><div class="line">              // There are no touch targets and this action is not an initial down</div><div class="line">              // so this view group continues to intercept touches.</div><div class="line">              intercepted = true;</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<p>这里首先设立了一个布尔值<code>interception</code>去判断当前ViewGroup是否要拦截View的点击事件，<code>if</code>条件语句中的内容是当产生ACTION_DOWN按下事件或者<code>mFirstTouchTarget != null</code>的时候去判断是否要拦截当前事件，这里主要关注<code>mFirstTouchTarget != null</code>这个点，我们找一找哪个方法跟这个<code>mFirstTouchTarget</code>变量有关，还真给我找到了，看下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private void clearTouchTargets() &#123;</div><div class="line">       TouchTarget target = mFirstTouchTarget;</div><div class="line">       if (target != null) &#123;</div><div class="line">           do &#123;</div><div class="line">               TouchTarget next = target.next;</div><div class="line">               target.recycle();</div><div class="line">               target = next;</div><div class="line">           &#125; while (target != null);</div><div class="line">           mFirstTouchTarget = null;</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">     * Cancels and clears all touch targets.</div><div class="line">     */</div><div class="line">    private void cancelAndClearTouchTargets(MotionEvent event) &#123;</div><div class="line">        if (mFirstTouchTarget != null) &#123;</div><div class="line">            boolean syntheticEvent = false;</div><div class="line">            if (event == null) &#123;</div><div class="line">                final long now = SystemClock.uptimeMillis();</div><div class="line">                event = MotionEvent.obtain(now, now,</div><div class="line">                        MotionEvent.ACTION_CANCEL, 0.0f, 0.0f, 0);</div><div class="line">                event.setSource(InputDevice.SOURCE_TOUCHSCREEN);</div><div class="line">                syntheticEvent = true;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            for (TouchTarget target = mFirstTouchTarget; target != null; target = target.next) &#123;</div><div class="line">                resetCancelNextUpFlag(target.child);</div><div class="line">                dispatchTransformedTouchEvent(event, true, target.child, target.pointerIdBits);</div><div class="line">            &#125;</div><div class="line">            clearTouchTargets();</div><div class="line"></div><div class="line">            if (syntheticEvent) &#123;</div><div class="line">                event.recycle();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这两段代码结合起来，在加上在ACTION_DOWN初始时候是调用了<code>cancelAndClearTouchTargets(MotionEvent event)</code>这个方法的，所以我们可以推荐起初这个<code>mFirstTouchTarget</code> 的值是<code>null</code>的，那么<code>mFirstTouchTarget</code>是在哪里赋值的呢，我们在<code>dispatchTouchEvent(MotionEvent ev)</code>接着往下看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">newTouchTarget = addTouchTarget(child, idBitsToAssign);</div></pre></td></tr></table></figure>
<p>我们看到<code>newTouchTarget</code>是在这里赋值的，看一下<code>addTouchTarget</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Adds a touch target for specified child to the beginning of the list.</div><div class="line">    * Assumes the target child is not already present.</div><div class="line">    */</div><div class="line">   private TouchTarget addTouchTarget(View child, int pointerIdBits) &#123;</div><div class="line">       TouchTarget target = TouchTarget.obtain(child, pointerIdBits);</div><div class="line">       target.next = mFirstTouchTarget;</div><div class="line">       mFirstTouchTarget = target;</div><div class="line">       return target;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>从该方法的内部结构可以看出，mFirstTouchTarget其实是一中单链表结构，如果找到了处理该点击事件的子<code>View</code>那么<code>mFirstTouchTarget</code>就会被赋值并且会指向子元素。<br>这一下弄清楚了回到刚才的那段代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">final boolean intercepted;</div><div class="line">          if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                  || mFirstTouchTarget != null) &#123;</div><div class="line">              final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</div><div class="line">              if (!disallowIntercept) &#123;</div><div class="line">                  intercepted = onInterceptTouchEvent(ev);</div><div class="line">                  ev.setAction(action); // restore action in case it was changed</div><div class="line">              &#125; else &#123;</div><div class="line">                  intercepted = false;</div><div class="line">              &#125;</div><div class="line">          &#125; else &#123;</div><div class="line">              // There are no touch targets and this action is not an initial down</div><div class="line">              // so this view group continues to intercept touches.</div><div class="line">              intercepted = true;</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</div></pre></td></tr></table></figure>
<p>这个布尔值是判断子元素是否调用了<code>requestDisallowInterceptTouchEvent</code>这个方法，如果调用了这个布尔值就为True，这里看一眼这个方法的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * &#123;@inheritDoc&#125;</div><div class="line">    */</div><div class="line">   public void requestDisallowInterceptTouchEvent(boolean disallowIntercept) &#123;</div><div class="line"></div><div class="line">       if (disallowIntercept == ((mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0)) &#123;</div><div class="line">           // We&apos;re already in this state, assume our ancestors are too</div><div class="line">           return;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       if (disallowIntercept) &#123;</div><div class="line">           mGroupFlags |= FLAG_DISALLOW_INTERCEPT;</div><div class="line">       &#125; else &#123;</div><div class="line">           mGroupFlags &amp;= ~FLAG_DISALLOW_INTERCEPT;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       // Pass it up to our parent</div><div class="line">       if (mParent != null) &#123;</div><div class="line">           mParent.requestDisallowInterceptTouchEvent(disallowIntercept);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>你可以在子View中调用这个方法来让<code>ViewGroup</code>不拦截除了ACTION_DOWN以外的点击事件，这里为什么说是ACTION_DOWN以外呢，因为<code>ViewGroup</code>在分发事件的时候最开始是会重置<code>FLAG_DISALLOW_INTERCEPT</code>这个标志位的，所以无论你有没有在子View中设置<code>requestDisallowInterceptTouchEvent</code>方法都不会影响到<code>ViewGroup</code>去拦截ACTION_DOWN事件的，接着往下看：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">if (!disallowIntercept) &#123;</div><div class="line">                  intercepted = onInterceptTouchEvent(ev);</div><div class="line">                  ev.setAction(action); // restore action in case it was changed</div><div class="line">              &#125; else &#123;</div><div class="line">                  intercepted = false;</div><div class="line">              &#125;</div><div class="line">          &#125; else &#123;</div><div class="line">              // There are no touch targets and this action is not an initial down</div><div class="line">              // so this view group continues to intercept touches.</div><div class="line">              intercepted = true;</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<p>如果子<code>View</code>没有设置<code>requestDisallowInterceptTouchEvent</code>方法那么就调用<code>ViewGroup</code>的<code>onInterceptTouchEvent(ev)</code>方法，我们找到这个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">   * Implement this method to intercept all touch screen motion events.  This</div><div class="line">   * allows you to watch events as they are dispatched to your children, and</div><div class="line">   * take ownership of the current gesture at any point.</div><div class="line">   *</div><div class="line">   * &lt;p&gt;Using this function takes some care, as it has a fairly complicated</div><div class="line">   * interaction with &#123;@link View#onTouchEvent(MotionEvent)</div><div class="line">   * View.onTouchEvent(MotionEvent)&#125;, and using it requires implementing</div><div class="line">   * that method as well as this one in the correct way.  Events will be</div><div class="line">   * received in the following order:</div><div class="line">   *</div><div class="line">   * &lt;ol&gt;</div><div class="line">   * &lt;li&gt; You will receive the down event here.</div><div class="line">   * &lt;li&gt; The down event will be handled either by a child of this view</div><div class="line">   * group, or given to your own onTouchEvent() method to handle; this means</div><div class="line">   * you should implement onTouchEvent() to return true, so you will</div><div class="line">   * continue to see the rest of the gesture (instead of looking for</div><div class="line">   * a parent view to handle it).  Also, by returning true from</div><div class="line">   * onTouchEvent(), you will not receive any following</div><div class="line">   * events in onInterceptTouchEvent() and all touch processing must</div><div class="line">   * happen in onTouchEvent() like normal.</div><div class="line">   * &lt;li&gt; For as long as you return false from this function, each following</div><div class="line">   * event (up to and including the final up) will be delivered first here</div><div class="line">   * and then to the target&apos;s onTouchEvent().</div><div class="line">   * &lt;li&gt; If you return true from here, you will not receive any</div><div class="line">   * following events: the target view will receive the same event but</div><div class="line">   * with the action &#123;@link MotionEvent#ACTION_CANCEL&#125;, and all further</div><div class="line">   * events will be delivered to your onTouchEvent() method and no longer</div><div class="line">   * appear here.</div><div class="line">   * &lt;/ol&gt;</div><div class="line">   *</div><div class="line">   * @param ev The motion event being dispatched down the hierarchy.</div><div class="line">   * @return Return true to steal motion events from the children and have</div><div class="line">   * them dispatched to this ViewGroup through onTouchEvent().</div><div class="line">   * The current target will receive an ACTION_CANCEL event, and no further</div><div class="line">   * messages will be delivered here.</div><div class="line">   */</div><div class="line">  public boolean onInterceptTouchEvent(MotionEvent ev) &#123;</div><div class="line">      return false;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>唔，注释相当长，但是有用的就一个返回值，这里返回False，说明<code>ViewGrup</code>不拦截点击事件，事件可以继续往下传递，这个方法的最后，如果当前界面除了一个<code>ViewGroup</code>没有任何子<code>View</code>，那么此时<code>ViewGroup</code>也会拦截点击事件，就好比一个公司人手不够，公司领导需要亲力亲为一样。<br>接着：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// If intercepted, start normal event dispatch. Also if there is already</div><div class="line">            // a view that is handling the gesture, do normal event dispatch.</div><div class="line">            if (intercepted || mFirstTouchTarget != null) &#123;</div><div class="line">                ev.setTargetAccessibilityFocus(false);</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>如果确定拦截或者已经有子View着手处理这个点击事件，那么就开始正常的事件分发流程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">final boolean canceled = resetCancelNextUpFlag(this)</div><div class="line">                   || actionMasked == MotionEvent.ACTION_CANCEL;</div></pre></td></tr></table></figure>
<p>这里是通过标志位和ACTION_CANCLE来检查是否cancle，再下去：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">final boolean split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != 0;</div></pre></td></tr></table></figure>
<blockquote>
<p>首先可以看见获取一个boolean变量标记split来标记，默认是true，作用是是否把事件分发给多个子View，这个同样在ViewGroup中提供了public的方法设置，如下：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public void setMotionEventSplittingEnabled(boolean split) &#123;</div><div class="line">        // TODO Applications really shouldn&apos;t change this setting mid-touch event,</div><div class="line">        // but perhaps this should handle that case and send ACTION_CANCELs to any child views</div><div class="line">        // with gestures in progress when this is changed.</div><div class="line">        if (split) &#123;</div><div class="line">            mGroupFlags |= FLAG_SPLIT_MOTION_EVENTS;</div><div class="line">        &#125; else &#123;</div><div class="line">            mGroupFlags &amp;= ~FLAG_SPLIT_MOTION_EVENTS;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这一段摘自：<a href="http://blog.csdn.net/yanbober/article/details/45912661" target="_blank" rel="external">Android触摸屏事件派发机制详解与源码分析二(ViewGroup篇)</a>    　</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">if (!canceled &amp;&amp; !intercepted) &#123;</div></pre></td></tr></table></figure>
<p>如果没有取消当前动作并且<code>ViewGroup</code>未拦截事件那么事件就传递到接收了该点击事件的<code>View</code>，接下来是一大段代码预警：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">// If the event is targeting accessiiblity focus we give it to the</div><div class="line">               // view that has accessibility focus and if it does not handle it</div><div class="line">               // we clear the flag and dispatch the event to all children as usual.</div><div class="line">               // We are looking up the accessibility focused host to avoid keeping</div><div class="line">               // state since these events are very rare.</div><div class="line">               View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus()</div><div class="line">                       ? findChildWithAccessibilityFocus() : null;</div><div class="line"></div><div class="line">               if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                       || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</div><div class="line">                       || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class="line">                   final int actionIndex = ev.getActionIndex(); // always 0 for down</div><div class="line">                   final int idBitsToAssign = split ? 1 &lt;&lt; ev.getPointerId(actionIndex)</div><div class="line">                           : TouchTarget.ALL_POINTER_IDS;</div><div class="line"></div><div class="line">                   // Clean up earlier touch targets for this pointer id in case they</div><div class="line">                   // have become out of sync.</div><div class="line">                   removePointersFromTouchTargets(idBitsToAssign);</div><div class="line"></div><div class="line">                   final int childrenCount = mChildrenCount;</div><div class="line">                   if (newTouchTarget == null &amp;&amp; childrenCount != 0) &#123;</div><div class="line">                       final float x = ev.getX(actionIndex);</div><div class="line">                       final float y = ev.getY(actionIndex);</div><div class="line">                       // Find a child that can receive the event.</div><div class="line">                       // Scan children from front to back.</div><div class="line">                       final ArrayList&lt;View&gt; preorderedList = buildOrderedChildList();</div><div class="line">                       final boolean customOrder = preorderedList == null</div><div class="line">                               &amp;&amp; isChildrenDrawingOrderEnabled();</div><div class="line">                       final View[] children = mChildren;</div><div class="line">                       for (int i = childrenCount - 1; i &gt;= 0; i--) &#123;</div><div class="line">                           final int childIndex = customOrder</div><div class="line">                                   ? getChildDrawingOrder(childrenCount, i) : i;</div><div class="line">                           final View child = (preorderedList == null)</div><div class="line">                                   ? children[childIndex] : preorderedList.get(childIndex);</div><div class="line"></div><div class="line">                           // If there is a view that has accessibility focus we want it</div><div class="line">                           // to get the event first and if not handled we will perform a</div><div class="line">                           // normal dispatch. We may do a double iteration but this is</div><div class="line">                           // safer given the timeframe.</div><div class="line">                           if (childWithAccessibilityFocus != null) &#123;</div><div class="line">                               if (childWithAccessibilityFocus != child) &#123;</div><div class="line">                                   continue;</div><div class="line">                               &#125;</div><div class="line">                               childWithAccessibilityFocus = null;</div><div class="line">                               i = childrenCount - 1;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           if (!canViewReceivePointerEvents(child)</div><div class="line">                                   || !isTransformedTouchPointInView(x, y, child, null)) &#123;</div><div class="line">                               ev.setTargetAccessibilityFocus(false);</div><div class="line">                               continue;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           newTouchTarget = getTouchTarget(child);</div><div class="line">                           if (newTouchTarget != null) &#123;</div><div class="line">                               // Child is already receiving touch within its bounds.</div><div class="line">                               // Give it the new pointer in addition to the ones it is handling.</div><div class="line">                               newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                               break;</div><div class="line">                           &#125;</div><div class="line"></div><div class="line">                           resetCancelNextUpFlag(child);</div><div class="line">                           if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123;</div><div class="line">                               // Child wants to receive touch within its bounds.</div><div class="line">                               mLastTouchDownTime = ev.getDownTime();</div><div class="line">                               if (preorderedList != null) &#123;</div><div class="line">                                   // childIndex points into presorted list, find original index</div><div class="line">                                   for (int j = 0; j &lt; childrenCount; j++) &#123;</div><div class="line">                                       if (children[childIndex] == mChildren[j]) &#123;</div><div class="line">                                           mLastTouchDownIndex = j;</div><div class="line">                                           break;</div><div class="line">                                       &#125;</div><div class="line">                                   &#125;</div><div class="line">                               &#125; else &#123;</div><div class="line">                                   mLastTouchDownIndex = childIndex;</div><div class="line">                               &#125;</div><div class="line">                               mLastTouchDownX = ev.getX();</div><div class="line">                               mLastTouchDownY = ev.getY();</div><div class="line">                               newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                               alreadyDispatchedToNewTouchTarget = true;</div><div class="line">                               break;</div><div class="line">                           &#125;</div></pre></td></tr></table></figure>
<p>嗯，这段代码的逻辑比较清晰，大体上就是遍历<code>ViewGroup</code>的所有子元素，然后判断子元素是否能够接收到点击事件，接收的依据有两种：第一种是判断子元素是否在播放动画，第二种是判断点击事件的坐标是否落在子元素的区域内，从这里可以看出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">if (!canViewReceivePointerEvents(child)</div><div class="line">                                    || !isTransformedTouchPointInView(x, y, child, null)) &#123;</div><div class="line">                                ev.setTargetAccessibilityFocus(false);</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line"></div><div class="line">                            newTouchTarget = getTouchTarget(child);</div><div class="line">                            if (newTouchTarget != null) &#123;</div><div class="line">                                // Child is already receiving touch within its bounds.</div><div class="line">                                // Give it the new pointer in addition to the ones it is handling.</div><div class="line">                                newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                                break;</div><div class="line">                            &#125;</div></pre></td></tr></table></figure>
<p>如果子元素满足了这两个条件，点击事件就会交给它处理，接下来这段代码里面有一个很重要的方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123;</div><div class="line">                         // Child wants to receive touch within its bounds.</div><div class="line">                         mLastTouchDownTime = ev.getDownTime();</div><div class="line">                         if (preorderedList != null) &#123;</div><div class="line">                             // childIndex points into presorted list, find original index</div><div class="line">                             for (int j = 0; j &lt; childrenCount; j++) &#123;</div><div class="line">                                 if (children[childIndex] == mChildren[j]) &#123;</div><div class="line">                                     mLastTouchDownIndex = j;</div><div class="line">                                     break;</div><div class="line">                                 &#125;</div><div class="line">                             &#125;</div><div class="line">                         &#125; else &#123;</div><div class="line">                             mLastTouchDownIndex = childIndex;</div><div class="line">                         &#125;</div><div class="line">                         mLastTouchDownX = ev.getX();</div><div class="line">                         mLastTouchDownY = ev.getY();</div><div class="line">                         newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                         alreadyDispatchedToNewTouchTarget = true;</div><div class="line">                         break;</div><div class="line">                     &#125;</div></pre></td></tr></table></figure>
<p>这里<code>if</code>判断里面这个<code>dispatchTransformedTouchEvent</code>是将Touch事件传递给特定的子<code>View</code>，它实际上在内部是调用了子元素的<code>disPatchTouchEvent</code>方法，找一下它的源码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Transforms a motion event into the coordinate space of a particular child view,</div><div class="line"> * filters out irrelevant pointer ids, and overrides its action if necessary.</div><div class="line"> * If child is null, assumes the MotionEvent will be sent to this ViewGroup instead.</div><div class="line"> */</div><div class="line">private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,</div><div class="line">        View child, int desiredPointerIdBits) &#123;</div><div class="line">    final boolean handled;</div><div class="line"></div><div class="line">    // Canceling motions is a special case.  We don&apos;t need to perform any transformations</div><div class="line">    // or filtering.  The important part is the action, not the contents.</div><div class="line">    final int oldAction = event.getAction();</div><div class="line">    if (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</div><div class="line">        event.setAction(MotionEvent.ACTION_CANCEL);</div><div class="line">        if (child == null) &#123;</div><div class="line">            handled = super.dispatchTouchEvent(event);</div><div class="line">        &#125; else &#123;</div><div class="line">            handled = child.dispatchTouchEvent(event);</div><div class="line">        &#125;</div><div class="line">        event.setAction(oldAction);</div><div class="line">        return handled;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Calculate the number of pointers to deliver.</div><div class="line">    final int oldPointerIdBits = event.getPointerIdBits();</div><div class="line">    final int newPointerIdBits = oldPointerIdBits &amp; desiredPointerIdBits;</div><div class="line"></div><div class="line">    // If for some reason we ended up in an inconsistent state where it looks like we</div><div class="line">    // might produce a motion event with no pointers in it, then drop the event.</div><div class="line">    if (newPointerIdBits == 0) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>看这一段内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (child == null) &#123;</div><div class="line">              handled = super.dispatchTouchEvent(event);</div><div class="line">          &#125; else &#123;</div><div class="line">              handled = child.dispatchTouchEvent(event);</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<p>如果传递的child为null就调用父类的<code>dispatchTouchEvent</code>否则就调用子类的<code>dispatchTouchEvent</code>，而上面的代码中child不为null，所以执行子元素的<code>dispatchTouchEvent</code>，如果子元素的<code>dispatchTouchEvent</code>返回的是True，那么含有<code>dispatchTransformedTouchEvent</code>这个方法内部的for循环就不会继续下去，直接跳到这里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mLastTouchDownX = ev.getX();</div><div class="line">                               mLastTouchDownY = ev.getY();</div><div class="line">                               newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                               alreadyDispatchedToNewTouchTarget = true;</div><div class="line">                               break;</div></pre></td></tr></table></figure>
<p>这个地方前面说过是给<code>mFirstTouchTarget</code>赋值的地方，如果情况改变，前面那个<code>dispatchTransformedTouchEvent</code>方法中child返回的是False，那么如果当前<code>ViewGroup</code>会把点击事件传递给下一个子元素进行处理，执行<code>for</code>循环查找下一个子元素，此时<code>mFirstTouchTarget</code>依然未被赋值为null，那么这时候继续查看接下来的代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if (newTouchTarget == null &amp;&amp; mFirstTouchTarget != null) &#123;</div><div class="line">                   // Did not find a child to receive the event.</div><div class="line">                   // Assign the pointer to the least recently added target.</div><div class="line">                   newTouchTarget = mFirstTouchTarget;</div><div class="line">                   while (newTouchTarget.next != null) &#123;</div><div class="line">                       newTouchTarget = newTouchTarget.next;</div><div class="line">                   &#125;</div><div class="line">                   newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">               &#125;</div></pre></td></tr></table></figure>
<p>这一段代码表示当前没有找到可以接收点击事件的<code>View</code>并且我们的<code>mFirstTouchTarget!=null</code>那么就把最开始的TouchTarget赋值给<code>newTouchTarget</code>，最后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Dispatch to touch targets.</div><div class="line">           if (mFirstTouchTarget == null) &#123;</div><div class="line">               // No touch targets so treat this as an ordinary view.</div><div class="line">               handled = dispatchTransformedTouchEvent(ev, canceled, null,</div><div class="line">                       TouchTarget.ALL_POINTER_IDS);</div></pre></td></tr></table></figure>
<p>执行到这里的话有两种情况，一种是ViewGroup里面没有找到子View，另一种就是找到了处理这次点击事件的子View但是这个子View的<code>disPatchTouchEvent</code>返回了False，我们通过前面的分析知道<code>disPatchTouchEvent</code>中是先执行<code>onTouch()</code>方法的，而一般<code>onTouch()</code>方法返回的是False，此时<code>disPatchTouchEvent</code>方法的返回值由<code>onTouchEvent</code>方法决定，出现这种情况说明<code>onTouchEvent</code>返回了False，在以上两种情况下，<code>ViewGroup</code>会自己处理这个点击事件，注意这里这个方法里的child传入的是null，我们前面就知道了传入null会执行<code>handled = super.dispatchTouchEvent(event);</code>也就是说此时交由ViewGroup处理这个事件。而<code>ViewGroup</code>也是<code>View</code>的子类，它里面是没有重写<code>View</code>的<code>onTouchEvent</code>方法的，所以它自身处理点击事件的流程和我们在<a href="http://www.limuyang.cc/2016/07/24/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/" target="_blank" rel="external"><strong>View的事件分发机制解析</strong></a>里面分析得是一样的，至此<code>ViewGroup</code>的分发事件分析完毕。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这次我们只分析了点击Button时的Log输出，下面给出点击空白处的Log输出，可以自己检验一下分析成果：<br><img src="http://oasusatoz.bkt.clouddn.com/%E6%9C%80%E5%90%8E%E7%9A%84Log%E8%BE%93%E5%87%BA.jpg" alt="这里写图片描述"></p>
<h3 id="一些结论"><a href="#一些结论" class="headerlink" title="一些结论"></a>一些结论</h3><ul>
<li><code>ViewGroup</code>默认不拦截任何事件，<code>Android</code>源码中<code>ViewGroup</code>的<code>onInterceptTouchEvent</code>方法默认返回<code>false</code></li>
<li><code>View</code>的<code>onTouchEvent</code>默认都会消耗事件(返回<code>true</code>)，除非是不可点击的(<code>clickable</code>和<code>longClicjable</code>同时为<code>false</code>)，<code>View</code>的<code>longClickable</code>属性默认是<code>false</code>的</li>
<li><code>View</code>的<code>enable</code>属性不会影响<code>onTouchEvent</code>的返回值，哪怕该<code>View</code>为<code>disable</code>的，只要它的<code>clickable</code>和<code>longClickable</code>其中一个为<code>true</code>，那么它的<code>onTouchEvent</code>就返回<code>true</code></li>
<li>事件传递过程是由外向内的，即事件总是先传给父元素，然后再由父元素分发给子<code>VIew</code>,子<code>View</code>可以通过<code>requestDisallowInterceptTouchEvent</code>来干预父元素的分发过程，但是影响不到<code>ACTION_DOWN</code>事件</li>
</ul>
<p>参考：<br><a href="http://blog.csdn.net/yanbober/article/details/45912661" target="_blank" rel="external">Android触摸屏事件派发机制详解与源码分析二(ViewGroup篇)</a><br><a href="http://blog.csdn.net/guolin_blog/article/details/9153747" target="_blank" rel="external"> Android事件分发机制完全解析，带你从源码的角度彻底理解(下)</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;上一次我在&lt;strong&gt;&lt;a href=&quot;http://www.limuyang.cc/2016/07/24/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/&quot;&gt;View的事件分发机制&lt;/a&gt;&lt;/strong&gt;里完整的分析了&lt;code&gt;View&lt;/code&gt;对于触屏点击事件的分发过程，接下来继续探索之旅，紧接着分析&lt;code&gt;ViewGroup&lt;/code&gt;的事件分发机制，&lt;code&gt;ViewGroup&lt;/code&gt;其实就是一组&lt;code&gt;View&lt;/code&gt;的集合，它也是继承于View的，它本身也可以包含&lt;code&gt;View&lt;/code&gt;和&lt;code&gt;ViewGroup&lt;/code&gt;，方便起见我们还是延用上一次的布局，不过这一次我们给根布局也设置了点击事件和触摸事件：&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="事件分发" scheme="https:///www.limuyang.cc/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    
      <category term="回调" scheme="https:///www.limuyang.cc/tags/%E5%9B%9E%E8%B0%83/"/>
    
      <category term="ViewGroup" scheme="https:///www.limuyang.cc/tags/ViewGroup/"/>
    
  </entry>
  
  <entry>
    <title>View的事件分发机制解析</title>
    <link href="https:///www.limuyang.cc/2016/04/03/View%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6%E8%A7%A3%E6%9E%90/"/>
    <id>https:///www.limuyang.cc/2016/04/03/View的事件分发机制解析/</id>
    <published>2016-04-03T14:41:55.000Z</published>
    <updated>2017-02-17T13:12:59.428Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引言</strong></p>
<h4 id="Android事件构成"><a href="#Android事件构成" class="headerlink" title="Android事件构成"></a>Android事件构成</h4><p>在Android中，事件主要包括点按、长按、拖拽、滑动等，点按又包括单击和双击，另外还包括单指操作和多指操作。所有这些都构成了Android中的事件响应。总的来说，所有的事件都由如下三个部分作为基础：</p>
<ul>
<li>按下(ACTION_DOWN)</li>
<li>移动(ACTION_MOVE)</li>
<li>抬起(ACTION_UP) <a id="more"></a> 所有的操作事件首先必须执行的是按下操作（ACTION_DOWN），之后所有的操作都是以按下操作作为前提，当按下操作完成后，接下来可能是一段移动（ACTION_MOVE）然后抬起（ACTION_UP），或者是按下操作执行完成后没有移动就直接抬起。这一系列的动作在Android中都可以进行控制。</li>
</ul>
<p>这些操作事件都发生在我们手机的触摸屏上面，而我们手机上响应我们各种操作事件的就是各种各样的视图组件也就是<code>View</code>，在Android中，所有的视图都继承于<code>View</code>，另外通过各种布局组件（<code>ViewGroup</code>）来对<code>View</code>进行布局，<code>ViewGroup</code>也继承于<code>View</code>。所有的UI控件例如Button、TextView都是继承于<code>View</code>，而所有的布局控件例如RelativeLayout、容器控件例如ListView都是继承于ViewGroup。所以，我们的事件操作主要就是发生在<code>View</code>和<code>ViewGroup</code>之间。</p>
<h4 id="事件分发的概念"><a href="#事件分发的概念" class="headerlink" title="事件分发的概念"></a>事件分发的概念</h4><p>所谓点击事件的事件分发，就是当一个<code>MotionEvent</code>产生了以后，系统需要把这个事件传递给一个具体的<code>View</code>(<code>ViewGroup</code>也继承于<code>View</code>),这个传递的过程就叫做分发过程，这个点击事件的分发过程需要三个很重要的方法来共同完成：<code>disPatchTouchEvent、onInterceptTouchEvent、</code>和<code>onTouchEvent</code>。</p>
<blockquote>
<ul>
<li><strong>public boolean disPatchTouchEvent(MotionEvent ev)</strong> 用来进行事件的分发，如果事件能够传递给当前的<code>View</code>,那么此方法一定会被调用，Android中所有的点击事件都必须经过这个方法的分发，然后决定是自身消费当前事件还是继续往下分发给子控件处理。返回<code>true</code>表示不继续分发，事件已被消费,返回<code>false</code>则继续往下分发，如果是<code>ViewGroup</code>则分发给<code>onInterceptTouchEvent</code>进行判断是否拦截该事件，这个方法的返回结果受到当前<code>View</code>的<code>onTouchEvent</code>和下级<code>View</code>的<code>disPatchTouchEvent</code>方法的影响，返回结果表示是否消耗当前事件。</li>
</ul>
</blockquote>
<hr>
<blockquote>
<ul>
<li><strong>public boolean onTouchEvent(MotionEvent ev)</strong> 在<strong>diaPatchTouchEvent方法中</strong>调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列当中，当前<code>View</code>无法再次接收到事件。</li>
</ul>
</blockquote>
<hr>
<blockquote>
<ul>
<li><strong>public boolean onInterceptTouchEvent(MotionEvent ev)</strong> 是ViewGroup中才有的方法，View中没有，它的作用是负责事件的拦截，返回true的时候表示拦截当前事件，不继续往下分发，交给自身的<code>onTouchEvent</code>进行处理。返回false则不拦截，继续往下传。这是<code>ViewGroup</code>特有的方法，因为ViewGroup中可能还有子View，而在Android中View中是不能再包含子<code>View</code>的(IOS可以)，在上述方法内部被调用，如果当前<code>View</code>拦截了某个事件，那么同一个事件序列中(指从手指接触屏幕的那一刻起，到手指离开屏幕的那一刻结束，中间含有不定的<code>ACTION_MOVE</code>事件，最终以<code>ACTION_UP</code>事件结束)此方法不会被再次调用，返回结果表示是否拦截当前事件。</li>
</ul>
</blockquote>
<p><strong>这三个方法可以用如下伪代码表示：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">disPathchTouchEvent</span><span class="params">(MotionEvent ev)</span></span>&#123;</div><div class="line"><span class="comment">//consume指代点击事件是否被消耗</span></div><div class="line">     <span class="keyword">boolean</span> consume=<span class="keyword">false</span>;</div><div class="line">     <span class="comment">//表示当前父布局要拦截该事件</span></div><div class="line">     <span class="keyword">if</span>(onInterceptTouchEvent(MotionEvent ev))&#123;</div><div class="line">              consume=onTouchEvent(ev);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">     <span class="comment">//传递给子元素去处理</span></div><div class="line">   child.disPatchTouchEvent(ev);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> consume;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>分析View的事件分发机制</strong> 为了简单起见我们先从<code>View</code>的事件分发机制开始分析，然后在分析<code>ViewGroup</code>的，首先我们建一个简单的项目，这个项目里只有一个Button，并且我们给这个Button设置点击事件：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line"> &gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_alignParentTop</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_centerHorizontal</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:layout_marginTop</span>=<span class="string">"100dp"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"Click me"</span> /&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.example.testbtn;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.Activity;</div><div class="line"><span class="keyword">import</span> android.os.Bundle;</div><div class="line"><span class="keyword">import</span> android.util.Log;</div><div class="line"><span class="keyword">import</span> android.view.Menu;</div><div class="line"><span class="keyword">import</span> android.view.MenuItem;</div><div class="line"><span class="keyword">import</span> android.view.MotionEvent;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.View.OnClickListener;</div><div class="line"><span class="keyword">import</span> android.view.View.OnTouchListener;</div><div class="line"><span class="keyword">import</span> android.widget.Button;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>,<span class="title">OnTouchListener</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button btn;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        btn=(Button) findViewById(R.id.btn);</div><div class="line">        btn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        btn.setOnTouchListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"OnClick"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">        Log.d(<span class="string">"TAG"</span>, <span class="string">"onTouch"</span>+event.getAction());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>界面是这样的：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E7%95%8C%E9%9D%A2.jpg" alt="这里写图片描述"></p>
<p>运行这个程序，点击Button，查看Log打印输出的信息：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E6%9F%A5%E7%9C%8BLog%E8%BE%93%E5%87%BA%E4%BF%A1%E6%81%AF.jpg" alt="这里写图片描述"></p>
<p>(这里onTouch0代表的是ACTION_DOWN，onTouch1代表的是ACTION_UP，onTouch2表示ACTION_MOVE，因为我们只是稳稳的点击了一下Button所以不会有ACTION_MOVE的Log信息出现) 这样我们可以得到一个初步的结论：<code>onTouch()</code>方法是优先于<code>onClick()</code>执行的，然后我们会发现<code>onTouch()</code>方法有一个很明显的和<code>onClick()</code>方法不同的地方的，那就是它有一个<code>Boolean</code>类型的返回值，如果我们把这个默认为False的返回值改为True会怎么样呢：</p>
<p><img src="http://oasusatoz.bkt.clouddn.com/%E8%BF%94%E5%9B%9E%E5%80%BC%E6%94%B9%E4%B8%BATrue.jpg" alt="这里写图片描述"></p>
<p>发现了什么：<code>onClick()</code>方法没有被执行，这里我们把这种现象叫做点击事件被<code>onTouch()</code>消费掉了，事件不会在继续向<code>onClick()</code>方法传递了，那么事件分发机制最基本的几条我们已经了解了，下面我们来分析产生这种机制的根本原因。</p>
<h4 id="View对点击事件的处理过程"><a href="#View对点击事件的处理过程" class="headerlink" title="View对点击事件的处理过程"></a>View对点击事件的处理过程</h4><p>首先我们给出一个结论：Android中所有的事件都必须经过<code>disPatchTouchEvent(MotionEvent ev</code>)这个方法的分发，然后决定是自身消费当前事件还是继续往下分发给子控件处理，那么我们就来看看这个<code>disPatchTouchEvent(MotionEvent ev)</code>到底干了什么。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="comment">// If the event should be handled by accessibility focus first.</span></div><div class="line">        <span class="keyword">if</span> (event.isTargetAccessibilityFocus()) &#123;</div><div class="line">            <span class="comment">// We don't have focus or no virtual descendant has it, do not handle the event.</span></div><div class="line">            <span class="keyword">if</span> (!isAccessibilityFocusedViewOrHost()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// We have focus and got the event, then use normal event dispatch.</span></div><div class="line">            event.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</div><div class="line">            mInputEventConsistencyVerifier.onTouchEvent(event, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = event.getActionMasked();</div><div class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            <span class="comment">// Defensive cleanup for new gesture</span></div><div class="line">            stopNestedScroll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">            <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">            ListenerInfo li = mListenerInfo;</div><div class="line">            <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">                result = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">                result = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!result &amp;&amp; mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</div><div class="line">            mInputEventConsistencyVerifier.onUnhandledEvent(event, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Clean up after nested scrolls if this is the end of a gesture;</span></div><div class="line">        <span class="comment">// also cancel it if we tried an ACTION_DOWN but we didn't want the rest</span></div><div class="line">        <span class="comment">// of the gesture.</span></div><div class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_UP ||</div><div class="line">                actionMasked == MotionEvent.ACTION_CANCEL ||</div><div class="line">                (actionMasked == MotionEvent.ACTION_DOWN &amp;&amp; !result)) &#123;</div><div class="line">            stopNestedScroll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>代码有点多，我们一步步来看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// If the event should be handled by accessibility focus first.</span></div><div class="line">        <span class="keyword">if</span> (event.isTargetAccessibilityFocus()) &#123;</div><div class="line">            <span class="comment">// We don't have focus or no virtual descendant has it, do not handle the event.</span></div><div class="line">            <span class="keyword">if</span> (!isAccessibilityFocusedViewOrHost()) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// We have focus and got the event, then use normal event dispatch.</span></div><div class="line">            event.setTargetAccessibilityFocus(<span class="keyword">false</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>最前面这一段就是判断当前事件是否能获得焦点，如果不能获得焦点或者不存在一个<code>View</code>那我们就直接返回False跳出循环，接下来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mInputEventConsistencyVerifier != <span class="keyword">null</span>) &#123;</div><div class="line">            mInputEventConsistencyVerifier.onTouchEvent(event, <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> actionMasked = event.getActionMasked();</div><div class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            <span class="comment">// Defensive cleanup for new gesture</span></div><div class="line">            stopNestedScroll();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>设置一些标记和处理input与手势等传递，不用管，到这里：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">            <span class="comment">//noinspection SimplifiableIfStatement</span></div><div class="line">            ListenerInfo li = mListenerInfo;</div><div class="line">            <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">                result = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">                result = <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>这里<code>if (onFilterTouchEventForSecurity(event))</code>是用来判断<code>View</code>是否被遮住等，<code>ListenerInfo</code>是<code>View</code>的静态内部类，专门用来定义一些XXXListener等方法的，到了重点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">                result = <span class="keyword">true</span>;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>很长的一个判断，一个个来解释：第一个<code>li</code>肯定不为空，因为在这个If判断语句之前就new了一个<code>li</code>，第二个条件<code>li.mOnTouchListener != null</code>，怎么确定这个<code>mOnTouchListener</code>不为空呢？我们在View类里面发现了如下方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Register a callback to be invoked when a touch event is sent to this view.</div><div class="line">     * <span class="doctag">@param</span> l the touch listener to attach to this view</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnTouchListener</span><span class="params">(OnTouchListener l)</span> </span>&#123;</div><div class="line">        getListenerInfo().mOnTouchListener = l;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>意味着只要给控件注册了<code>onTouch</code>事件这个<code>mOnTouchListener</code>就一定会被赋值,接下来<code>(mViewFlags &amp; ENABLED_MASK) == ENABLED</code>是通过位与运算来判断这个<code>View</code>是否是<code>ENABLED</code>的，我们默认控件都是<code>ENABLED</code>的所以这一条也成立，最后一条<code>li.mOnTouchListener.onTouch(this, event)</code>是判断<code>onTouch()</code>的返回值是否为True，我们后面把默认为False的返回值改成了True，所以这一整系列的判断都是True，那么这个<code>disPatchTouchEvent(MotionEvent ev)</code>方法直接就返回了True,那么接下来的代码都不会被执行，我们下面有这么一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">                result = <span class="keyword">true</span>;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>最开始我们<code>onTouch()</code>方法的返回值是False的，那么</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnTouchListener != <span class="keyword">null</span></div><div class="line">                    &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                    &amp;&amp; li.mOnTouchListener.onTouch(<span class="keyword">this</span>, event)) &#123;</div><div class="line">                result = <span class="keyword">true</span>;</div><div class="line">            &#125;</div></pre></td></tr></table></figure>
<p>这里面的判断就不成立，result最开始的默认值也是false，那么此时如果</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onTouchEvent(event)</div></pre></td></tr></table></figure>
<p>返回值也是True，那么<code>if (!result &amp;&amp; onTouchEvent(event))</code>这个方法判断条件成立，<code>disPatchTouchEvent(MotionEvent ev)</code>返回True，否则返回False。</p>
<h4 id="这里我们得到两个结论："><a href="#这里我们得到两个结论：" class="headerlink" title="这里我们得到两个结论："></a>这里我们得到两个结论：</h4><ul>
<li><code>OnTouchListener</code>的优先级比<code>onTouchEvent</code>要高，联想到刚才的小Demo也可以得出<code>onTouch</code>方法优先于<code>onClick()</code>方法执行(<code>onClick()</code>是在<code>onTouchEvent(event)</code>方法中被执行的这个待会会说到)</li>
<li>如果控件（View）的<code>onTouch</code>返回False或者<code>mOnTouchListener</code>为null（控件没有设置<code>setOnTouchListener</code>方法）或者控件不是<code>ENABLE</code>的情况下会调用<code>onTouchEvent</code>方法，此时<code>dispatchTouchEvent</code>方法的返回值与<code>onTouchEvent</code>的返回值一样。</li>
</ul>
<p>那么接下来我们就分析<code>dispatchTouchEvent</code>方法里面<code>onTouchEvent</code>的实现,给出<code>onTouchEvent</code>的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Implement this method to handle touch screen motion events.</div><div class="line">     * &lt;p&gt;</div><div class="line">     * If this method is used to detect click actions, it is recommended that</div><div class="line">     * the actions be performed by implementing and calling</div><div class="line">     * &#123;<span class="doctag">@link</span> #performClick()&#125;. This will ensure consistent system behavior,</div><div class="line">     * including:</div><div class="line">     * &lt;ul&gt;</div><div class="line">     * &lt;li&gt;obeying click sound preferences</div><div class="line">     * &lt;li&gt;dispatching OnClickListener calls</div><div class="line">     * &lt;li&gt;handling &#123;<span class="doctag">@link</span> AccessibilityNodeInfo#ACTION_CLICK ACTION_CLICK&#125; when</div><div class="line">     * accessibility features are enabled</div><div class="line">     * &lt;/ul&gt;</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> event The motion event.</div><div class="line">     * <span class="doctag">@return</span> True if the event was handled, false otherwise.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span> x = event.getX();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">float</span> y = event.getY();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> viewFlags = mViewFlags;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> action = event.getAction();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">            <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">                setPressed(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">            <span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">            <span class="keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class="line">                    || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class="line">                    || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class="line">                (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class="line">            <span class="keyword">switch</span> (action) &#123;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</div><div class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</div><div class="line">                        <span class="comment">// take focus if we don't have it already and we should in</span></div><div class="line">                        <span class="comment">// touch mode.</span></div><div class="line">                        <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                            focusTaken = requestFocus();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                            <span class="comment">// The button is being released before we actually</span></div><div class="line">                            <span class="comment">// showed it as pressed.  Make it show the pressed</span></div><div class="line">                            <span class="comment">// state now (before scheduling the click) to ensure</span></div><div class="line">                            <span class="comment">// the user sees it.</span></div><div class="line">                            setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class="line">                            <span class="comment">// This is a tap, so remove the longpress check</span></div><div class="line">                            removeLongPressCallback();</div><div class="line"></div><div class="line">                            <span class="comment">// Only perform take click actions if we were in the pressed state</span></div><div class="line">                            <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                                <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                                <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                                <span class="comment">// of the view update before click actions start.</span></div><div class="line">                                <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                                    mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                    performClick();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</div><div class="line">                            mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                            postDelayed(mUnsetPressedState,</div><div class="line">                                    ViewConfiguration.getPressedStateDuration());</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</div><div class="line">                            <span class="comment">// If the post failed, unpress right now</span></div><div class="line">                            mUnsetPressedState.run();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        removeTapCallback();</div><div class="line">                    &#125;</div><div class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class="line">                    <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class="line"></div><div class="line">                    <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class="line">                    <span class="comment">// a short period in case this is a scroll.</span></div><div class="line">                    <span class="keyword">if</span> (isInScrollingContainer) &#123;</div><div class="line">                        mPrivateFlags |= PFLAG_PREPRESSED;</div><div class="line">                        <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</div><div class="line">                            mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</div><div class="line">                        &#125;</div><div class="line">                        mPendingCheckForTap.x = event.getX();</div><div class="line">                        mPendingCheckForTap.y = event.getY();</div><div class="line">                        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></div><div class="line">                        setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                        checkForLongClick(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">                    setPressed(<span class="keyword">false</span>);</div><div class="line">                    removeTapCallback();</div><div class="line">                    removeLongPressCallback();</div><div class="line">                    mInContextButtonPress = <span class="keyword">false</span>;</div><div class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                    drawableHotspotChanged(x, y);</div><div class="line"></div><div class="line">                    <span class="comment">// Be lenient about moving outside of buttons</span></div><div class="line">                    <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</div><div class="line">                        <span class="comment">// Outside button</span></div><div class="line">                        removeTapCallback();</div><div class="line">                        <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// Remove any future long press/tap checks</span></div><div class="line">                            removeLongPressCallback();</div><div class="line"></div><div class="line">                            setPressed(<span class="keyword">false</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<p>代码还是很多，我们依然一段一段来分析，最前面的一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">            <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">                setPressed(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// A disabled view that is clickable still consumes the touch</span></div><div class="line">            <span class="comment">// events, it just doesn't respond to them.</span></div><div class="line">            <span class="keyword">return</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class="line">                    || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class="line">                    || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>根据前面的分析我们知道这一段代码是对当前<code>View</code>处于不可用状态的情况下的分析，通过注释我们知道即使是一个不可用状态下的<code>View</code>依然会消耗点击事件，只是不会对这个点击事件作出响应罢了，另外通过观察这个return返回值，只要这个<code>View</code>的<code>CLICKABLE</code>和<code>LONG_CLICKABLE</code>或者<code>CONTEXT_CLICKABLE</code>有一个为True，那么返回值就是True，<code>onTouchEvent</code>方法会消耗当前事件。</p>
<p>看下一段代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mTouchDelegate != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>这段代码的意思是如果<code>View</code>设置有代理，那么还会执行<code>TouchDelegate</code>的<code>onTouchEvent(event)</code>方法，这个<code>onTouchEvent(event)</code>的工作机制看起来和<code>OnTouchListener</code>类似，这里不深入研究。 –《Android开发艺术探索》</p>
</blockquote>
<p>下面看一下<code>onTouchEvent</code>中对点击事件的具体处理流程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class="line">                (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class="line">            <span class="keyword">switch</span> (action) &#123;</div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</div><div class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</div><div class="line">                        <span class="comment">// take focus if we don't have it already and we should in</span></div><div class="line">                        <span class="comment">// touch mode.</span></div><div class="line">                        <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                            focusTaken = requestFocus();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                            <span class="comment">// The button is being released before we actually</span></div><div class="line">                            <span class="comment">// showed it as pressed.  Make it show the pressed</span></div><div class="line">                            <span class="comment">// state now (before scheduling the click) to ensure</span></div><div class="line">                            <span class="comment">// the user sees it.</span></div><div class="line">                            setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class="line">                            <span class="comment">// This is a tap, so remove the longpress check</span></div><div class="line">                            removeLongPressCallback();</div><div class="line"></div><div class="line">                            <span class="comment">// Only perform take click actions if we were in the pressed state</span></div><div class="line">                            <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                                <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                                <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                                <span class="comment">// of the view update before click actions start.</span></div><div class="line">                                <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                                    mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                    performClick();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</div><div class="line">                            mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                            postDelayed(mUnsetPressedState,</div><div class="line">                                    ViewConfiguration.getPressedStateDuration());</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</div><div class="line">                            <span class="comment">// If the post failed, unpress right now</span></div><div class="line">                            mUnsetPressedState.run();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        removeTapCallback();</div><div class="line">                    &#125;</div><div class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (performButtonActionOnTouchDown(event)) &#123;</div><div class="line">                        <span class="keyword">break</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="comment">// Walk up the hierarchy to determine if we're inside a scrolling container.</span></div><div class="line">                    <span class="keyword">boolean</span> isInScrollingContainer = isInScrollingContainer();</div><div class="line"></div><div class="line">                    <span class="comment">// For views inside a scrolling container, delay the pressed feedback for</span></div><div class="line">                    <span class="comment">// a short period in case this is a scroll.</span></div><div class="line">                    <span class="keyword">if</span> (isInScrollingContainer) &#123;</div><div class="line">                        mPrivateFlags |= PFLAG_PREPRESSED;</div><div class="line">                        <span class="keyword">if</span> (mPendingCheckForTap == <span class="keyword">null</span>) &#123;</div><div class="line">                            mPendingCheckForTap = <span class="keyword">new</span> CheckForTap();</div><div class="line">                        &#125;</div><div class="line">                        mPendingCheckForTap.x = event.getX();</div><div class="line">                        mPendingCheckForTap.y = event.getY();</div><div class="line">                        postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">// Not inside a scrolling container, so show the feedback right away</span></div><div class="line">                        setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                        checkForLongClick(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">                    setPressed(<span class="keyword">false</span>);</div><div class="line">                    removeTapCallback();</div><div class="line">                    removeLongPressCallback();</div><div class="line">                    mInContextButtonPress = <span class="keyword">false</span>;</div><div class="line">                    mHasPerformedLongPress = <span class="keyword">false</span>;</div><div class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line"></div><div class="line">                <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                    drawableHotspotChanged(x, y);</div><div class="line"></div><div class="line">                    <span class="comment">// Be lenient about moving outside of buttons</span></div><div class="line">                    <span class="keyword">if</span> (!pointInView(x, y, mTouchSlop)) &#123;</div><div class="line">                        <span class="comment">// Outside button</span></div><div class="line">                        removeTapCallback();</div><div class="line">                        <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span>) &#123;</div><div class="line">                            <span class="comment">// Remove any future long press/tap checks</span></div><div class="line">                            removeLongPressCallback();</div><div class="line"></div><div class="line">                            setPressed(<span class="keyword">false</span>);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们还是一行行来分解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">                (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class="line">                (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class="line">            <span class="keyword">switch</span> (action) &#123;</div><div class="line">            <span class="comment">//省略</span></div><div class="line">            &#125;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>这个判断之前描述过不再赘述，如果这个判断不成立直接跳到方法尾部返回False，如果判断成立则继续进入方法内部进行一个switch(event)的判断，这里ACTION_DOWN和ACTION_MOVE都只是进行一些必要的设置与置位，我们主要看ACTION_UP：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">                    <span class="keyword">boolean</span> prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != <span class="number">0</span>;</div><div class="line">                    <span class="keyword">if</span> ((mPrivateFlags &amp; PFLAG_PRESSED) != <span class="number">0</span> || prepressed) &#123;</div><div class="line">                        <span class="comment">// take focus if we don't have it already and we should in</span></div><div class="line">                        <span class="comment">// touch mode.</span></div><div class="line">                        <span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                            focusTaken = requestFocus();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                            <span class="comment">// The button is being released before we actually</span></div><div class="line">                            <span class="comment">// showed it as pressed.  Make it show the pressed</span></div><div class="line">                            <span class="comment">// state now (before scheduling the click) to ensure</span></div><div class="line">                            <span class="comment">// the user sees it.</span></div><div class="line">                            setPressed(<span class="keyword">true</span>, x, y);</div><div class="line">                       &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class="line">                            <span class="comment">// This is a tap, so remove the longpress check</span></div><div class="line">                            removeLongPressCallback();</div><div class="line"></div><div class="line">                            <span class="comment">// Only perform take click actions if we were in the pressed state</span></div><div class="line">                            <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                                <span class="comment">// Use a Runnable and post this rather than calling</span></div><div class="line">                                <span class="comment">// performClick directly. This lets other visual state</span></div><div class="line">                                <span class="comment">// of the view update before click actions start.</span></div><div class="line">                                <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;</div><div class="line">                                    mPerformClick = <span class="keyword">new</span> PerformClick();</div><div class="line">                                &#125;</div><div class="line">                                <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                    performClick();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (mUnsetPressedState == <span class="keyword">null</span>) &#123;</div><div class="line">                            mUnsetPressedState = <span class="keyword">new</span> UnsetPressedState();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                            postDelayed(mUnsetPressedState,</div><div class="line">                                    ViewConfiguration.getPressedStateDuration());</div><div class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</div><div class="line">                            <span class="comment">// If the post failed, unpress right now</span></div><div class="line">                            mUnsetPressedState.run();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        removeTapCallback();</div><div class="line">                    &#125;</div><div class="line">                    mIgnoreNextUpEvent = <span class="keyword">false</span>;</div></pre></td></tr></table></figure>
<p>首先判断了是否被按下 <code>boolean prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != 0;</code>接下来判断是不是可以获得焦点，同时尝试去获取焦点：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">boolean</span> focusTaken = <span class="keyword">false</span>;</div><div class="line">                        <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                            focusTaken = requestFocus();</div><div class="line">                        &#125;</div></pre></td></tr></table></figure>
<p>经过种种判断后我们看到这一行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                    performClick();</div><div class="line">                                &#125;</div></pre></td></tr></table></figure>
<p>这是判断如果不是longPressed则通过post在UI Thread中执行一个PerformClick的Runnable，也就是performClick方法，这个方法的源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Call this view's OnClickListener, if it is defined.  Performs all normal</div><div class="line">     * actions associated with clicking: reporting accessibility event, playing</div><div class="line">     * a sound, etc.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false</div><div class="line">     *         otherwise is returned.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> result;</div><div class="line">        <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</div><div class="line">        <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">            playSoundEffect(SoundEffectConstants.CLICK);</div><div class="line">            li.mOnClickListener.onClick(<span class="keyword">this</span>);</div><div class="line">            result = <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            result = <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们发现了什么，那就是当ACTION_UP事件发生时，会触发<code>performClick()</code>方法，如果这个<code>View</code>设置了<code>OnClickListener</code>那么最终会执行到<code>OnClickListener</code>的回调方法<code>onClick()</code>,这也就验证了刚才所说的：<strong>onClick()方法是在<code>onTouchEvent</code>内部被调用的。</strong> 同我们前面找到<code>mOnTouchListener</code>在哪里赋值的一样，我们也可以找到<code>mOnClickListener</code>在哪里赋值的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Register a callback to be invoked when this view is clicked. If this view is not</div><div class="line">     * clickable, it becomes clickable.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> l The callback that will run</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #setClickable(boolean)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(@Nullable OnClickListener l)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isClickable()) &#123;</div><div class="line">            setClickable(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        getListenerInfo().mOnClickListener = l;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>我们知道<code>View</code>的<code>LONG_CLICKABLE</code>属性默认是False的，需要的话我们可以自己在xml或者java文件中去设置，但是<code>CLICKABLE</code>的False与True是和具体的<code>View</code>有关的，比如我们知道Button是可点击的，但是TextView默认是不可点击的，但是如果给TextView设置了点击事件，那么根据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!isClickable()) &#123;</div><div class="line">            setClickable(<span class="keyword">true</span>);</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>这几行代码TextView也会被设置为可点击的，同理还有<code>setOnLongClickListener</code>也有这种作用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Register a callback to be invoked when this view is clicked and held. If this view is not</div><div class="line">     * long clickable, it becomes long clickable.</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> l The callback that will run</div><div class="line">     *</div><div class="line">     * <span class="doctag">@see</span> #setLongClickable(boolean)</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnLongClickListener</span><span class="params">(@Nullable OnLongClickListener l)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!isLongClickable()) &#123;</div><div class="line">            setLongClickable(<span class="keyword">true</span>);</div><div class="line">        &#125;</div><div class="line">        getListenerInfo().mOnLongClickListener = l;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>到此，View的事件分发机制已经分析完了，整个过程查了许多资料，最主要的是跟着任玉刚老师的《Android开发艺术探索》学习，最后把这个学习的过程记录下来就是这篇博客了，等有时间的时候把ViewGroup的事件分发机制也分析一遍。</p>
<p>主要参考 <a href="http://blog.csdn.net/yanbober/article/details/45887547" target="_blank" rel="external">Android触摸屏事件派发机制详解与源码分析一(View篇)</a> <a href="http://www.infoq.com/cn/articles/android-event-delivery-mechanism" target="_blank" rel="external">Android事件传递机制</a></p>
<h4 id="请看后续-ViewGroup的事件分发机制"><a href="#请看后续-ViewGroup的事件分发机制" class="headerlink" title="请看后续 ViewGroup的事件分发机制"></a>请看后续 <a href="http://www.limuyang.cc/2016/04/04/ViewGroup%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/" target="_blank" rel="external">ViewGroup的事件分发机制</a></h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;Android事件构成&quot;&gt;&lt;a href=&quot;#Android事件构成&quot; class=&quot;headerlink&quot; title=&quot;Android事件构成&quot;&gt;&lt;/a&gt;Android事件构成&lt;/h4&gt;&lt;p&gt;在Android中，事件主要包括点按、长按、拖拽、滑动等，点按又包括单击和双击，另外还包括单指操作和多指操作。所有这些都构成了Android中的事件响应。总的来说，所有的事件都由如下三个部分作为基础：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按下(ACTION_DOWN)&lt;/li&gt;
&lt;li&gt;移动(ACTION_MOVE)&lt;/li&gt;
&lt;li&gt;抬起(ACTION_UP)
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="事件分发" scheme="https:///www.limuyang.cc/tags/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
    
      <category term="回调" scheme="https:///www.limuyang.cc/tags/%E5%9B%9E%E8%B0%83/"/>
    
  </entry>
  
  <entry>
    <title>回调函数机制</title>
    <link href="https:///www.limuyang.cc/2016/04/01/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0%E6%9C%BA%E5%88%B6/"/>
    <id>https:///www.limuyang.cc/2016/04/01/回调函数机制/</id>
    <published>2016-04-01T15:12:01.000Z</published>
    <updated>2016-08-20T02:56:01.619Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引言</strong></p>
<blockquote>
<p>在Android的学习过程中经常会听到或者见到“回调”这个词，那么什么是回调呢？所谓的回调函数就是：<strong>在A类中定义了一个方法，这个方法中用到了一个接口和该接口中的抽象方法，但是抽象方法没有具体的实现，需要B类去实现，B类实现该方法后，它本身不会去调用该方法，而是传递给A类，供A类去调用</strong>，这种机制就称为回调。</p>
</blockquote>
<a id="more"></a>
<p>这么说可能还是有些模模糊糊，接下来我们用类比的方法一步步来看到底该怎么写一个回调函数，因为android回调中最常见的是Button的点击事件的回调，这里以此为参照：</p>
<ul>
<li>1、在A类中定义一个接口：需要我们在类中定义出一个接口，并且给这个接口定义出一个抽象方法，就像下面这样：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span></span>&#123;</div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>以下是<code>View.java</code>类中定义的响应点击事件的接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * Interface definition for a callback to be invoked when a view is clicked.</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnClickListener</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * Called when a view has been clicked.</div><div class="line">         *</div><div class="line">         * <span class="doctag">@param</span> v The view that was clicked.</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span></span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ul>
<li>2、在A类中定义出该接口的一个成员变量：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> CallBack mCallBack</div></pre></td></tr></table></figure>
<p>以下是<code>View.java</code>类中获取点击事件接口成员变量的源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">       * Listener used to dispatch click events.</div><div class="line">       * This field should be made private, so it is hidden from the SDK.</div><div class="line">       * &#123;<span class="doctag">@hide</span>&#125;</div><div class="line">       */</div><div class="line">      <span class="keyword">public</span> OnClickListener mOnClickListener;</div></pre></td></tr></table></figure></p>
<ul>
<li>3、在A类中定义出一个公共方法，可以用来设置这个接口的对象，调用该方法可以给接口对象变量赋值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void setCallBack(CallBack callBack) &#123;    </div><div class="line">    this.mCallBack = callBack;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里看英文注释也看得出来是什么意思，是不是想到了我们平常使用<code>setOnClickListener(OnClickListener l)</code>的时候呢:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * Register a callback to be invoked when this view is clicked. If this view is not</div><div class="line">    * clickable, it becomes clickable.</div><div class="line">    *</div><div class="line">    * @param l The callback that will run</div><div class="line">    *</div><div class="line">    * @see #setClickable(boolean)</div><div class="line">    */</div><div class="line">   public void setOnClickListener(@Nullable OnClickListener l) &#123;</div><div class="line">       if (!isClickable()) &#123;</div><div class="line">           setClickable(true);</div><div class="line">       &#125;</div><div class="line">       getListenerInfo().mOnClickListener = l;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>最后一步，如果说前面的都没问题，但这一步可能更不好理解了，不过没关系，我们先看一下</p>
<ul>
<li>4、在A类中调用接口对象中的方法：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span></span>&#123;</div><div class="line">   mCallBack.work();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在<code>View.java</code>中的体现：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * Call this view's OnClickListener, if it is defined.  Performs all normal</div><div class="line">    * actions associated with clicking: reporting accessibility event, playing</div><div class="line">    * a sound, etc.</div><div class="line">    *</div><div class="line">    * <span class="doctag">@return</span> True there was an assigned OnClickListener that was called, false</div><div class="line">    *         otherwise is returned.</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">final</span> <span class="keyword">boolean</span> result;</div><div class="line">       <span class="keyword">final</span> ListenerInfo li = mListenerInfo;</div><div class="line">       <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;</div><div class="line">           playSoundEffect(SoundEffectConstants.CLICK);</div><div class="line">           li.mOnClickListener.onClick(<span class="keyword">this</span>);<span class="comment">//就是这里</span></div><div class="line">           result = <span class="keyword">true</span>;</div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           result = <span class="keyword">false</span>;</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>这里附上整个项目的代码，这里A类映射到实际中使用<code>Employee</code> 这个类来代表：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;    </div><div class="line">    <span class="comment">/*  </span></div><div class="line">     * 定义回调接口的成员变量  </div><div class="line">     */    </div><div class="line">    <span class="keyword">private</span> CallBack mCallBack;    </div><div class="line">    <span class="comment">/*  </span></div><div class="line">     * 声明回调接口  </div><div class="line">     */    </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span></span>&#123;    </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>;    </div><div class="line">    &#125;    </div><div class="line">    <span class="comment">/*  </span></div><div class="line">     * 设置回调接口对象成员变量  </div><div class="line">     */    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCallBack</span><span class="params">(CallBack callBack)</span> </span>&#123;    </div><div class="line">        <span class="keyword">this</span>.mCallBack = callBack;    </div><div class="line">    &#125;    </div><div class="line">    <span class="comment">/*  </span></div><div class="line">     * 调用回调接口对象中的方法  </div><div class="line">     */    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> </span>&#123;    </div><div class="line">        mCallback.work();    </div><div class="line">    &#125;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在定义出一个B类，就用<code>Boss</code>类吧：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;    </div><div class="line">    <span class="keyword">private</span> Employee employee;    </div><div class="line">    <span class="comment">/*  </span></div><div class="line">     * 为Employee设置回调函数, 在这里定义具体的回调方法  </div><div class="line">     */    </div><div class="line">        employee.setCallback(<span class="keyword">new</span> Employee.Callback() &#123;    </div><div class="line">            <span class="meta">@Override</span>    </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;    </div><div class="line">                System.out.println(<span class="string">"work"</span>);    </div><div class="line">            &#125;    </div><div class="line">        &#125;);      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果第一眼看不明白，我们附上我们最常用的Button点击事件的处理的代码，这里Employee 类类比一下就是<code>View</code>类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class TestCallBack&#123;</div><div class="line">	private Button button;</div><div class="line">	button.setOnClickListener(new OnClickListener() &#123;</div><div class="line">		</div><div class="line">		@Override</div><div class="line">		public void onClick(View v) &#123;</div><div class="line">           //做一些操作</div><div class="line">			doWork();</div><div class="line">		&#125;</div><div class="line">	&#125;);</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>这时候我们在再回头关于回调的定义：</strong></p>
<blockquote>
<p>在A类中定义了一个方法，这个方法中用到了一个接口和该接口中的抽象方法，但是抽象方法没有具体的实现，需要B类去实现，B类实现该方法后，它本身不会去调用该方法，而是传递给A类，供A类去调用</p>
</blockquote>
<p>这里回到我们的代码中就是：<br>我们在Employee(View)类中定义了一个接口，接口当中还含有一个抽象方法，这个抽象方法没有具体的实现，当我们需要时候自己去实现这个方法，比如这里的Boss (Button)类，这句话可能难以理解：<strong>B类实现该方法后，它本身不会去调用该方法，而是传递给A类，供A类去调用</strong>，有些人会想，诶，在<code>onClick()</code>方法中我不是写了具体的实现嘛，其实真的是这样吗，我们接着往下看，我们就来好好的分析一下这个Button点击事件。<br><strong>分析</strong><br>首先，在View类中我们能找到setOnClickListener(OnClickListener l)方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnClickListener</span><span class="params">(@Nullable OnClickListener l)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!isClickable()) &#123;</div><div class="line">           setClickable(<span class="keyword">true</span>);</div><div class="line">       &#125;</div><div class="line">       getListenerInfo().mOnClickListener = l;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>这里将OnClickListener赋值给了mOnClickListener，我们想要找到onClick()方法是由View回调而不是Button自己回调的证据，就在这里：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">performClick</span><span class="params">()</span> </span>&#123;  </div><div class="line">     sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);  </div><div class="line">     ListenerInfo li = mListenerInfo;  </div><div class="line">     <span class="keyword">if</span> (li != <span class="keyword">null</span> &amp;&amp; li.mOnClickListener != <span class="keyword">null</span>) &#123;  </div><div class="line">         playSoundEffect(SoundEffectConstants.CLICK);  </div><div class="line">         li.mOnClickListener.onClick(<span class="keyword">this</span>);  </div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;  </div><div class="line">     &#125;  </div><div class="line">     <span class="keyword">return</span> <span class="keyword">false</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对此我们的解释是：在父类中我们要用到<code>onClick()</code>方法，但是父类却没有去实现该方法，而是定义了一个方法setOnClickListener(OnClickListener l)，如果子类想要自己能够响应点击事件，则它就必须重写父类的该方法，实现OnClickListener接口和它的<code>onClick()</code>方法。在子类实现该接口和方法后，将其通过参数传递给父类，在父类中执行<code>onClick()</code>方法。那么我们是如何运行到这个<code>OnClick()</code>函数的呢，这里由于涉及到View的事件分发机制不细说，想了解的话网上有很多资料，这里只给出结论，因为我们在TestCallBack这个类中没有实现<code>OnTouchListener</code>这个接口，那么当点击事件发的时候必然会运行到<code>onTouchEvent()</code>这个方法，我们来看一下这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;  </div><div class="line">    <span class="comment">// 略去无用代码...  </span></div><div class="line">    <span class="keyword">if</span> (((viewFlags &amp; CLICKABLE) == CLICKABLE || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)) &#123;  </div><div class="line">  </div><div class="line">         <span class="keyword">switch</span> (event.getAction()) &#123;  </div><div class="line">  </div><div class="line">              <span class="keyword">case</span> MotionEvent.ACTION_UP:  </div><div class="line">                      </div><div class="line">            <span class="comment">// 略去无用代码...  </span></div><div class="line">                <span class="keyword">if</span> (!mHasPerformedLongPress) &#123;   </div><div class="line">                    <span class="comment">// This is a tap, so remove the longpress check removeLongPressCallback();   </span></div><div class="line">                    <span class="comment">// Only perform take click actions if we were in the pressed state   </span></div><div class="line">                    <span class="keyword">if</span> (!focusTaken) &#123;   </div><div class="line">                        <span class="comment">// Use a Runnable and post this rather than calling   </span></div><div class="line">                        <span class="comment">// performClick directly. This lets other visual state   </span></div><div class="line">                        <span class="comment">// of the view update before click actions start.   </span></div><div class="line">                        <span class="keyword">if</span> (mPerformClick == <span class="keyword">null</span>) &#123;   </div><div class="line">                            mPerformClick = <span class="keyword">new</span> PerformClick();   </div><div class="line">                        &#125;   </div><div class="line">                        <span class="keyword">if</span> (!post(mPerformClick)) &#123;  </div><div class="line">                            performClick(); <span class="comment">//重点在这  </span></div><div class="line">                        &#125;   </div><div class="line">                    &#125;   </div><div class="line">                &#125;   </div><div class="line">                <span class="comment">//略去无用代码..  </span></div><div class="line">                <span class="keyword">break</span>;   </div><div class="line">        &#125;   </div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;   </div><div class="line">    &#125;   </div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>还记得前面我们在performClick();类里面找到的关于View.java类中对于回调方法onClick的调用么</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">li.mOnClickListener.onClick(<span class="keyword">this</span>);<span class="comment">//就是这里</span></div></pre></td></tr></table></figure>
<p>这样我们就完整的了解了整个<code>OnClickListener()</code>接口中体现出来的回调机制<br><strong>总结一下</strong><br>为了实现一个回调方法，首先要先定义一个包含了接口的类，并且这个接口中要有一个抽象方法，这个抽象方法的具体实现由其他类来完成(比如我们响应Button的点击事件，<code>onClick()</code>方法里写上当点击事件产生并且该方法被调用时候需要做的操作，比如显示一些文本信息等等)，最后该方法的回调是之前的包含有抽象方法的那个接口所在的类去调用的，比如说onClick()方法是当点击事件产生之后经过一系列的事件分发在<code>View</code>类中被调用的。这其中的奥秘就是：</p>
<blockquote>
<p><strong>回调其实是一种双向调用模式，也就说调用方在接口被调用时也会调用对方的接口，实现方法交还给提供接口的父类处理！</strong></p>
</blockquote>
<p><strong>为什么要用回调</strong></p>
<blockquote>
<p>我们都知道Java是一门面向对象的语言，有一句很著名的话就是”万事万物皆为对象”，我们把普通事物的共性抽取出来，而这些共性之中又充斥着特性，每个不同的特性就需要交给特定的情况处理，通过暴露接口方法可以减少很多重复，代码更加优雅。</p>
</blockquote>
<p>打个比方，Button、ImageButton等都具有可被点击的共性，但是被点击之后相关事件的处理是不同的，比如说我想我要点击的这个Button弹出一个消息提示，然而我希望我的ImageButton点击之后可以弹出一个Notifaction通知，这个时候回调方法的好处就体现出来了，因为android对外暴露的<code>OnClickListener()</code>接口中含有一个<code>OnClick()</code>方法，你需要怎样的具体实现都由你自己定义，而这个回调方法的所在类<code>View</code>不会管你怎么实现的，它只负责调用这个回调方法，这就是使用回调的好处。<br><strong>主要参考</strong><br><a href="http://blog.csdn.net/xsf50717/article/details/50520462" target="_blank" rel="external"> android中的回调</a><br><a href="http://blog.csdn.net/devor/article/details/17883427" target="_blank" rel="external">Android中回调函数机制解析</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Android的学习过程中经常会听到或者见到“回调”这个词，那么什么是回调呢？所谓的回调函数就是：&lt;strong&gt;在A类中定义了一个方法，这个方法中用到了一个接口和该接口中的抽象方法，但是抽象方法没有具体的实现，需要B类去实现，B类实现该方法后，它本身不会去调用该方法，而是传递给A类，供A类去调用&lt;/strong&gt;，这种机制就称为回调。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="https:///www.limuyang.cc/categories/Android/"/>
    
    
      <category term="回调" scheme="https:///www.limuyang.cc/tags/%E5%9B%9E%E8%B0%83/"/>
    
      <category term="分析" scheme="https:///www.limuyang.cc/tags/%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
</feed>
